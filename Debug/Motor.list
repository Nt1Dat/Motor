
Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061ac  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080062c0  080062c0  000162c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006380  08006380  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08006380  08006380  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006380  08006380  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006380  08006380  00016380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006384  08006384  00016384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006388  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b4c  2000007c  08006404  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000bc8  08006404  00020bc8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c547  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000241f  00000000  00000000  0002c5ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  0002ea10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd0  00000000  00000000  0002f6d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ad2  00000000  00000000  000302a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f94f  00000000  00000000  00048d7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b302  00000000  00000000  000586c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e39cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e08  00000000  00000000  000e3a1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	080062a4 	.word	0x080062a4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	080062a4 	.word	0x080062a4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_f2iz>:
 8001070:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001074:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001078:	d30f      	bcc.n	800109a <__aeabi_f2iz+0x2a>
 800107a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800107e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001082:	d90d      	bls.n	80010a0 <__aeabi_f2iz+0x30>
 8001084:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001088:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800108c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001090:	fa23 f002 	lsr.w	r0, r3, r2
 8001094:	bf18      	it	ne
 8001096:	4240      	negne	r0, r0
 8001098:	4770      	bx	lr
 800109a:	f04f 0000 	mov.w	r0, #0
 800109e:	4770      	bx	lr
 80010a0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010a4:	d101      	bne.n	80010aa <__aeabi_f2iz+0x3a>
 80010a6:	0242      	lsls	r2, r0, #9
 80010a8:	d105      	bne.n	80010b6 <__aeabi_f2iz+0x46>
 80010aa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010ae:	bf08      	it	eq
 80010b0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010b4:	4770      	bx	lr
 80010b6:	f04f 0000 	mov.w	r0, #0
 80010ba:	4770      	bx	lr

080010bc <__aeabi_f2uiz>:
 80010bc:	0042      	lsls	r2, r0, #1
 80010be:	d20e      	bcs.n	80010de <__aeabi_f2uiz+0x22>
 80010c0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010c4:	d30b      	bcc.n	80010de <__aeabi_f2uiz+0x22>
 80010c6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ce:	d409      	bmi.n	80010e4 <__aeabi_f2uiz+0x28>
 80010d0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010d8:	fa23 f002 	lsr.w	r0, r3, r2
 80010dc:	4770      	bx	lr
 80010de:	f04f 0000 	mov.w	r0, #0
 80010e2:	4770      	bx	lr
 80010e4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010e8:	d101      	bne.n	80010ee <__aeabi_f2uiz+0x32>
 80010ea:	0242      	lsls	r2, r0, #9
 80010ec:	d102      	bne.n	80010f4 <__aeabi_f2uiz+0x38>
 80010ee:	f04f 30ff 	mov.w	r0, #4294967295
 80010f2:	4770      	bx	lr
 80010f4:	f04f 0000 	mov.w	r0, #0
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop

080010fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001102:	f107 0310 	add.w	r3, r7, #16
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001110:	4b1e      	ldr	r3, [pc, #120]	; (800118c <MX_GPIO_Init+0x90>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	4a1d      	ldr	r2, [pc, #116]	; (800118c <MX_GPIO_Init+0x90>)
 8001116:	f043 0320 	orr.w	r3, r3, #32
 800111a:	6193      	str	r3, [r2, #24]
 800111c:	4b1b      	ldr	r3, [pc, #108]	; (800118c <MX_GPIO_Init+0x90>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	f003 0320 	and.w	r3, r3, #32
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001128:	4b18      	ldr	r3, [pc, #96]	; (800118c <MX_GPIO_Init+0x90>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	4a17      	ldr	r2, [pc, #92]	; (800118c <MX_GPIO_Init+0x90>)
 800112e:	f043 0304 	orr.w	r3, r3, #4
 8001132:	6193      	str	r3, [r2, #24]
 8001134:	4b15      	ldr	r3, [pc, #84]	; (800118c <MX_GPIO_Init+0x90>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	f003 0304 	and.w	r3, r3, #4
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <MX_GPIO_Init+0x90>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	4a11      	ldr	r2, [pc, #68]	; (800118c <MX_GPIO_Init+0x90>)
 8001146:	f043 0308 	orr.w	r3, r3, #8
 800114a:	6193      	str	r3, [r2, #24]
 800114c:	4b0f      	ldr	r3, [pc, #60]	; (800118c <MX_GPIO_Init+0x90>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	f003 0308 	and.w	r3, r3, #8
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001158:	2200      	movs	r2, #0
 800115a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800115e:	480c      	ldr	r0, [pc, #48]	; (8001190 <MX_GPIO_Init+0x94>)
 8001160:	f001 fe2a 	bl	8002db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001164:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001168:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116a:	2301      	movs	r3, #1
 800116c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2302      	movs	r3, #2
 8001174:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001176:	f107 0310 	add.w	r3, r7, #16
 800117a:	4619      	mov	r1, r3
 800117c:	4804      	ldr	r0, [pc, #16]	; (8001190 <MX_GPIO_Init+0x94>)
 800117e:	f001 fc97 	bl	8002ab0 <HAL_GPIO_Init>

}
 8001182:	bf00      	nop
 8001184:	3720      	adds	r7, #32
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40021000 	.word	0x40021000
 8001190:	40010c00 	.word	0x40010c00

08001194 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001194:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800119c:	f001 faf4 	bl	8002788 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a0:	f000 fb92 	bl	80018c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a4:	f7ff ffaa 	bl	80010fc <MX_GPIO_Init>
  MX_TIM2_Init();
 80011a8:	f001 f8a6 	bl	80022f8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80011ac:	f001 f8f0 	bl	8002390 <MX_TIM3_Init>
  MX_TIM4_Init();
 80011b0:	f001 f948 	bl	8002444 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80011b4:	f001 fa4c 	bl	8002650 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  SerialInit();
 80011b8:	f000 ff88 	bl	80020cc <SerialInit>
  MotorInit();
 80011bc:	f000 fc40 	bl	8001a40 <MotorInit>
  tProcess = NONE;
 80011c0:	4b85      	ldr	r3, [pc, #532]	; (80013d8 <main+0x244>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	701a      	strb	r2, [r3, #0]
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(g_bDataAvailable == true)
 80011c6:	4b85      	ldr	r3, [pc, #532]	; (80013dc <main+0x248>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d04d      	beq.n	800126a <main+0xd6>
	 	  	      {
	 	  	        if(StrCompare(g_strCommand, (uint8_t*)"SPID", 4))
 80011ce:	2204      	movs	r2, #4
 80011d0:	4983      	ldr	r1, [pc, #524]	; (80013e0 <main+0x24c>)
 80011d2:	4884      	ldr	r0, [pc, #528]	; (80013e4 <main+0x250>)
 80011d4:	f000 ff56 	bl	8002084 <StrCompare>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d003      	beq.n	80011e6 <main+0x52>
	 	  	        {
	 	  	          tProcess = SPID;
 80011de:	4b7e      	ldr	r3, [pc, #504]	; (80013d8 <main+0x244>)
 80011e0:	2202      	movs	r2, #2
 80011e2:	701a      	strb	r2, [r3, #0]
 80011e4:	e03e      	b.n	8001264 <main+0xd0>
	 	  	        }
	 	  	        else if(StrCompare(g_strCommand, (uint8_t*)"CTUN", 4))
 80011e6:	2204      	movs	r2, #4
 80011e8:	497f      	ldr	r1, [pc, #508]	; (80013e8 <main+0x254>)
 80011ea:	487e      	ldr	r0, [pc, #504]	; (80013e4 <main+0x250>)
 80011ec:	f000 ff4a 	bl	8002084 <StrCompare>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <main+0x6a>
	 	  	        {
	 	  	          tProcess = CTUN_RES;
 80011f6:	4b78      	ldr	r3, [pc, #480]	; (80013d8 <main+0x244>)
 80011f8:	2204      	movs	r2, #4
 80011fa:	701a      	strb	r2, [r3, #0]
 80011fc:	e032      	b.n	8001264 <main+0xd0>
	 	  	        }
	 	  	        else if(StrCompare(g_strCommand, (uint8_t*)"GPID", 4))
 80011fe:	2204      	movs	r2, #4
 8001200:	497a      	ldr	r1, [pc, #488]	; (80013ec <main+0x258>)
 8001202:	4878      	ldr	r0, [pc, #480]	; (80013e4 <main+0x250>)
 8001204:	f000 ff3e 	bl	8002084 <StrCompare>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <main+0x82>
	 	  	        {
	 	  	          tProcess = GPID;
 800120e:	4b72      	ldr	r3, [pc, #456]	; (80013d8 <main+0x244>)
 8001210:	2205      	movs	r2, #5
 8001212:	701a      	strb	r2, [r3, #0]
 8001214:	e026      	b.n	8001264 <main+0xd0>
	 	  	        }
	 	  	        else if(StrCompare(g_strCommand, (uint8_t*)"CSET", 4))
 8001216:	2204      	movs	r2, #4
 8001218:	4975      	ldr	r1, [pc, #468]	; (80013f0 <main+0x25c>)
 800121a:	4872      	ldr	r0, [pc, #456]	; (80013e4 <main+0x250>)
 800121c:	f000 ff32 	bl	8002084 <StrCompare>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <main+0x9a>
	 	  	        {
	 	  	          tProcess = CSET;
 8001226:	4b6c      	ldr	r3, [pc, #432]	; (80013d8 <main+0x244>)
 8001228:	2206      	movs	r2, #6
 800122a:	701a      	strb	r2, [r3, #0]
 800122c:	e01a      	b.n	8001264 <main+0xd0>
	 	  	        }
	 	  	        else if(StrCompare(g_strCommand, (uint8_t*)"CRUN", 4))
 800122e:	2204      	movs	r2, #4
 8001230:	4970      	ldr	r1, [pc, #448]	; (80013f4 <main+0x260>)
 8001232:	486c      	ldr	r0, [pc, #432]	; (80013e4 <main+0x250>)
 8001234:	f000 ff26 	bl	8002084 <StrCompare>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <main+0xb2>
	 	  	        {
	 	  	          tProcess = CRUN_RES;
 800123e:	4b66      	ldr	r3, [pc, #408]	; (80013d8 <main+0x244>)
 8001240:	2208      	movs	r2, #8
 8001242:	701a      	strb	r2, [r3, #0]
 8001244:	e00e      	b.n	8001264 <main+0xd0>
	 	  	        }
	 	  	        else if(StrCompare(g_strCommand, (uint8_t*)"GRMS", 4))
 8001246:	2204      	movs	r2, #4
 8001248:	496b      	ldr	r1, [pc, #428]	; (80013f8 <main+0x264>)
 800124a:	4866      	ldr	r0, [pc, #408]	; (80013e4 <main+0x250>)
 800124c:	f000 ff1a 	bl	8002084 <StrCompare>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d003      	beq.n	800125e <main+0xca>
	 	  	        {
	 	  	          tProcess = GRMS;
 8001256:	4b60      	ldr	r3, [pc, #384]	; (80013d8 <main+0x244>)
 8001258:	2209      	movs	r2, #9
 800125a:	701a      	strb	r2, [r3, #0]
 800125c:	e002      	b.n	8001264 <main+0xd0>
	 	  	        }
	 	  	        else
	 	  	        {
	 	  	          tProcess = NONE;
 800125e:	4b5e      	ldr	r3, [pc, #376]	; (80013d8 <main+0x244>)
 8001260:	2201      	movs	r2, #1
 8001262:	701a      	strb	r2, [r3, #0]
	 	  	        }
	 	  	        g_bDataAvailable = false;
 8001264:	4b5d      	ldr	r3, [pc, #372]	; (80013dc <main+0x248>)
 8001266:	2200      	movs	r2, #0
 8001268:	701a      	strb	r2, [r3, #0]
	 	  	      }

	 	  	      switch(tProcess)
 800126a:	4b5b      	ldr	r3, [pc, #364]	; (80013d8 <main+0x244>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	3b01      	subs	r3, #1
 8001270:	2b08      	cmp	r3, #8
 8001272:	d8a8      	bhi.n	80011c6 <main+0x32>
 8001274:	a201      	add	r2, pc, #4	; (adr r2, 800127c <main+0xe8>)
 8001276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800127a:	bf00      	nop
 800127c:	080012a1 	.word	0x080012a1
 8001280:	080012a7 	.word	0x080012a7
 8001284:	080011c7 	.word	0x080011c7
 8001288:	080013c1 	.word	0x080013c1
 800128c:	080013d3 	.word	0x080013d3
 8001290:	08001501 	.word	0x08001501
 8001294:	08001797 	.word	0x08001797
 8001298:	08001769 	.word	0x08001769
 800129c:	0800179f 	.word	0x0800179f
	 	  	      {
	 	  	        case NONE:
	 	  	          SerialAcceptReceive();
 80012a0:	f000 ff22 	bl	80020e8 <SerialAcceptReceive>
	 	  	          break;
 80012a4:	e2f2      	b.n	800188c <main+0x6f8>
	 	  	        case SPID:
	 	  	          SerialWriteComm(g_strCommand, g_nOption, g_nData);
 80012a6:	4a55      	ldr	r2, [pc, #340]	; (80013fc <main+0x268>)
 80012a8:	4955      	ldr	r1, [pc, #340]	; (8001400 <main+0x26c>)
 80012aa:	484e      	ldr	r0, [pc, #312]	; (80013e4 <main+0x250>)
 80012ac:	f000 ff2a 	bl	8002104 <SerialWriteComm>
	 	  	          g_nCmdPulse = 0;
 80012b0:	4b54      	ldr	r3, [pc, #336]	; (8001404 <main+0x270>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
	 	  	          PIDReset(&tPIDControl);
 80012b6:	4854      	ldr	r0, [pc, #336]	; (8001408 <main+0x274>)
 80012b8:	f000 fe3e 	bl	8001f38 <PIDReset>
	 	  	          __HAL_TIM_SetCounter(&htim4, 32768);
 80012bc:	4b53      	ldr	r3, [pc, #332]	; (800140c <main+0x278>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80012c4:	625a      	str	r2, [r3, #36]	; 0x24
	 	  	          g_nIndex = 0;
 80012c6:	4b52      	ldr	r3, [pc, #328]	; (8001410 <main+0x27c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	801a      	strh	r2, [r3, #0]

	 	  	          //get PID params
	 	  	          tPIDControl.dKp = (float)g_nData[0] + (float)g_nData[1]/10;
 80012cc:	4b4b      	ldr	r3, [pc, #300]	; (80013fc <main+0x268>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff fcaf 	bl	8000c34 <__aeabi_ui2f>
 80012d6:	4604      	mov	r4, r0
 80012d8:	4b48      	ldr	r3, [pc, #288]	; (80013fc <main+0x268>)
 80012da:	785b      	ldrb	r3, [r3, #1]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff fca9 	bl	8000c34 <__aeabi_ui2f>
 80012e2:	4603      	mov	r3, r0
 80012e4:	494b      	ldr	r1, [pc, #300]	; (8001414 <main+0x280>)
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff fdb0 	bl	8000e4c <__aeabi_fdiv>
 80012ec:	4603      	mov	r3, r0
 80012ee:	4619      	mov	r1, r3
 80012f0:	4620      	mov	r0, r4
 80012f2:	f7ff fbef 	bl	8000ad4 <__addsf3>
 80012f6:	4603      	mov	r3, r0
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b43      	ldr	r3, [pc, #268]	; (8001408 <main+0x274>)
 80012fc:	601a      	str	r2, [r3, #0]
	 	  	          tPIDControl.dKi = (float)g_nData[2] + (float)g_nData[3]/100;
 80012fe:	4b3f      	ldr	r3, [pc, #252]	; (80013fc <main+0x268>)
 8001300:	789b      	ldrb	r3, [r3, #2]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fc96 	bl	8000c34 <__aeabi_ui2f>
 8001308:	4604      	mov	r4, r0
 800130a:	4b3c      	ldr	r3, [pc, #240]	; (80013fc <main+0x268>)
 800130c:	78db      	ldrb	r3, [r3, #3]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fc90 	bl	8000c34 <__aeabi_ui2f>
 8001314:	4603      	mov	r3, r0
 8001316:	4940      	ldr	r1, [pc, #256]	; (8001418 <main+0x284>)
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fd97 	bl	8000e4c <__aeabi_fdiv>
 800131e:	4603      	mov	r3, r0
 8001320:	4619      	mov	r1, r3
 8001322:	4620      	mov	r0, r4
 8001324:	f7ff fbd6 	bl	8000ad4 <__addsf3>
 8001328:	4603      	mov	r3, r0
 800132a:	461a      	mov	r2, r3
 800132c:	4b36      	ldr	r3, [pc, #216]	; (8001408 <main+0x274>)
 800132e:	605a      	str	r2, [r3, #4]
	 	  	          tPIDControl.dKd = ((float)g_nData[4] + (float)g_nData[5]/(pow((float)10,(float)g_nData[6])))/100;
 8001330:	4b32      	ldr	r3, [pc, #200]	; (80013fc <main+0x268>)
 8001332:	791b      	ldrb	r3, [r3, #4]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff fc7d 	bl	8000c34 <__aeabi_ui2f>
 800133a:	4603      	mov	r3, r0
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff f86b 	bl	8000418 <__aeabi_f2d>
 8001342:	4604      	mov	r4, r0
 8001344:	460d      	mov	r5, r1
 8001346:	4b2d      	ldr	r3, [pc, #180]	; (80013fc <main+0x268>)
 8001348:	795b      	ldrb	r3, [r3, #5]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff fc72 	bl	8000c34 <__aeabi_ui2f>
 8001350:	4603      	mov	r3, r0
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff f860 	bl	8000418 <__aeabi_f2d>
 8001358:	4680      	mov	r8, r0
 800135a:	4689      	mov	r9, r1
 800135c:	4b27      	ldr	r3, [pc, #156]	; (80013fc <main+0x268>)
 800135e:	799b      	ldrb	r3, [r3, #6]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff fc67 	bl	8000c34 <__aeabi_ui2f>
 8001366:	4603      	mov	r3, r0
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff f855 	bl	8000418 <__aeabi_f2d>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	f04f 0000 	mov.w	r0, #0
 8001376:	4929      	ldr	r1, [pc, #164]	; (800141c <main+0x288>)
 8001378:	f004 f8b2 	bl	80054e0 <pow>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	4640      	mov	r0, r8
 8001382:	4649      	mov	r1, r9
 8001384:	f7ff f9ca 	bl	800071c <__aeabi_ddiv>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	4620      	mov	r0, r4
 800138e:	4629      	mov	r1, r5
 8001390:	f7fe fee4 	bl	800015c <__adddf3>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4610      	mov	r0, r2
 800139a:	4619      	mov	r1, r3
 800139c:	f04f 0200 	mov.w	r2, #0
 80013a0:	4b1f      	ldr	r3, [pc, #124]	; (8001420 <main+0x28c>)
 80013a2:	f7ff f9bb 	bl	800071c <__aeabi_ddiv>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4610      	mov	r0, r2
 80013ac:	4619      	mov	r1, r3
 80013ae:	f7ff fb3b 	bl	8000a28 <__aeabi_d2f>
 80013b2:	4603      	mov	r3, r0
 80013b4:	4a14      	ldr	r2, [pc, #80]	; (8001408 <main+0x274>)
 80013b6:	6093      	str	r3, [r2, #8]

	 	  	          tProcess = NONE;
 80013b8:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <main+0x244>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	701a      	strb	r2, [r3, #0]
	 	  	          break;
 80013be:	e265      	b.n	800188c <main+0x6f8>
	 	  	        case CTUN_RES:
	 	  	          SerialWriteComm(g_strCommand, g_nOption, g_nData);
 80013c0:	4a0e      	ldr	r2, [pc, #56]	; (80013fc <main+0x268>)
 80013c2:	490f      	ldr	r1, [pc, #60]	; (8001400 <main+0x26c>)
 80013c4:	4807      	ldr	r0, [pc, #28]	; (80013e4 <main+0x250>)
 80013c6:	f000 fe9d 	bl	8002104 <SerialWriteComm>
	 	  	          tProcess = CTUN;
 80013ca:	4b03      	ldr	r3, [pc, #12]	; (80013d8 <main+0x244>)
 80013cc:	2203      	movs	r2, #3
 80013ce:	701a      	strb	r2, [r3, #0]
	 	  	          break;
 80013d0:	e25c      	b.n	800188c <main+0x6f8>
	 	  	        case CTUN:
	 	  	          break;
	 	  	        case GPID:
	 	  	          for(int index = 0; index < (g_nIndex -1); index ++)
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	e06c      	b.n	80014b2 <main+0x31e>
 80013d8:	200000a8 	.word	0x200000a8
 80013dc:	20000a90 	.word	0x20000a90
 80013e0:	080062c0 	.word	0x080062c0
 80013e4:	20000a80 	.word	0x20000a80
 80013e8:	080062c8 	.word	0x080062c8
 80013ec:	080062d0 	.word	0x080062d0
 80013f0:	080062d8 	.word	0x080062d8
 80013f4:	080062e0 	.word	0x080062e0
 80013f8:	080062e8 	.word	0x080062e8
 80013fc:	20000a88 	.word	0x20000a88
 8001400:	20000a84 	.word	0x20000a84
 8001404:	20000a60 	.word	0x20000a60
 8001408:	200000ac 	.word	0x200000ac
 800140c:	20000b28 	.word	0x20000b28
 8001410:	20000a64 	.word	0x20000a64
 8001414:	41200000 	.word	0x41200000
 8001418:	42c80000 	.word	0x42c80000
 800141c:	40240000 	.word	0x40240000
 8001420:	40590000 	.word	0x40590000
	 	  	          {
	 	  	            sprintf((char*)g_strTxCommand, "%s", g_strCommand);
 8001424:	4a2d      	ldr	r2, [pc, #180]	; (80014dc <main+0x348>)
 8001426:	492e      	ldr	r1, [pc, #184]	; (80014e0 <main+0x34c>)
 8001428:	482e      	ldr	r0, [pc, #184]	; (80014e4 <main+0x350>)
 800142a:	f003 fcd9 	bl	8004de0 <siprintf>
	 	  	            memset(g_nTxOption, '\0', 3);
 800142e:	2203      	movs	r2, #3
 8001430:	2100      	movs	r1, #0
 8001432:	482d      	ldr	r0, [pc, #180]	; (80014e8 <main+0x354>)
 8001434:	f003 fbe0 	bl	8004bf8 <memset>
	 	  	            g_nTxData[6] = (tPIDControl.nSampleTuningPID[index]&0xFF00) >>8;
 8001438:	4a2c      	ldr	r2, [pc, #176]	; (80014ec <main+0x358>)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3308      	adds	r3, #8
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	4413      	add	r3, r2
 8001442:	889b      	ldrh	r3, [r3, #4]
 8001444:	0a1b      	lsrs	r3, r3, #8
 8001446:	b29b      	uxth	r3, r3
 8001448:	b2da      	uxtb	r2, r3
 800144a:	4b29      	ldr	r3, [pc, #164]	; (80014f0 <main+0x35c>)
 800144c:	719a      	strb	r2, [r3, #6]
	 	  	            g_nTxData[7] = (tPIDControl.nSampleTuningPID[index]&0xFF);
 800144e:	4a27      	ldr	r2, [pc, #156]	; (80014ec <main+0x358>)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3308      	adds	r3, #8
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	4413      	add	r3, r2
 8001458:	889b      	ldrh	r3, [r3, #4]
 800145a:	b2da      	uxtb	r2, r3
 800145c:	4b24      	ldr	r3, [pc, #144]	; (80014f0 <main+0x35c>)
 800145e:	71da      	strb	r2, [r3, #7]
	 	  	            g_nTxData[2] = (index&0xFF00) >>8;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	121b      	asrs	r3, r3, #8
 8001464:	b2da      	uxtb	r2, r3
 8001466:	4b22      	ldr	r3, [pc, #136]	; (80014f0 <main+0x35c>)
 8001468:	709a      	strb	r2, [r3, #2]
	 	  	            g_nTxData[3] = (index&0xFF);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	b2da      	uxtb	r2, r3
 800146e:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <main+0x35c>)
 8001470:	70da      	strb	r2, [r3, #3]
	 	  	            g_nTxData[0] = 0;
 8001472:	4b1f      	ldr	r3, [pc, #124]	; (80014f0 <main+0x35c>)
 8001474:	2200      	movs	r2, #0
 8001476:	701a      	strb	r2, [r3, #0]
	 	  	            g_nTxData[1] = 199;
 8001478:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <main+0x35c>)
 800147a:	22c7      	movs	r2, #199	; 0xc7
 800147c:	705a      	strb	r2, [r3, #1]

	 	  	            SerialWriteComm(g_strTxCommand, g_nTxOption, g_nTxData);
 800147e:	4a1c      	ldr	r2, [pc, #112]	; (80014f0 <main+0x35c>)
 8001480:	4919      	ldr	r1, [pc, #100]	; (80014e8 <main+0x354>)
 8001482:	4818      	ldr	r0, [pc, #96]	; (80014e4 <main+0x350>)
 8001484:	f000 fe3e 	bl	8002104 <SerialWriteComm>
	 	  	            memset(g_strTxCommand, '\0', 4);
 8001488:	2204      	movs	r2, #4
 800148a:	2100      	movs	r1, #0
 800148c:	4815      	ldr	r0, [pc, #84]	; (80014e4 <main+0x350>)
 800148e:	f003 fbb3 	bl	8004bf8 <memset>
	 	  	            memset(g_nTxOption, '\0', 3);
 8001492:	2203      	movs	r2, #3
 8001494:	2100      	movs	r1, #0
 8001496:	4814      	ldr	r0, [pc, #80]	; (80014e8 <main+0x354>)
 8001498:	f003 fbae 	bl	8004bf8 <memset>
	 	  	            memset(g_nTxData, '\0', 8);
 800149c:	2208      	movs	r2, #8
 800149e:	2100      	movs	r1, #0
 80014a0:	4813      	ldr	r0, [pc, #76]	; (80014f0 <main+0x35c>)
 80014a2:	f003 fba9 	bl	8004bf8 <memset>


	 	  	            HAL_Delay(30);
 80014a6:	201e      	movs	r0, #30
 80014a8:	f001 f9d0 	bl	800284c <HAL_Delay>
	 	  	          for(int index = 0; index < (g_nIndex -1); index ++)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3301      	adds	r3, #1
 80014b0:	607b      	str	r3, [r7, #4]
 80014b2:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <main+0x360>)
 80014b4:	881b      	ldrh	r3, [r3, #0]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	dbb2      	blt.n	8001424 <main+0x290>
	 	  	          }
	 	  	          g_bDataAvailable = false;
 80014be:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <main+0x364>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]
	 	  	          SerialAcceptReceive();
 80014c4:	f000 fe10 	bl	80020e8 <SerialAcceptReceive>
	 	  	          memset(g_strCommand, '\0', 4);
 80014c8:	2204      	movs	r2, #4
 80014ca:	2100      	movs	r1, #0
 80014cc:	4803      	ldr	r0, [pc, #12]	; (80014dc <main+0x348>)
 80014ce:	f003 fb93 	bl	8004bf8 <memset>
	 	  	          tProcess = NONE;
 80014d2:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <main+0x368>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	701a      	strb	r2, [r3, #0]
	 	  	          break;
 80014d8:	e1d8      	b.n	800188c <main+0x6f8>
 80014da:	bf00      	nop
 80014dc:	20000a80 	.word	0x20000a80
 80014e0:	080062f0 	.word	0x080062f0
 80014e4:	20000098 	.word	0x20000098
 80014e8:	2000009c 	.word	0x2000009c
 80014ec:	200000ac 	.word	0x200000ac
 80014f0:	200000a0 	.word	0x200000a0
 80014f4:	20000a64 	.word	0x20000a64
 80014f8:	20000a90 	.word	0x20000a90
 80014fc:	200000a8 	.word	0x200000a8
	 	  	        case CSET:
	 	  	          SerialWriteComm(g_strCommand, g_nOption, g_nData);
 8001500:	4a91      	ldr	r2, [pc, #580]	; (8001748 <main+0x5b4>)
 8001502:	4992      	ldr	r1, [pc, #584]	; (800174c <main+0x5b8>)
 8001504:	4892      	ldr	r0, [pc, #584]	; (8001750 <main+0x5bc>)
 8001506:	f000 fdfd 	bl	8002104 <SerialWriteComm>

	 	  	          PIDReset(&tPIDControl);
 800150a:	4892      	ldr	r0, [pc, #584]	; (8001754 <main+0x5c0>)
 800150c:	f000 fd14 	bl	8001f38 <PIDReset>
	 	  	          g_nActPulse = 0;
 8001510:	4b91      	ldr	r3, [pc, #580]	; (8001758 <main+0x5c4>)
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
	 	  	          g_nCmdPulse = 0 ;
 8001516:	4b91      	ldr	r3, [pc, #580]	; (800175c <main+0x5c8>)
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]

	 	  	          //Get Pmax, Vmax, Amax
	 	  	          tProfile.dAccelMax = (float)(g_nData[2])*256 + (float)(g_nData[3]);
 800151c:	4b8a      	ldr	r3, [pc, #552]	; (8001748 <main+0x5b4>)
 800151e:	789b      	ldrb	r3, [r3, #2]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff fb87 	bl	8000c34 <__aeabi_ui2f>
 8001526:	4603      	mov	r3, r0
 8001528:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff fbd9 	bl	8000ce4 <__aeabi_fmul>
 8001532:	4603      	mov	r3, r0
 8001534:	461c      	mov	r4, r3
 8001536:	4b84      	ldr	r3, [pc, #528]	; (8001748 <main+0x5b4>)
 8001538:	78db      	ldrb	r3, [r3, #3]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff fb7a 	bl	8000c34 <__aeabi_ui2f>
 8001540:	4603      	mov	r3, r0
 8001542:	4619      	mov	r1, r3
 8001544:	4620      	mov	r0, r4
 8001546:	f7ff fac5 	bl	8000ad4 <__addsf3>
 800154a:	4603      	mov	r3, r0
 800154c:	461a      	mov	r2, r3
 800154e:	4b84      	ldr	r3, [pc, #528]	; (8001760 <main+0x5cc>)
 8001550:	601a      	str	r2, [r3, #0]
	 	  	          tProfile.dVelMax = (float)(g_nData[4])*256 + (float)(g_nData[5]);
 8001552:	4b7d      	ldr	r3, [pc, #500]	; (8001748 <main+0x5b4>)
 8001554:	791b      	ldrb	r3, [r3, #4]
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fb6c 	bl	8000c34 <__aeabi_ui2f>
 800155c:	4603      	mov	r3, r0
 800155e:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fbbe 	bl	8000ce4 <__aeabi_fmul>
 8001568:	4603      	mov	r3, r0
 800156a:	461c      	mov	r4, r3
 800156c:	4b76      	ldr	r3, [pc, #472]	; (8001748 <main+0x5b4>)
 800156e:	795b      	ldrb	r3, [r3, #5]
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fb5f 	bl	8000c34 <__aeabi_ui2f>
 8001576:	4603      	mov	r3, r0
 8001578:	4619      	mov	r1, r3
 800157a:	4620      	mov	r0, r4
 800157c:	f7ff faaa 	bl	8000ad4 <__addsf3>
 8001580:	4603      	mov	r3, r0
 8001582:	461a      	mov	r2, r3
 8001584:	4b76      	ldr	r3, [pc, #472]	; (8001760 <main+0x5cc>)
 8001586:	605a      	str	r2, [r3, #4]
	 	  	          tProfile.dPosMax = (float)(g_nData[6])*256 + (float)(g_nData[7]);
 8001588:	4b6f      	ldr	r3, [pc, #444]	; (8001748 <main+0x5b4>)
 800158a:	799b      	ldrb	r3, [r3, #6]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff fb51 	bl	8000c34 <__aeabi_ui2f>
 8001592:	4603      	mov	r3, r0
 8001594:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff fba3 	bl	8000ce4 <__aeabi_fmul>
 800159e:	4603      	mov	r3, r0
 80015a0:	461c      	mov	r4, r3
 80015a2:	4b69      	ldr	r3, [pc, #420]	; (8001748 <main+0x5b4>)
 80015a4:	79db      	ldrb	r3, [r3, #7]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fb44 	bl	8000c34 <__aeabi_ui2f>
 80015ac:	4603      	mov	r3, r0
 80015ae:	4619      	mov	r1, r3
 80015b0:	4620      	mov	r0, r4
 80015b2:	f7ff fa8f 	bl	8000ad4 <__addsf3>
 80015b6:	4603      	mov	r3, r0
 80015b8:	461a      	mov	r2, r3
 80015ba:	4b69      	ldr	r3, [pc, #420]	; (8001760 <main+0x5cc>)
 80015bc:	609a      	str	r2, [r3, #8]
	 	  	          //Calculate params for trapezoidal speed
	 	  	          tProfile.dA1 = 0.5f * tProfile.dAccelMax;
 80015be:	4b68      	ldr	r3, [pc, #416]	; (8001760 <main+0x5cc>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fb8c 	bl	8000ce4 <__aeabi_fmul>
 80015cc:	4603      	mov	r3, r0
 80015ce:	461a      	mov	r2, r3
 80015d0:	4b63      	ldr	r3, [pc, #396]	; (8001760 <main+0x5cc>)
 80015d2:	60da      	str	r2, [r3, #12]
	 	  	          tProfile.dA2 = tProfile.dVelMax;
 80015d4:	4b62      	ldr	r3, [pc, #392]	; (8001760 <main+0x5cc>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	4a61      	ldr	r2, [pc, #388]	; (8001760 <main+0x5cc>)
 80015da:	6113      	str	r3, [r2, #16]
	 	  	          tProfile.dB2 = -0.5f * tProfile.dVelMax * tProfile.dVelMax / tProfile.dAccelMax;
 80015dc:	4b60      	ldr	r3, [pc, #384]	; (8001760 <main+0x5cc>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff fb7d 	bl	8000ce4 <__aeabi_fmul>
 80015ea:	4603      	mov	r3, r0
 80015ec:	461a      	mov	r2, r3
 80015ee:	4b5c      	ldr	r3, [pc, #368]	; (8001760 <main+0x5cc>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	4619      	mov	r1, r3
 80015f4:	4610      	mov	r0, r2
 80015f6:	f7ff fb75 	bl	8000ce4 <__aeabi_fmul>
 80015fa:	4603      	mov	r3, r0
 80015fc:	461a      	mov	r2, r3
 80015fe:	4b58      	ldr	r3, [pc, #352]	; (8001760 <main+0x5cc>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4619      	mov	r1, r3
 8001604:	4610      	mov	r0, r2
 8001606:	f7ff fc21 	bl	8000e4c <__aeabi_fdiv>
 800160a:	4603      	mov	r3, r0
 800160c:	461a      	mov	r2, r3
 800160e:	4b54      	ldr	r3, [pc, #336]	; (8001760 <main+0x5cc>)
 8001610:	615a      	str	r2, [r3, #20]
	 	  	          tProfile.dA3 = -0.5f * tProfile.dAccelMax;
 8001612:	4b53      	ldr	r3, [pc, #332]	; (8001760 <main+0x5cc>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff fb62 	bl	8000ce4 <__aeabi_fmul>
 8001620:	4603      	mov	r3, r0
 8001622:	461a      	mov	r2, r3
 8001624:	4b4e      	ldr	r3, [pc, #312]	; (8001760 <main+0x5cc>)
 8001626:	619a      	str	r2, [r3, #24]
	 	  	          tProfile.dB3 = tProfile.dPosMax * tProfile.dAccelMax / tProfile.dVelMax + tProfile.dVelMax;
 8001628:	4b4d      	ldr	r3, [pc, #308]	; (8001760 <main+0x5cc>)
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	4a4c      	ldr	r2, [pc, #304]	; (8001760 <main+0x5cc>)
 800162e:	6812      	ldr	r2, [r2, #0]
 8001630:	4611      	mov	r1, r2
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff fb56 	bl	8000ce4 <__aeabi_fmul>
 8001638:	4603      	mov	r3, r0
 800163a:	461a      	mov	r2, r3
 800163c:	4b48      	ldr	r3, [pc, #288]	; (8001760 <main+0x5cc>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	4619      	mov	r1, r3
 8001642:	4610      	mov	r0, r2
 8001644:	f7ff fc02 	bl	8000e4c <__aeabi_fdiv>
 8001648:	4603      	mov	r3, r0
 800164a:	461a      	mov	r2, r3
 800164c:	4b44      	ldr	r3, [pc, #272]	; (8001760 <main+0x5cc>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	4619      	mov	r1, r3
 8001652:	4610      	mov	r0, r2
 8001654:	f7ff fa3e 	bl	8000ad4 <__addsf3>
 8001658:	4603      	mov	r3, r0
 800165a:	461a      	mov	r2, r3
 800165c:	4b40      	ldr	r3, [pc, #256]	; (8001760 <main+0x5cc>)
 800165e:	61da      	str	r2, [r3, #28]
	 	  	          tProfile.dC3 = -0.5f * tProfile.dPosMax*tProfile.dPosMax*tProfile.dAccelMax/ (tProfile.dVelMax * tProfile.dVelMax) - 0.5f *tProfile.dVelMax * tProfile.dVelMax/tProfile.dAccelMax;
 8001660:	4b3f      	ldr	r3, [pc, #252]	; (8001760 <main+0x5cc>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff fb3b 	bl	8000ce4 <__aeabi_fmul>
 800166e:	4603      	mov	r3, r0
 8001670:	461a      	mov	r2, r3
 8001672:	4b3b      	ldr	r3, [pc, #236]	; (8001760 <main+0x5cc>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	4619      	mov	r1, r3
 8001678:	4610      	mov	r0, r2
 800167a:	f7ff fb33 	bl	8000ce4 <__aeabi_fmul>
 800167e:	4603      	mov	r3, r0
 8001680:	461a      	mov	r2, r3
 8001682:	4b37      	ldr	r3, [pc, #220]	; (8001760 <main+0x5cc>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4619      	mov	r1, r3
 8001688:	4610      	mov	r0, r2
 800168a:	f7ff fb2b 	bl	8000ce4 <__aeabi_fmul>
 800168e:	4603      	mov	r3, r0
 8001690:	461c      	mov	r4, r3
 8001692:	4b33      	ldr	r3, [pc, #204]	; (8001760 <main+0x5cc>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	4a32      	ldr	r2, [pc, #200]	; (8001760 <main+0x5cc>)
 8001698:	6852      	ldr	r2, [r2, #4]
 800169a:	4611      	mov	r1, r2
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fb21 	bl	8000ce4 <__aeabi_fmul>
 80016a2:	4603      	mov	r3, r0
 80016a4:	4619      	mov	r1, r3
 80016a6:	4620      	mov	r0, r4
 80016a8:	f7ff fbd0 	bl	8000e4c <__aeabi_fdiv>
 80016ac:	4603      	mov	r3, r0
 80016ae:	461c      	mov	r4, r3
 80016b0:	4b2b      	ldr	r3, [pc, #172]	; (8001760 <main+0x5cc>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fb13 	bl	8000ce4 <__aeabi_fmul>
 80016be:	4603      	mov	r3, r0
 80016c0:	461a      	mov	r2, r3
 80016c2:	4b27      	ldr	r3, [pc, #156]	; (8001760 <main+0x5cc>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	4619      	mov	r1, r3
 80016c8:	4610      	mov	r0, r2
 80016ca:	f7ff fb0b 	bl	8000ce4 <__aeabi_fmul>
 80016ce:	4603      	mov	r3, r0
 80016d0:	461a      	mov	r2, r3
 80016d2:	4b23      	ldr	r3, [pc, #140]	; (8001760 <main+0x5cc>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4619      	mov	r1, r3
 80016d8:	4610      	mov	r0, r2
 80016da:	f7ff fbb7 	bl	8000e4c <__aeabi_fdiv>
 80016de:	4603      	mov	r3, r0
 80016e0:	4619      	mov	r1, r3
 80016e2:	4620      	mov	r0, r4
 80016e4:	f7ff f9f4 	bl	8000ad0 <__aeabi_fsub>
 80016e8:	4603      	mov	r3, r0
 80016ea:	461a      	mov	r2, r3
 80016ec:	4b1c      	ldr	r3, [pc, #112]	; (8001760 <main+0x5cc>)
 80016ee:	621a      	str	r2, [r3, #32]


	 	  	          tProfile.dMidStep1 = tProfile.dVelMax / tProfile.dAccelMax;
 80016f0:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <main+0x5cc>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	4a1a      	ldr	r2, [pc, #104]	; (8001760 <main+0x5cc>)
 80016f6:	6812      	ldr	r2, [r2, #0]
 80016f8:	4611      	mov	r1, r2
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff fba6 	bl	8000e4c <__aeabi_fdiv>
 8001700:	4603      	mov	r3, r0
 8001702:	461a      	mov	r2, r3
 8001704:	4b16      	ldr	r3, [pc, #88]	; (8001760 <main+0x5cc>)
 8001706:	625a      	str	r2, [r3, #36]	; 0x24
	 	  	          tProfile.dMidStep2 = tProfile.dPosMax / tProfile.dVelMax;
 8001708:	4b15      	ldr	r3, [pc, #84]	; (8001760 <main+0x5cc>)
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	4a14      	ldr	r2, [pc, #80]	; (8001760 <main+0x5cc>)
 800170e:	6852      	ldr	r2, [r2, #4]
 8001710:	4611      	mov	r1, r2
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fb9a 	bl	8000e4c <__aeabi_fdiv>
 8001718:	4603      	mov	r3, r0
 800171a:	461a      	mov	r2, r3
 800171c:	4b10      	ldr	r3, [pc, #64]	; (8001760 <main+0x5cc>)
 800171e:	629a      	str	r2, [r3, #40]	; 0x28
	 	  	          tProfile.dMidStep3 = tProfile.dMidStep1 + tProfile.dMidStep2;
 8001720:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <main+0x5cc>)
 8001722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001724:	4a0e      	ldr	r2, [pc, #56]	; (8001760 <main+0x5cc>)
 8001726:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001728:	4611      	mov	r1, r2
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff f9d2 	bl	8000ad4 <__addsf3>
 8001730:	4603      	mov	r3, r0
 8001732:	461a      	mov	r2, r3
 8001734:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <main+0x5cc>)
 8001736:	62da      	str	r2, [r3, #44]	; 0x2c

	 	  	          tProfile.nTime = 0;
 8001738:	4b09      	ldr	r3, [pc, #36]	; (8001760 <main+0x5cc>)
 800173a:	f04f 0200 	mov.w	r2, #0
 800173e:	631a      	str	r2, [r3, #48]	; 0x30
	 	  	          tProcess = NONE;
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <main+0x5d0>)
 8001742:	2201      	movs	r2, #1
 8001744:	701a      	strb	r2, [r3, #0]
	 	  	          //memset(g_strCommand, '\0', 4);
	 	  	          break;
 8001746:	e0a1      	b.n	800188c <main+0x6f8>
 8001748:	20000a88 	.word	0x20000a88
 800174c:	20000a84 	.word	0x20000a84
 8001750:	20000a80 	.word	0x20000a80
 8001754:	200000ac 	.word	0x200000ac
 8001758:	20000a5c 	.word	0x20000a5c
 800175c:	20000a60 	.word	0x20000a60
 8001760:	20000a20 	.word	0x20000a20
 8001764:	200000a8 	.word	0x200000a8

	 	  	        case CRUN_RES:
	 	  	          SerialWriteComm(g_strCommand, g_nOption, g_nData);
 8001768:	4a49      	ldr	r2, [pc, #292]	; (8001890 <main+0x6fc>)
 800176a:	494a      	ldr	r1, [pc, #296]	; (8001894 <main+0x700>)
 800176c:	484a      	ldr	r0, [pc, #296]	; (8001898 <main+0x704>)
 800176e:	f000 fcc9 	bl	8002104 <SerialWriteComm>
	 	  	          g_nCmdPulse = 0;
 8001772:	4b4a      	ldr	r3, [pc, #296]	; (800189c <main+0x708>)
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
	 	  	          PIDReset(&tPIDControl);
 8001778:	4849      	ldr	r0, [pc, #292]	; (80018a0 <main+0x70c>)
 800177a:	f000 fbdd 	bl	8001f38 <PIDReset>
	 	  	          __HAL_TIM_SetCounter(&htim4, 32768);
 800177e:	4b49      	ldr	r3, [pc, #292]	; (80018a4 <main+0x710>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001786:	625a      	str	r2, [r3, #36]	; 0x24
	 	  	          g_nIndex = 0 ;
 8001788:	4b47      	ldr	r3, [pc, #284]	; (80018a8 <main+0x714>)
 800178a:	2200      	movs	r2, #0
 800178c:	801a      	strh	r2, [r3, #0]
	 	  	          tProcess = CRUN;
 800178e:	4b47      	ldr	r3, [pc, #284]	; (80018ac <main+0x718>)
 8001790:	2207      	movs	r2, #7
 8001792:	701a      	strb	r2, [r3, #0]
	 	  	          //memset(g_strCommand, '\0', 4);
	 	  	          break;
 8001794:	e07a      	b.n	800188c <main+0x6f8>
	 	  	        case CRUN:
	 	  	          g_bDataAvailable = false;
 8001796:	4b46      	ldr	r3, [pc, #280]	; (80018b0 <main+0x71c>)
 8001798:	2200      	movs	r2, #0
 800179a:	701a      	strb	r2, [r3, #0]
	 	  	          //memset(g_strCommand, '\0', 4);
	 	  	          break;
 800179c:	e076      	b.n	800188c <main+0x6f8>
	 	  	        case GRMS:
	 	  	          for(int index = 0 ; index < (g_nIndex - 1); index ++)
 800179e:	2300      	movs	r3, #0
 80017a0:	603b      	str	r3, [r7, #0]
 80017a2:	e064      	b.n	800186e <main+0x6da>
	 	  	          {
	 	  	            sprintf((char*)g_strTxCommand, "%s", g_strCommand);
 80017a4:	4a3c      	ldr	r2, [pc, #240]	; (8001898 <main+0x704>)
 80017a6:	4943      	ldr	r1, [pc, #268]	; (80018b4 <main+0x720>)
 80017a8:	4843      	ldr	r0, [pc, #268]	; (80018b8 <main+0x724>)
 80017aa:	f003 fb19 	bl	8004de0 <siprintf>
	 	  	            memset(g_nTxOption, '\0', 3);
 80017ae:	2203      	movs	r2, #3
 80017b0:	2100      	movs	r1, #0
 80017b2:	4842      	ldr	r0, [pc, #264]	; (80018bc <main+0x728>)
 80017b4:	f003 fa20 	bl	8004bf8 <memset>
	 	  	            g_nTxData[6] = (tPIDControl.nActPosSample[index]&0xFF00) >>8;
 80017b8:	4a39      	ldr	r2, [pc, #228]	; (80018a0 <main+0x70c>)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	33d0      	adds	r3, #208	; 0xd0
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	4413      	add	r3, r2
 80017c2:	889b      	ldrh	r3, [r3, #4]
 80017c4:	0a1b      	lsrs	r3, r3, #8
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	4b3d      	ldr	r3, [pc, #244]	; (80018c0 <main+0x72c>)
 80017cc:	719a      	strb	r2, [r3, #6]
	 	  	            g_nTxData[7] = (tPIDControl.nActPosSample[index]&0xFF);
 80017ce:	4a34      	ldr	r2, [pc, #208]	; (80018a0 <main+0x70c>)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	33d0      	adds	r3, #208	; 0xd0
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	4413      	add	r3, r2
 80017d8:	889b      	ldrh	r3, [r3, #4]
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	4b38      	ldr	r3, [pc, #224]	; (80018c0 <main+0x72c>)
 80017de:	71da      	strb	r2, [r3, #7]
	 	  	            g_nTxData[4] = ((uint16_t)g_dPIDError&0xFF00)>>8;
 80017e0:	4b38      	ldr	r3, [pc, #224]	; (80018c4 <main+0x730>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fc69 	bl	80010bc <__aeabi_f2uiz>
 80017ea:	4603      	mov	r3, r0
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	0a1b      	lsrs	r3, r3, #8
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	4b32      	ldr	r3, [pc, #200]	; (80018c0 <main+0x72c>)
 80017f6:	711a      	strb	r2, [r3, #4]
	 	  	            g_nTxData[5] = ((uint16_t)g_dPIDError&0xFF);
 80017f8:	4b32      	ldr	r3, [pc, #200]	; (80018c4 <main+0x730>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fc5d 	bl	80010bc <__aeabi_f2uiz>
 8001802:	4603      	mov	r3, r0
 8001804:	b29b      	uxth	r3, r3
 8001806:	b2da      	uxtb	r2, r3
 8001808:	4b2d      	ldr	r3, [pc, #180]	; (80018c0 <main+0x72c>)
 800180a:	715a      	strb	r2, [r3, #5]
	 	  	            g_nTxData[2] = (index&0xFF00) >>8;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	121b      	asrs	r3, r3, #8
 8001810:	b2da      	uxtb	r2, r3
 8001812:	4b2b      	ldr	r3, [pc, #172]	; (80018c0 <main+0x72c>)
 8001814:	709a      	strb	r2, [r3, #2]
	 	  	            g_nTxData[3] = (index&0xFF);
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	b2da      	uxtb	r2, r3
 800181a:	4b29      	ldr	r3, [pc, #164]	; (80018c0 <main+0x72c>)
 800181c:	70da      	strb	r2, [r3, #3]
	 	  	            g_nTxData[0] = ((g_nIndex -2)&0xFF00)>>8;
 800181e:	4b22      	ldr	r3, [pc, #136]	; (80018a8 <main+0x714>)
 8001820:	881b      	ldrh	r3, [r3, #0]
 8001822:	3b02      	subs	r3, #2
 8001824:	121b      	asrs	r3, r3, #8
 8001826:	b2da      	uxtb	r2, r3
 8001828:	4b25      	ldr	r3, [pc, #148]	; (80018c0 <main+0x72c>)
 800182a:	701a      	strb	r2, [r3, #0]
	 	  	            g_nTxData[1] = ((g_nIndex -2)&0xFF);
 800182c:	4b1e      	ldr	r3, [pc, #120]	; (80018a8 <main+0x714>)
 800182e:	881b      	ldrh	r3, [r3, #0]
 8001830:	b2db      	uxtb	r3, r3
 8001832:	3b02      	subs	r3, #2
 8001834:	b2da      	uxtb	r2, r3
 8001836:	4b22      	ldr	r3, [pc, #136]	; (80018c0 <main+0x72c>)
 8001838:	705a      	strb	r2, [r3, #1]

	 	  	            SerialWriteComm(g_strTxCommand, g_nTxOption, g_nTxData);
 800183a:	4a21      	ldr	r2, [pc, #132]	; (80018c0 <main+0x72c>)
 800183c:	491f      	ldr	r1, [pc, #124]	; (80018bc <main+0x728>)
 800183e:	481e      	ldr	r0, [pc, #120]	; (80018b8 <main+0x724>)
 8001840:	f000 fc60 	bl	8002104 <SerialWriteComm>
	 	  	            memset(g_strTxCommand, '\0', 4);
 8001844:	2204      	movs	r2, #4
 8001846:	2100      	movs	r1, #0
 8001848:	481b      	ldr	r0, [pc, #108]	; (80018b8 <main+0x724>)
 800184a:	f003 f9d5 	bl	8004bf8 <memset>
	 	  	            memset(g_nTxOption, '\0', 3);
 800184e:	2203      	movs	r2, #3
 8001850:	2100      	movs	r1, #0
 8001852:	481a      	ldr	r0, [pc, #104]	; (80018bc <main+0x728>)
 8001854:	f003 f9d0 	bl	8004bf8 <memset>
	 	  	            memset(g_nTxData, '\0', 8);
 8001858:	2208      	movs	r2, #8
 800185a:	2100      	movs	r1, #0
 800185c:	4818      	ldr	r0, [pc, #96]	; (80018c0 <main+0x72c>)
 800185e:	f003 f9cb 	bl	8004bf8 <memset>

	 	  	            HAL_Delay(30);
 8001862:	201e      	movs	r0, #30
 8001864:	f000 fff2 	bl	800284c <HAL_Delay>
	 	  	          for(int index = 0 ; index < (g_nIndex - 1); index ++)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	3301      	adds	r3, #1
 800186c:	603b      	str	r3, [r7, #0]
 800186e:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <main+0x714>)
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	3b01      	subs	r3, #1
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	429a      	cmp	r2, r3
 8001878:	db94      	blt.n	80017a4 <main+0x610>
	 	  	          }
	 	  	          g_bDataAvailable = false;
 800187a:	4b0d      	ldr	r3, [pc, #52]	; (80018b0 <main+0x71c>)
 800187c:	2200      	movs	r2, #0
 800187e:	701a      	strb	r2, [r3, #0]
	 	  	          SerialAcceptReceive();
 8001880:	f000 fc32 	bl	80020e8 <SerialAcceptReceive>
	 	  	          tProcess = NONE;
 8001884:	4b09      	ldr	r3, [pc, #36]	; (80018ac <main+0x718>)
 8001886:	2201      	movs	r2, #1
 8001888:	701a      	strb	r2, [r3, #0]
	 	  	          break;
 800188a:	bf00      	nop
	  if(g_bDataAvailable == true)
 800188c:	e49b      	b.n	80011c6 <main+0x32>
 800188e:	bf00      	nop
 8001890:	20000a88 	.word	0x20000a88
 8001894:	20000a84 	.word	0x20000a84
 8001898:	20000a80 	.word	0x20000a80
 800189c:	20000a60 	.word	0x20000a60
 80018a0:	200000ac 	.word	0x200000ac
 80018a4:	20000b28 	.word	0x20000b28
 80018a8:	20000a64 	.word	0x20000a64
 80018ac:	200000a8 	.word	0x200000a8
 80018b0:	20000a90 	.word	0x20000a90
 80018b4:	080062f0 	.word	0x080062f0
 80018b8:	20000098 	.word	0x20000098
 80018bc:	2000009c 	.word	0x2000009c
 80018c0:	200000a0 	.word	0x200000a0
 80018c4:	20000a68 	.word	0x20000a68

080018c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b090      	sub	sp, #64	; 0x40
 80018cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ce:	f107 0318 	add.w	r3, r7, #24
 80018d2:	2228      	movs	r2, #40	; 0x28
 80018d4:	2100      	movs	r1, #0
 80018d6:	4618      	mov	r0, r3
 80018d8:	f003 f98e 	bl	8004bf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018dc:	1d3b      	adds	r3, r7, #4
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]
 80018e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018ea:	2301      	movs	r3, #1
 80018ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80018f4:	2300      	movs	r3, #0
 80018f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018f8:	2301      	movs	r3, #1
 80018fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018fc:	2302      	movs	r3, #2
 80018fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001900:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001904:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001906:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800190a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800190c:	f107 0318 	add.w	r3, r7, #24
 8001910:	4618      	mov	r0, r3
 8001912:	f001 fa69 	bl	8002de8 <HAL_RCC_OscConfig>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800191c:	f000 f85a 	bl	80019d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001920:	230f      	movs	r3, #15
 8001922:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001924:	2302      	movs	r3, #2
 8001926:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800192c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001930:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001932:	2300      	movs	r3, #0
 8001934:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001936:	1d3b      	adds	r3, r7, #4
 8001938:	2102      	movs	r1, #2
 800193a:	4618      	mov	r0, r3
 800193c:	f001 fcd6 	bl	80032ec <HAL_RCC_ClockConfig>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001946:	f000 f845 	bl	80019d4 <Error_Handler>
  }
}
 800194a:	bf00      	nop
 800194c:	3740      	adds	r7, #64	; 0x40
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
	...

08001954 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  if(htim->Instance == htim2.Instance)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	429a      	cmp	r2, r3
 8001966:	d128      	bne.n	80019ba <HAL_TIM_PeriodElapsedCallback+0x66>
  {
    switch(tProcess)
 8001968:	4b18      	ldr	r3, [pc, #96]	; (80019cc <HAL_TIM_PeriodElapsedCallback+0x78>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	3b01      	subs	r3, #1
 800196e:	2b08      	cmp	r3, #8
 8001970:	d826      	bhi.n	80019c0 <HAL_TIM_PeriodElapsedCallback+0x6c>
 8001972:	a201      	add	r2, pc, #4	; (adr r2, 8001978 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001978:	080019bf 	.word	0x080019bf
 800197c:	080019bf 	.word	0x080019bf
 8001980:	0800199d 	.word	0x0800199d
 8001984:	080019bf 	.word	0x080019bf
 8001988:	080019bf 	.word	0x080019bf
 800198c:	080019bf 	.word	0x080019bf
 8001990:	080019b5 	.word	0x080019b5
 8001994:	080019bf 	.word	0x080019bf
 8001998:	080019bf 	.word	0x080019bf
      case SPID:
        break;
      case CTUN_RES:
        break;
      case CTUN:
        if(g_nIndex <= 200)
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800199e:	881b      	ldrh	r3, [r3, #0]
 80019a0:	2bc8      	cmp	r3, #200	; 0xc8
 80019a2:	d803      	bhi.n	80019ac <HAL_TIM_PeriodElapsedCallback+0x58>
        {
          MotorTuning(25);
 80019a4:	2019      	movs	r0, #25
 80019a6:	f000 fa53 	bl	8001e50 <MotorTuning>
        }
        else
        {
          tProcess = NONE;
        }
        break;
 80019aa:	e009      	b.n	80019c0 <HAL_TIM_PeriodElapsedCallback+0x6c>
          tProcess = NONE;
 80019ac:	4b07      	ldr	r3, [pc, #28]	; (80019cc <HAL_TIM_PeriodElapsedCallback+0x78>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	701a      	strb	r2, [r3, #0]
        break;
 80019b2:	e005      	b.n	80019c0 <HAL_TIM_PeriodElapsedCallback+0x6c>
      case CSET:
        break;
	  case CRUN_RES:
		break;
      case CRUN:
        MotorMovePos();
 80019b4:	f000 f8c0 	bl	8001b38 <MotorMovePos>
        break;
 80019b8:	e002      	b.n	80019c0 <HAL_TIM_PeriodElapsedCallback+0x6c>
      case GRMS:
		break;
    }
  }
 80019ba:	bf00      	nop
 80019bc:	e000      	b.n	80019c0 <HAL_TIM_PeriodElapsedCallback+0x6c>
        break;
 80019be:	bf00      	nop
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20000a98 	.word	0x20000a98
 80019cc:	200000a8 	.word	0x200000a8
 80019d0:	20000a64 	.word	0x20000a64

080019d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019d8:	b672      	cpsid	i
}
 80019da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019dc:	e7fe      	b.n	80019dc <Error_Handler+0x8>
	...

080019e0 <MotorSetDir>:
uint32_t g_nCmdPulse;
uint16_t g_nIndex =0 ;

//set motor's direction
void MotorSetDir(int8_t nDir)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	71fb      	strb	r3, [r7, #7]
    switch(nDir)
 80019ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d002      	beq.n	80019f8 <MotorSetDir+0x18>
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d007      	beq.n	8001a06 <MotorSetDir+0x26>
            break;
        case 1:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
            break;
        default:
            break;
 80019f6:	e00d      	b.n	8001a14 <MotorSetDir+0x34>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 80019f8:	2200      	movs	r2, #0
 80019fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019fe:	4807      	ldr	r0, [pc, #28]	; (8001a1c <MotorSetDir+0x3c>)
 8001a00:	f001 f9da 	bl	8002db8 <HAL_GPIO_WritePin>
            break;
 8001a04:	e006      	b.n	8001a14 <MotorSetDir+0x34>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001a06:	2201      	movs	r2, #1
 8001a08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a0c:	4803      	ldr	r0, [pc, #12]	; (8001a1c <MotorSetDir+0x3c>)
 8001a0e:	f001 f9d3 	bl	8002db8 <HAL_GPIO_WritePin>
            break;
 8001a12:	bf00      	nop
    }
}
 8001a14:	bf00      	nop
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40010c00 	.word	0x40010c00

08001a20 <MotorSetDuty>:

//duty cycle of motor
void MotorSetDuty(uint16_t nDuty)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	80fb      	strh	r3, [r7, #6]

    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, nDuty);
 8001a2a:	4b04      	ldr	r3, [pc, #16]	; (8001a3c <MotorSetDuty+0x1c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	88fa      	ldrh	r2, [r7, #6]
 8001a30:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr
 8001a3c:	20000ae0 	.word	0x20000ae0

08001a40 <MotorInit>:

//init params for timer interrupt...
void MotorInit(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start_IT(&htim2);
 8001a44:	480f      	ldr	r0, [pc, #60]	; (8001a84 <MotorInit+0x44>)
 8001a46:	f001 fe39 	bl	80036bc <HAL_TIM_Base_Start_IT>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	480e      	ldr	r0, [pc, #56]	; (8001a88 <MotorInit+0x48>)
 8001a4e:	f001 fed7 	bl	8003800 <HAL_TIM_PWM_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8001a52:	2100      	movs	r1, #0
 8001a54:	480d      	ldr	r0, [pc, #52]	; (8001a8c <MotorInit+0x4c>)
 8001a56:	f002 f817 	bl	8003a88 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 8001a5a:	2104      	movs	r1, #4
 8001a5c:	480b      	ldr	r0, [pc, #44]	; (8001a8c <MotorInit+0x4c>)
 8001a5e:	f002 f813 	bl	8003a88 <HAL_TIM_Encoder_Start>

    PIDReset(&tPIDControl);
 8001a62:	480b      	ldr	r0, [pc, #44]	; (8001a90 <MotorInit+0x50>)
 8001a64:	f000 fa68 	bl	8001f38 <PIDReset>
    PIDInit(&tPIDControl, 1., 0., 0.00);
 8001a68:	f04f 0300 	mov.w	r3, #0
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001a74:	4806      	ldr	r0, [pc, #24]	; (8001a90 <MotorInit+0x50>)
 8001a76:	f000 fa77 	bl	8001f68 <PIDInit>
    MotorSetDir(0);
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	f7ff ffb0 	bl	80019e0 <MotorSetDir>
    //MotorSetDuty(0);
}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20000a98 	.word	0x20000a98
 8001a88:	20000ae0 	.word	0x20000ae0
 8001a8c:	20000b28 	.word	0x20000b28
 8001a90:	200000ac 	.word	0x200000ac

08001a94 <ConvertDegToPulse>:

uint16_t ConvertDegToPulse(uint16_t nDeg)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	80fb      	strh	r3, [r7, #6]
    float dPulse = nDeg * 4 * 330 / 360;
 8001a9e:	88fb      	ldrh	r3, [r7, #6]
 8001aa0:	f44f 62a5 	mov.w	r2, #1320	; 0x528
 8001aa4:	fb02 f303 	mul.w	r3, r2, r3
 8001aa8:	4a0a      	ldr	r2, [pc, #40]	; (8001ad4 <ConvertDegToPulse+0x40>)
 8001aaa:	fb82 1203 	smull	r1, r2, r2, r3
 8001aae:	441a      	add	r2, r3
 8001ab0:	1212      	asrs	r2, r2, #8
 8001ab2:	17db      	asrs	r3, r3, #31
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff f8c0 	bl	8000c3c <__aeabi_i2f>
 8001abc:	4603      	mov	r3, r0
 8001abe:	60fb      	str	r3, [r7, #12]

    return (uint16_t) dPulse;
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	f7ff fafb 	bl	80010bc <__aeabi_f2uiz>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	b29b      	uxth	r3, r3
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	b60b60b7 	.word	0xb60b60b7

08001ad8 <ConvertPulseToDeg>:

uint16_t ConvertPulseToDeg(uint16_t nPulse)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	80fb      	strh	r3, [r7, #6]
    float dDeg = nPulse * 360 / 4 / 330;
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	225a      	movs	r2, #90	; 0x5a
 8001ae6:	fb02 f303 	mul.w	r3, r2, r3
 8001aea:	4a0a      	ldr	r2, [pc, #40]	; (8001b14 <ConvertPulseToDeg+0x3c>)
 8001aec:	fb82 1203 	smull	r1, r2, r2, r3
 8001af0:	11d2      	asrs	r2, r2, #7
 8001af2:	17db      	asrs	r3, r3, #31
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff f8a0 	bl	8000c3c <__aeabi_i2f>
 8001afc:	4603      	mov	r3, r0
 8001afe:	60fb      	str	r3, [r7, #12]
    return (uint16_t) dDeg;
 8001b00:	68f8      	ldr	r0, [r7, #12]
 8001b02:	f7ff fadb 	bl	80010bc <__aeabi_f2uiz>
 8001b06:	4603      	mov	r3, r0
 8001b08:	b29b      	uxth	r3, r3
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	634c0635 	.word	0x634c0635

08001b18 <MotorGetPulse>:


void MotorGetPulse(uint32_t *nPulse)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
    *nPulse = __HAL_TIM_GetCounter(&htim4);
 8001b20:	4b04      	ldr	r3, [pc, #16]	; (8001b34 <MotorGetPulse+0x1c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	601a      	str	r2, [r3, #0]
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr
 8001b34:	20000b28 	.word	0x20000b28

08001b38 <MotorMovePos>:
// move motor
void MotorMovePos()
{
 8001b38:	b590      	push	{r4, r7, lr}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
    uint32_t nPulse;
    MotorGetPulse(&nPulse);
 8001b3e:	463b      	mov	r3, r7
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff ffe9 	bl	8001b18 <MotorGetPulse>
    g_nActPulse = nPulse - 32768;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8001b4c:	4a99      	ldr	r2, [pc, #612]	; (8001db4 <MotorMovePos+0x27c>)
 8001b4e:	6013      	str	r3, [r2, #0]
    float dPosTemp = 0;
 8001b50:	f04f 0300 	mov.w	r3, #0
 8001b54:	607b      	str	r3, [r7, #4]

    //Profile trapezoidal Speed
    if(tProfile.nTime <= tProfile.dMidStep1)
 8001b56:	4b98      	ldr	r3, [pc, #608]	; (8001db8 <MotorMovePos+0x280>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	4a97      	ldr	r2, [pc, #604]	; (8001db8 <MotorMovePos+0x280>)
 8001b5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b5e:	4611      	mov	r1, r2
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fa67 	bl	8001034 <__aeabi_fcmple>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d02c      	beq.n	8001bc6 <MotorMovePos+0x8e>
    {
        dPosTemp = (int32_t)(tProfile.dA1 * tProfile.nTime * tProfile.nTime);
 8001b6c:	4b92      	ldr	r3, [pc, #584]	; (8001db8 <MotorMovePos+0x280>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	4a91      	ldr	r2, [pc, #580]	; (8001db8 <MotorMovePos+0x280>)
 8001b72:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b74:	4611      	mov	r1, r2
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff f8b4 	bl	8000ce4 <__aeabi_fmul>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	461a      	mov	r2, r3
 8001b80:	4b8d      	ldr	r3, [pc, #564]	; (8001db8 <MotorMovePos+0x280>)
 8001b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b84:	4619      	mov	r1, r3
 8001b86:	4610      	mov	r0, r2
 8001b88:	f7ff f8ac 	bl	8000ce4 <__aeabi_fmul>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fa6e 	bl	8001070 <__aeabi_f2iz>
 8001b94:	4603      	mov	r3, r0
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff f850 	bl	8000c3c <__aeabi_i2f>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	607b      	str	r3, [r7, #4]
        g_dCmdVel = 2 * tProfile.dA1 * tProfile.nTime;
 8001ba0:	4b85      	ldr	r3, [pc, #532]	; (8001db8 <MotorMovePos+0x280>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7fe ff94 	bl	8000ad4 <__addsf3>
 8001bac:	4603      	mov	r3, r0
 8001bae:	461a      	mov	r2, r3
 8001bb0:	4b81      	ldr	r3, [pc, #516]	; (8001db8 <MotorMovePos+0x280>)
 8001bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4610      	mov	r0, r2
 8001bb8:	f7ff f894 	bl	8000ce4 <__aeabi_fmul>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	4b7e      	ldr	r3, [pc, #504]	; (8001dbc <MotorMovePos+0x284>)
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	e083      	b.n	8001cce <MotorMovePos+0x196>
    }
    else if(tProfile.nTime <= tProfile.dMidStep2)
 8001bc6:	4b7c      	ldr	r3, [pc, #496]	; (8001db8 <MotorMovePos+0x280>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	4a7b      	ldr	r2, [pc, #492]	; (8001db8 <MotorMovePos+0x280>)
 8001bcc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001bce:	4611      	mov	r1, r2
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fa2f 	bl	8001034 <__aeabi_fcmple>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d01e      	beq.n	8001c1a <MotorMovePos+0xe2>
    {
        dPosTemp = (int32_t)(tProfile.dA2 * tProfile.nTime + tProfile.dB2);
 8001bdc:	4b76      	ldr	r3, [pc, #472]	; (8001db8 <MotorMovePos+0x280>)
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	4a75      	ldr	r2, [pc, #468]	; (8001db8 <MotorMovePos+0x280>)
 8001be2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001be4:	4611      	mov	r1, r2
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff f87c 	bl	8000ce4 <__aeabi_fmul>
 8001bec:	4603      	mov	r3, r0
 8001bee:	461a      	mov	r2, r3
 8001bf0:	4b71      	ldr	r3, [pc, #452]	; (8001db8 <MotorMovePos+0x280>)
 8001bf2:	695b      	ldr	r3, [r3, #20]
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4610      	mov	r0, r2
 8001bf8:	f7fe ff6c 	bl	8000ad4 <__addsf3>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff fa36 	bl	8001070 <__aeabi_f2iz>
 8001c04:	4603      	mov	r3, r0
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff f818 	bl	8000c3c <__aeabi_i2f>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	607b      	str	r3, [r7, #4]
        g_dCmdVel = tProfile.dA2;
 8001c10:	4b69      	ldr	r3, [pc, #420]	; (8001db8 <MotorMovePos+0x280>)
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	4a69      	ldr	r2, [pc, #420]	; (8001dbc <MotorMovePos+0x284>)
 8001c16:	6013      	str	r3, [r2, #0]
 8001c18:	e059      	b.n	8001cce <MotorMovePos+0x196>
    }
    else if(tProfile.nTime <= tProfile.dMidStep3)
 8001c1a:	4b67      	ldr	r3, [pc, #412]	; (8001db8 <MotorMovePos+0x280>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	4a66      	ldr	r2, [pc, #408]	; (8001db8 <MotorMovePos+0x280>)
 8001c20:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001c22:	4611      	mov	r1, r2
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff fa05 	bl	8001034 <__aeabi_fcmple>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d04b      	beq.n	8001cc8 <MotorMovePos+0x190>
    {
        dPosTemp = (int32_t)(tProfile.dA3 * tProfile.nTime * tProfile.nTime + tProfile.dB3 * tProfile.nTime + tProfile.dC3);
 8001c30:	4b61      	ldr	r3, [pc, #388]	; (8001db8 <MotorMovePos+0x280>)
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	4a60      	ldr	r2, [pc, #384]	; (8001db8 <MotorMovePos+0x280>)
 8001c36:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c38:	4611      	mov	r1, r2
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff f852 	bl	8000ce4 <__aeabi_fmul>
 8001c40:	4603      	mov	r3, r0
 8001c42:	461a      	mov	r2, r3
 8001c44:	4b5c      	ldr	r3, [pc, #368]	; (8001db8 <MotorMovePos+0x280>)
 8001c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4610      	mov	r0, r2
 8001c4c:	f7ff f84a 	bl	8000ce4 <__aeabi_fmul>
 8001c50:	4603      	mov	r3, r0
 8001c52:	461c      	mov	r4, r3
 8001c54:	4b58      	ldr	r3, [pc, #352]	; (8001db8 <MotorMovePos+0x280>)
 8001c56:	69db      	ldr	r3, [r3, #28]
 8001c58:	4a57      	ldr	r2, [pc, #348]	; (8001db8 <MotorMovePos+0x280>)
 8001c5a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c5c:	4611      	mov	r1, r2
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff f840 	bl	8000ce4 <__aeabi_fmul>
 8001c64:	4603      	mov	r3, r0
 8001c66:	4619      	mov	r1, r3
 8001c68:	4620      	mov	r0, r4
 8001c6a:	f7fe ff33 	bl	8000ad4 <__addsf3>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	461a      	mov	r2, r3
 8001c72:	4b51      	ldr	r3, [pc, #324]	; (8001db8 <MotorMovePos+0x280>)
 8001c74:	6a1b      	ldr	r3, [r3, #32]
 8001c76:	4619      	mov	r1, r3
 8001c78:	4610      	mov	r0, r2
 8001c7a:	f7fe ff2b 	bl	8000ad4 <__addsf3>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff f9f5 	bl	8001070 <__aeabi_f2iz>
 8001c86:	4603      	mov	r3, r0
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7fe ffd7 	bl	8000c3c <__aeabi_i2f>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	607b      	str	r3, [r7, #4]
        g_dCmdVel = 2*tProfile.dA3 * tProfile.nTime + tProfile.dB3;
 8001c92:	4b49      	ldr	r3, [pc, #292]	; (8001db8 <MotorMovePos+0x280>)
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	4619      	mov	r1, r3
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7fe ff1b 	bl	8000ad4 <__addsf3>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4b45      	ldr	r3, [pc, #276]	; (8001db8 <MotorMovePos+0x280>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4610      	mov	r0, r2
 8001caa:	f7ff f81b 	bl	8000ce4 <__aeabi_fmul>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4b41      	ldr	r3, [pc, #260]	; (8001db8 <MotorMovePos+0x280>)
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4610      	mov	r0, r2
 8001cba:	f7fe ff0b 	bl	8000ad4 <__addsf3>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4b3e      	ldr	r3, [pc, #248]	; (8001dbc <MotorMovePos+0x284>)
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	e002      	b.n	8001cce <MotorMovePos+0x196>
    }
    else
    {
        dPosTemp = tProfile.dPosMax;
 8001cc8:	4b3b      	ldr	r3, [pc, #236]	; (8001db8 <MotorMovePos+0x280>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	607b      	str	r3, [r7, #4]
    }

    //Control PID
    g_nCmdPulse = ConvertDegToPulse(dPosTemp);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff f9f4 	bl	80010bc <__aeabi_f2uiz>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff fedb 	bl	8001a94 <ConvertDegToPulse>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4b37      	ldr	r3, [pc, #220]	; (8001dc0 <MotorMovePos+0x288>)
 8001ce4:	601a      	str	r2, [r3, #0]
    g_nDutyCycle = (int16_t)PIDCompute(&tPIDControl, g_nCmdPulse, g_nActPulse, 0.01f);
 8001ce6:	4b36      	ldr	r3, [pc, #216]	; (8001dc0 <MotorMovePos+0x288>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe ffa2 	bl	8000c34 <__aeabi_ui2f>
 8001cf0:	4604      	mov	r4, r0
 8001cf2:	4b30      	ldr	r3, [pc, #192]	; (8001db4 <MotorMovePos+0x27c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7fe ff9c 	bl	8000c34 <__aeabi_ui2f>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	4b31      	ldr	r3, [pc, #196]	; (8001dc4 <MotorMovePos+0x28c>)
 8001d00:	4621      	mov	r1, r4
 8001d02:	4831      	ldr	r0, [pc, #196]	; (8001dc8 <MotorMovePos+0x290>)
 8001d04:	f000 f94e 	bl	8001fa4 <PIDCompute>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff f9b0 	bl	8001070 <__aeabi_f2iz>
 8001d10:	4603      	mov	r3, r0
 8001d12:	b21b      	sxth	r3, r3
 8001d14:	461a      	mov	r2, r3
 8001d16:	4b2d      	ldr	r3, [pc, #180]	; (8001dcc <MotorMovePos+0x294>)
 8001d18:	601a      	str	r2, [r3, #0]
    if(g_nDutyCycle >= 0)
 8001d1a:	4b2c      	ldr	r3, [pc, #176]	; (8001dcc <MotorMovePos+0x294>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	db0c      	blt.n	8001d3c <MotorMovePos+0x204>
    {
        MotorSetDir(1);
 8001d22:	2001      	movs	r0, #1
 8001d24:	f7ff fe5c 	bl	80019e0 <MotorSetDir>
        MotorSetDuty(abs(g_nDutyCycle));
 8001d28:	4b28      	ldr	r3, [pc, #160]	; (8001dcc <MotorMovePos+0x294>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	bfb8      	it	lt
 8001d30:	425b      	neglt	r3, r3
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff fe73 	bl	8001a20 <MotorSetDuty>
 8001d3a:	e00f      	b.n	8001d5c <MotorMovePos+0x224>
    }
    else if(g_nDutyCycle < 0)
 8001d3c:	4b23      	ldr	r3, [pc, #140]	; (8001dcc <MotorMovePos+0x294>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	da0b      	bge.n	8001d5c <MotorMovePos+0x224>
    {
        MotorSetDir(0);
 8001d44:	2000      	movs	r0, #0
 8001d46:	f7ff fe4b 	bl	80019e0 <MotorSetDir>
        MotorSetDuty(abs(g_nDutyCycle));
 8001d4a:	4b20      	ldr	r3, [pc, #128]	; (8001dcc <MotorMovePos+0x294>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	bfb8      	it	lt
 8001d52:	425b      	neglt	r3, r3
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff fe62 	bl	8001a20 <MotorSetDuty>
    }

    if (tProfile.nTime > tProfile.dMidStep3)
 8001d5c:	4b16      	ldr	r3, [pc, #88]	; (8001db8 <MotorMovePos+0x280>)
 8001d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d60:	4a15      	ldr	r2, [pc, #84]	; (8001db8 <MotorMovePos+0x280>)
 8001d62:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001d64:	4611      	mov	r1, r2
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff f978 	bl	800105c <__aeabi_fcmpgt>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d032      	beq.n	8001dd8 <MotorMovePos+0x2a0>
    {
        __HAL_TIM_SetCounter(&htim4, 32768);
 8001d72:	4b17      	ldr	r3, [pc, #92]	; (8001dd0 <MotorMovePos+0x298>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d7a:	625a      	str	r2, [r3, #36]	; 0x24
        dPosTemp = 0;
 8001d7c:	f04f 0300 	mov.w	r3, #0
 8001d80:	607b      	str	r3, [r7, #4]
        g_nDutyCycle = 0;
 8001d82:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <MotorMovePos+0x294>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
        g_dCmdVel = 0;
 8001d88:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <MotorMovePos+0x284>)
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
        tProfile.nTime = 0;
 8001d90:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <MotorMovePos+0x280>)
 8001d92:	f04f 0200 	mov.w	r2, #0
 8001d96:	631a      	str	r2, [r3, #48]	; 0x30
        tProcess = NONE;
 8001d98:	4b0e      	ldr	r3, [pc, #56]	; (8001dd4 <MotorMovePos+0x29c>)
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	701a      	strb	r2, [r3, #0]
        MotorSetDuty(abs(g_nDutyCycle));
 8001d9e:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <MotorMovePos+0x294>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	bfb8      	it	lt
 8001da6:	425b      	neglt	r3, r3
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff fe38 	bl	8001a20 <MotorSetDuty>
 8001db0:	e02a      	b.n	8001e08 <MotorMovePos+0x2d0>
 8001db2:	bf00      	nop
 8001db4:	20000a5c 	.word	0x20000a5c
 8001db8:	20000a20 	.word	0x20000a20
 8001dbc:	20000a58 	.word	0x20000a58
 8001dc0:	20000a60 	.word	0x20000a60
 8001dc4:	3c23d70a 	.word	0x3c23d70a
 8001dc8:	200000ac 	.word	0x200000ac
 8001dcc:	20000a54 	.word	0x20000a54
 8001dd0:	20000b28 	.word	0x20000b28
 8001dd4:	200000a8 	.word	0x200000a8
    }
    else
    {
        tPIDControl.nActPosSample[g_nIndex] = ConvertPulseToDeg(g_nActPulse);
 8001dd8:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <MotorMovePos+0x308>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	4a19      	ldr	r2, [pc, #100]	; (8001e44 <MotorMovePos+0x30c>)
 8001de0:	8812      	ldrh	r2, [r2, #0]
 8001de2:	4614      	mov	r4, r2
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff fe77 	bl	8001ad8 <ConvertPulseToDeg>
 8001dea:	4603      	mov	r3, r0
 8001dec:	4619      	mov	r1, r3
 8001dee:	4a16      	ldr	r2, [pc, #88]	; (8001e48 <MotorMovePos+0x310>)
 8001df0:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	4413      	add	r3, r2
 8001df8:	460a      	mov	r2, r1
 8001dfa:	809a      	strh	r2, [r3, #4]
        g_nIndex ++;
 8001dfc:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <MotorMovePos+0x30c>)
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	3301      	adds	r3, #1
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <MotorMovePos+0x30c>)
 8001e06:	801a      	strh	r2, [r3, #0]
    }

    tProfile.nTime += 0.01;
 8001e08:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <MotorMovePos+0x314>)
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7fe fb03 	bl	8000418 <__aeabi_f2d>
 8001e12:	a309      	add	r3, pc, #36	; (adr r3, 8001e38 <MotorMovePos+0x300>)
 8001e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e18:	f7fe f9a0 	bl	800015c <__adddf3>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	4610      	mov	r0, r2
 8001e22:	4619      	mov	r1, r3
 8001e24:	f7fe fe00 	bl	8000a28 <__aeabi_d2f>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	4a08      	ldr	r2, [pc, #32]	; (8001e4c <MotorMovePos+0x314>)
 8001e2c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd90      	pop	{r4, r7, pc}
 8001e36:	bf00      	nop
 8001e38:	47ae147b 	.word	0x47ae147b
 8001e3c:	3f847ae1 	.word	0x3f847ae1
 8001e40:	20000a5c 	.word	0x20000a5c
 8001e44:	20000a64 	.word	0x20000a64
 8001e48:	200000ac 	.word	0x200000ac
 8001e4c:	20000a20 	.word	0x20000a20

08001e50 <MotorTuning>:
//Start turning PID and storage data to array nSampleTuningPID
void MotorTuning(uint16_t nPos)
{
 8001e50:	b590      	push	{r4, r7, lr}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	80fb      	strh	r3, [r7, #6]
    uint32_t nPulse;
    MotorGetPulse(&nPulse);
 8001e5a:	f107 030c 	add.w	r3, r7, #12
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff fe5a 	bl	8001b18 <MotorGetPulse>
    g_nActPulse = nPulse - 32768;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8001e6a:	4a2d      	ldr	r2, [pc, #180]	; (8001f20 <MotorTuning+0xd0>)
 8001e6c:	6013      	str	r3, [r2, #0]

    g_nCmdPulse = ConvertDegToPulse(nPos);
 8001e6e:	88fb      	ldrh	r3, [r7, #6]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff fe0f 	bl	8001a94 <ConvertDegToPulse>
 8001e76:	4603      	mov	r3, r0
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4b2a      	ldr	r3, [pc, #168]	; (8001f24 <MotorTuning+0xd4>)
 8001e7c:	601a      	str	r2, [r3, #0]
    g_nDutyCycle = (int16_t)PIDCompute(&tPIDControl, g_nCmdPulse, g_nActPulse, 0.01f);
 8001e7e:	4b29      	ldr	r3, [pc, #164]	; (8001f24 <MotorTuning+0xd4>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7fe fed6 	bl	8000c34 <__aeabi_ui2f>
 8001e88:	4604      	mov	r4, r0
 8001e8a:	4b25      	ldr	r3, [pc, #148]	; (8001f20 <MotorTuning+0xd0>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7fe fed0 	bl	8000c34 <__aeabi_ui2f>
 8001e94:	4602      	mov	r2, r0
 8001e96:	4b24      	ldr	r3, [pc, #144]	; (8001f28 <MotorTuning+0xd8>)
 8001e98:	4621      	mov	r1, r4
 8001e9a:	4824      	ldr	r0, [pc, #144]	; (8001f2c <MotorTuning+0xdc>)
 8001e9c:	f000 f882 	bl	8001fa4 <PIDCompute>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff f8e4 	bl	8001070 <__aeabi_f2iz>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	b21b      	sxth	r3, r3
 8001eac:	461a      	mov	r2, r3
 8001eae:	4b20      	ldr	r3, [pc, #128]	; (8001f30 <MotorTuning+0xe0>)
 8001eb0:	601a      	str	r2, [r3, #0]
    if(g_nDutyCycle >= 0)
 8001eb2:	4b1f      	ldr	r3, [pc, #124]	; (8001f30 <MotorTuning+0xe0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	db0c      	blt.n	8001ed4 <MotorTuning+0x84>
    {
        MotorSetDir(1);
 8001eba:	2001      	movs	r0, #1
 8001ebc:	f7ff fd90 	bl	80019e0 <MotorSetDir>
        MotorSetDuty(abs(g_nDutyCycle));
 8001ec0:	4b1b      	ldr	r3, [pc, #108]	; (8001f30 <MotorTuning+0xe0>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	bfb8      	it	lt
 8001ec8:	425b      	neglt	r3, r3
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff fda7 	bl	8001a20 <MotorSetDuty>
 8001ed2:	e00f      	b.n	8001ef4 <MotorTuning+0xa4>
    }
    else if(g_nDutyCycle < 0)
 8001ed4:	4b16      	ldr	r3, [pc, #88]	; (8001f30 <MotorTuning+0xe0>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	da0b      	bge.n	8001ef4 <MotorTuning+0xa4>
    {
        MotorSetDir(0);
 8001edc:	2000      	movs	r0, #0
 8001ede:	f7ff fd7f 	bl	80019e0 <MotorSetDir>
        MotorSetDuty(abs(g_nDutyCycle));
 8001ee2:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <MotorTuning+0xe0>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	bfb8      	it	lt
 8001eea:	425b      	neglt	r3, r3
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff fd96 	bl	8001a20 <MotorSetDuty>
    }

    //Store Data

    tPIDControl.nSampleTuningPID[g_nIndex] = g_nActPulse;
 8001ef4:	4b0a      	ldr	r3, [pc, #40]	; (8001f20 <MotorTuning+0xd0>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <MotorTuning+0xe4>)
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	b291      	uxth	r1, r2
 8001efe:	4a0b      	ldr	r2, [pc, #44]	; (8001f2c <MotorTuning+0xdc>)
 8001f00:	3308      	adds	r3, #8
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	4413      	add	r3, r2
 8001f06:	460a      	mov	r2, r1
 8001f08:	809a      	strh	r2, [r3, #4]
    g_nIndex++;
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <MotorTuning+0xe4>)
 8001f0c:	881b      	ldrh	r3, [r3, #0]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	4b08      	ldr	r3, [pc, #32]	; (8001f34 <MotorTuning+0xe4>)
 8001f14:	801a      	strh	r2, [r3, #0]
}
 8001f16:	bf00      	nop
 8001f18:	3714      	adds	r7, #20
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd90      	pop	{r4, r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000a5c 	.word	0x20000a5c
 8001f24:	20000a60 	.word	0x20000a60
 8001f28:	3c23d70a 	.word	0x3c23d70a
 8001f2c:	200000ac 	.word	0x200000ac
 8001f30:	20000a54 	.word	0x20000a54
 8001f34:	20000a64 	.word	0x20000a64

08001f38 <PIDReset>:

float g_dPIDError = 0;

//reset PID params
void PIDReset(PID_CONTROL_t *PID_Ctrl)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
    PID_Ctrl->dIntergral = 0.0f;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f04f 0200 	mov.w	r2, #0
 8001f46:	611a      	str	r2, [r3, #16]
    PID_Ctrl->dErrorTerm = 0.0f;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f04f 0200 	mov.w	r2, #0
 8001f4e:	60da      	str	r2, [r3, #12]
    g_dPIDError = 0;
 8001f50:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <PIDReset+0x2c>)
 8001f52:	f04f 0200 	mov.w	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bc80      	pop	{r7}
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	20000a68 	.word	0x20000a68

08001f68 <PIDInit>:

//init PID
void PIDInit(PID_CONTROL_t *PID_Ctrl, float dKp, float dKi, float dKd)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
 8001f74:	603b      	str	r3, [r7, #0]
    PIDReset(PID_Ctrl);
 8001f76:	68f8      	ldr	r0, [r7, #12]
 8001f78:	f7ff ffde 	bl	8001f38 <PIDReset>
    PID_Ctrl->dKp = dKp;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	68ba      	ldr	r2, [r7, #8]
 8001f80:	601a      	str	r2, [r3, #0]
    PID_Ctrl->dKi = dKi;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	605a      	str	r2, [r3, #4]
    PID_Ctrl->dKd = dKd;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	609a      	str	r2, [r3, #8]
    __HAL_TIM_SetCounter(&htim4, 32768);
 8001f8e:	4b04      	ldr	r3, [pc, #16]	; (8001fa0 <PIDInit+0x38>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f96:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001f98:	bf00      	nop
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	20000b28 	.word	0x20000b28

08001fa4 <PIDCompute>:
    PID_Ctrl->dKd = dKd;
}

//Compute PID Controllers
float PIDCompute(PID_CONTROL_t *PID_Ctrl, float dCmdValue, float dActValue, float dTs)
{
 8001fa4:	b590      	push	{r4, r7, lr}
 8001fa6:	b089      	sub	sp, #36	; 0x24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
 8001fb0:	603b      	str	r3, [r7, #0]
    float dPIDResult;
    g_dPIDError = dCmdValue - dActValue;
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	68b8      	ldr	r0, [r7, #8]
 8001fb6:	f7fe fd8b 	bl	8000ad0 <__aeabi_fsub>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	4b30      	ldr	r3, [pc, #192]	; (8002080 <PIDCompute+0xdc>)
 8001fc0:	601a      	str	r2, [r3, #0]
    float dP = 0, dI = 0, dD = 0;
 8001fc2:	f04f 0300 	mov.w	r3, #0
 8001fc6:	61fb      	str	r3, [r7, #28]
 8001fc8:	f04f 0300 	mov.w	r3, #0
 8001fcc:	61bb      	str	r3, [r7, #24]
 8001fce:	f04f 0300 	mov.w	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]

    dP = PID_Ctrl -> dKp *g_dPIDError;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a29      	ldr	r2, [pc, #164]	; (8002080 <PIDCompute+0xdc>)
 8001fda:	6812      	ldr	r2, [r2, #0]
 8001fdc:	4611      	mov	r1, r2
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe fe80 	bl	8000ce4 <__aeabi_fmul>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	61fb      	str	r3, [r7, #28]
    PID_Ctrl -> dIntergral += g_dPIDError;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	4a24      	ldr	r2, [pc, #144]	; (8002080 <PIDCompute+0xdc>)
 8001fee:	6812      	ldr	r2, [r2, #0]
 8001ff0:	4611      	mov	r1, r2
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7fe fd6e 	bl	8000ad4 <__addsf3>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	611a      	str	r2, [r3, #16]
    dI = PID_Ctrl->dKi * dTs/2 * PID_Ctrl->dIntergral;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	6839      	ldr	r1, [r7, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f7fe fe6c 	bl	8000ce4 <__aeabi_fmul>
 800200c:	4603      	mov	r3, r0
 800200e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe ff1a 	bl	8000e4c <__aeabi_fdiv>
 8002018:	4603      	mov	r3, r0
 800201a:	461a      	mov	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	4619      	mov	r1, r3
 8002022:	4610      	mov	r0, r2
 8002024:	f7fe fe5e 	bl	8000ce4 <__aeabi_fmul>
 8002028:	4603      	mov	r3, r0
 800202a:	61bb      	str	r3, [r7, #24]
    dD = PID_Ctrl->dKd * (g_dPIDError - PID_Ctrl->dErrorTerm) /dTs;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	689c      	ldr	r4, [r3, #8]
 8002030:	4b13      	ldr	r3, [pc, #76]	; (8002080 <PIDCompute+0xdc>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	4619      	mov	r1, r3
 800203a:	4610      	mov	r0, r2
 800203c:	f7fe fd48 	bl	8000ad0 <__aeabi_fsub>
 8002040:	4603      	mov	r3, r0
 8002042:	4619      	mov	r1, r3
 8002044:	4620      	mov	r0, r4
 8002046:	f7fe fe4d 	bl	8000ce4 <__aeabi_fmul>
 800204a:	4603      	mov	r3, r0
 800204c:	6839      	ldr	r1, [r7, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f7fe fefc 	bl	8000e4c <__aeabi_fdiv>
 8002054:	4603      	mov	r3, r0
 8002056:	617b      	str	r3, [r7, #20]
    dPIDResult = dP + dI + dD;
 8002058:	69b9      	ldr	r1, [r7, #24]
 800205a:	69f8      	ldr	r0, [r7, #28]
 800205c:	f7fe fd3a 	bl	8000ad4 <__addsf3>
 8002060:	4603      	mov	r3, r0
 8002062:	4619      	mov	r1, r3
 8002064:	6978      	ldr	r0, [r7, #20]
 8002066:	f7fe fd35 	bl	8000ad4 <__addsf3>
 800206a:	4603      	mov	r3, r0
 800206c:	613b      	str	r3, [r7, #16]
    PID_Ctrl->dErrorTerm = g_dPIDError;
 800206e:	4b04      	ldr	r3, [pc, #16]	; (8002080 <PIDCompute+0xdc>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	60da      	str	r2, [r3, #12]

    return dPIDResult;
 8002076:	693b      	ldr	r3, [r7, #16]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3724      	adds	r7, #36	; 0x24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd90      	pop	{r4, r7, pc}
 8002080:	20000a68 	.word	0x20000a68

08002084 <StrCompare>:
}


//Compare 2 string
bool StrCompare(uint8_t *pBuff, uint8_t *pSample, uint8_t nSize)
{
 8002084:	b480      	push	{r7}
 8002086:	b087      	sub	sp, #28
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	4613      	mov	r3, r2
 8002090:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < nSize; i++)
 8002092:	2300      	movs	r3, #0
 8002094:	617b      	str	r3, [r7, #20]
 8002096:	e00e      	b.n	80020b6 <StrCompare+0x32>
    {
        if(pBuff[i] != pSample[i])
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	4413      	add	r3, r2
 800209e:	781a      	ldrb	r2, [r3, #0]
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	68b9      	ldr	r1, [r7, #8]
 80020a4:	440b      	add	r3, r1
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d001      	beq.n	80020b0 <StrCompare+0x2c>
        {
            return false;
 80020ac:	2300      	movs	r3, #0
 80020ae:	e007      	b.n	80020c0 <StrCompare+0x3c>
    for (int i = 0; i < nSize; i++)
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	3301      	adds	r3, #1
 80020b4:	617b      	str	r3, [r7, #20]
 80020b6:	79fb      	ldrb	r3, [r7, #7]
 80020b8:	697a      	ldr	r2, [r7, #20]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	dbec      	blt.n	8002098 <StrCompare+0x14>
        }
    }
    return true;
 80020be:	2301      	movs	r3, #1
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	371c      	adds	r7, #28
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc80      	pop	{r7}
 80020c8:	4770      	bx	lr
	...

080020cc <SerialInit>:


//receive data
void SerialInit(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart1, (uint8_t *)g_nRxBuff, MAX_LEN);
 80020d0:	2212      	movs	r2, #18
 80020d2:	4903      	ldr	r1, [pc, #12]	; (80020e0 <SerialInit+0x14>)
 80020d4:	4803      	ldr	r0, [pc, #12]	; (80020e4 <SerialInit+0x18>)
 80020d6:	f002 fc06 	bl	80048e6 <HAL_UART_Receive_IT>
}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	20000a6c 	.word	0x20000a6c
 80020e4:	20000b70 	.word	0x20000b70

080020e8 <SerialAcceptReceive>:

//receive data
void SerialAcceptReceive(void)
{	HAL_UART_Receive_IT(&huart1, (uint8_t*)g_nRxBuff, MAX_LEN);
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	2212      	movs	r2, #18
 80020ee:	4903      	ldr	r1, [pc, #12]	; (80020fc <SerialAcceptReceive+0x14>)
 80020f0:	4803      	ldr	r0, [pc, #12]	; (8002100 <SerialAcceptReceive+0x18>)
 80020f2:	f002 fbf8 	bl	80048e6 <HAL_UART_Receive_IT>
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000a6c 	.word	0x20000a6c
 8002100:	20000b70 	.word	0x20000b70

08002104 <SerialWriteComm>:

//send data to GUI
void SerialWriteComm(uint8_t *pStrCmd, uint8_t *pOpt, uint8_t *pData)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
    uint8_t *pBuff;
    pBuff = (uint8_t *)malloc(18);
 8002110:	2012      	movs	r0, #18
 8002112:	f002 fd53 	bl	8004bbc <malloc>
 8002116:	4603      	mov	r3, r0
 8002118:	617b      	str	r3, [r7, #20]
    uint8_t nIndex = 0;
 800211a:	2300      	movs	r3, #0
 800211c:	74fb      	strb	r3, [r7, #19]

    memcpy(pBuff + nIndex, STX, 1);
 800211e:	7cfb      	ldrb	r3, [r7, #19]
 8002120:	697a      	ldr	r2, [r7, #20]
 8002122:	4413      	add	r3, r2
 8002124:	4a20      	ldr	r2, [pc, #128]	; (80021a8 <SerialWriteComm+0xa4>)
 8002126:	7812      	ldrb	r2, [r2, #0]
 8002128:	701a      	strb	r2, [r3, #0]
    nIndex += 1;
 800212a:	7cfb      	ldrb	r3, [r7, #19]
 800212c:	3301      	adds	r3, #1
 800212e:	74fb      	strb	r3, [r7, #19]
    memcpy(pBuff + nIndex, pStrCmd, 4);
 8002130:	7cfb      	ldrb	r3, [r7, #19]
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	4413      	add	r3, r2
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	6812      	ldr	r2, [r2, #0]
 800213a:	601a      	str	r2, [r3, #0]
    nIndex += 4;
 800213c:	7cfb      	ldrb	r3, [r7, #19]
 800213e:	3304      	adds	r3, #4
 8002140:	74fb      	strb	r3, [r7, #19]
    memcpy(pBuff + nIndex, pOpt, 3);
 8002142:	7cfb      	ldrb	r3, [r7, #19]
 8002144:	697a      	ldr	r2, [r7, #20]
 8002146:	4413      	add	r3, r2
 8002148:	2203      	movs	r2, #3
 800214a:	68b9      	ldr	r1, [r7, #8]
 800214c:	4618      	mov	r0, r3
 800214e:	f002 fd45 	bl	8004bdc <memcpy>
    nIndex += 3;
 8002152:	7cfb      	ldrb	r3, [r7, #19]
 8002154:	3303      	adds	r3, #3
 8002156:	74fb      	strb	r3, [r7, #19]
    memcpy(pBuff + nIndex, pData, 8);
 8002158:	7cfb      	ldrb	r3, [r7, #19]
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	4413      	add	r3, r2
 800215e:	2208      	movs	r2, #8
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	4618      	mov	r0, r3
 8002164:	f002 fd3a 	bl	8004bdc <memcpy>
    nIndex += 8;
 8002168:	7cfb      	ldrb	r3, [r7, #19]
 800216a:	3308      	adds	r3, #8
 800216c:	74fb      	strb	r3, [r7, #19]
    memcpy(pBuff + nIndex, ACK, 1);
 800216e:	7cfb      	ldrb	r3, [r7, #19]
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	4413      	add	r3, r2
 8002174:	4a0d      	ldr	r2, [pc, #52]	; (80021ac <SerialWriteComm+0xa8>)
 8002176:	7812      	ldrb	r2, [r2, #0]
 8002178:	701a      	strb	r2, [r3, #0]
    nIndex += 1;
 800217a:	7cfb      	ldrb	r3, [r7, #19]
 800217c:	3301      	adds	r3, #1
 800217e:	74fb      	strb	r3, [r7, #19]
    memcpy(pBuff + nIndex, ETX, 1);
 8002180:	7cfb      	ldrb	r3, [r7, #19]
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	4413      	add	r3, r2
 8002186:	4a0a      	ldr	r2, [pc, #40]	; (80021b0 <SerialWriteComm+0xac>)
 8002188:	7812      	ldrb	r2, [r2, #0]
 800218a:	701a      	strb	r2, [r3, #0]

    HAL_UART_Transmit(&huart1, pBuff, MAX_LEN, 1000);
 800218c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002190:	2212      	movs	r2, #18
 8002192:	6979      	ldr	r1, [r7, #20]
 8002194:	4807      	ldr	r0, [pc, #28]	; (80021b4 <SerialWriteComm+0xb0>)
 8002196:	f002 fb14 	bl	80047c2 <HAL_UART_Transmit>

    free(pBuff);
 800219a:	6978      	ldr	r0, [r7, #20]
 800219c:	f002 fd16 	bl	8004bcc <free>

}
 80021a0:	bf00      	nop
 80021a2:	3718      	adds	r7, #24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	20000000 	.word	0x20000000
 80021ac:	20000008 	.word	0x20000008
 80021b0:	20000004 	.word	0x20000004
 80021b4:	20000b70 	.word	0x20000b70

080021b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80021be:	4b15      	ldr	r3, [pc, #84]	; (8002214 <HAL_MspInit+0x5c>)
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	4a14      	ldr	r2, [pc, #80]	; (8002214 <HAL_MspInit+0x5c>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	6193      	str	r3, [r2, #24]
 80021ca:	4b12      	ldr	r3, [pc, #72]	; (8002214 <HAL_MspInit+0x5c>)
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	60bb      	str	r3, [r7, #8]
 80021d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021d6:	4b0f      	ldr	r3, [pc, #60]	; (8002214 <HAL_MspInit+0x5c>)
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	4a0e      	ldr	r2, [pc, #56]	; (8002214 <HAL_MspInit+0x5c>)
 80021dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e0:	61d3      	str	r3, [r2, #28]
 80021e2:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <HAL_MspInit+0x5c>)
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ea:	607b      	str	r3, [r7, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80021ee:	4b0a      	ldr	r3, [pc, #40]	; (8002218 <HAL_MspInit+0x60>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	4a04      	ldr	r2, [pc, #16]	; (8002218 <HAL_MspInit+0x60>)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800220a:	bf00      	nop
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr
 8002214:	40021000 	.word	0x40021000
 8002218:	40010000 	.word	0x40010000

0800221c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002220:	e7fe      	b.n	8002220 <NMI_Handler+0x4>

08002222 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002222:	b480      	push	{r7}
 8002224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002226:	e7fe      	b.n	8002226 <HardFault_Handler+0x4>

08002228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800222c:	e7fe      	b.n	800222c <MemManage_Handler+0x4>

0800222e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800222e:	b480      	push	{r7}
 8002230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002232:	e7fe      	b.n	8002232 <BusFault_Handler+0x4>

08002234 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002238:	e7fe      	b.n	8002238 <UsageFault_Handler+0x4>

0800223a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800223a:	b480      	push	{r7}
 800223c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	46bd      	mov	sp, r7
 8002242:	bc80      	pop	{r7}
 8002244:	4770      	bx	lr

08002246 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002246:	b480      	push	{r7}
 8002248:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr

08002252 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002252:	b480      	push	{r7}
 8002254:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	46bd      	mov	sp, r7
 800225a:	bc80      	pop	{r7}
 800225c:	4770      	bx	lr

0800225e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002262:	f000 fad7 	bl	8002814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002270:	4802      	ldr	r0, [pc, #8]	; (800227c <TIM2_IRQHandler+0x10>)
 8002272:	f001 fc97 	bl	8003ba4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	20000a98 	.word	0x20000a98

08002280 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002288:	4a14      	ldr	r2, [pc, #80]	; (80022dc <_sbrk+0x5c>)
 800228a:	4b15      	ldr	r3, [pc, #84]	; (80022e0 <_sbrk+0x60>)
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002294:	4b13      	ldr	r3, [pc, #76]	; (80022e4 <_sbrk+0x64>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d102      	bne.n	80022a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800229c:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <_sbrk+0x64>)
 800229e:	4a12      	ldr	r2, [pc, #72]	; (80022e8 <_sbrk+0x68>)
 80022a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022a2:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <_sbrk+0x64>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4413      	add	r3, r2
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d207      	bcs.n	80022c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022b0:	f002 fc5a 	bl	8004b68 <__errno>
 80022b4:	4603      	mov	r3, r0
 80022b6:	220c      	movs	r2, #12
 80022b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022ba:	f04f 33ff 	mov.w	r3, #4294967295
 80022be:	e009      	b.n	80022d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022c0:	4b08      	ldr	r3, [pc, #32]	; (80022e4 <_sbrk+0x64>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022c6:	4b07      	ldr	r3, [pc, #28]	; (80022e4 <_sbrk+0x64>)
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4413      	add	r3, r2
 80022ce:	4a05      	ldr	r2, [pc, #20]	; (80022e4 <_sbrk+0x64>)
 80022d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022d2:	68fb      	ldr	r3, [r7, #12]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3718      	adds	r7, #24
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	20005000 	.word	0x20005000
 80022e0:	00000400 	.word	0x00000400
 80022e4:	20000a94 	.word	0x20000a94
 80022e8:	20000bc8 	.word	0x20000bc8

080022ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022f0:	bf00      	nop
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr

080022f8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022fe:	f107 0308 	add.w	r3, r7, #8
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	605a      	str	r2, [r3, #4]
 8002308:	609a      	str	r2, [r3, #8]
 800230a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800230c:	463b      	mov	r3, r7
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002314:	4b1d      	ldr	r3, [pc, #116]	; (800238c <MX_TIM2_Init+0x94>)
 8002316:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800231a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 800231c:	4b1b      	ldr	r3, [pc, #108]	; (800238c <MX_TIM2_Init+0x94>)
 800231e:	2263      	movs	r2, #99	; 0x63
 8002320:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002322:	4b1a      	ldr	r3, [pc, #104]	; (800238c <MX_TIM2_Init+0x94>)
 8002324:	2200      	movs	r2, #0
 8002326:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3599;
 8002328:	4b18      	ldr	r3, [pc, #96]	; (800238c <MX_TIM2_Init+0x94>)
 800232a:	f640 620f 	movw	r2, #3599	; 0xe0f
 800232e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002330:	4b16      	ldr	r3, [pc, #88]	; (800238c <MX_TIM2_Init+0x94>)
 8002332:	2200      	movs	r2, #0
 8002334:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002336:	4b15      	ldr	r3, [pc, #84]	; (800238c <MX_TIM2_Init+0x94>)
 8002338:	2200      	movs	r2, #0
 800233a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800233c:	4813      	ldr	r0, [pc, #76]	; (800238c <MX_TIM2_Init+0x94>)
 800233e:	f001 f96d 	bl	800361c <HAL_TIM_Base_Init>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002348:	f7ff fb44 	bl	80019d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800234c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002350:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002352:	f107 0308 	add.w	r3, r7, #8
 8002356:	4619      	mov	r1, r3
 8002358:	480c      	ldr	r0, [pc, #48]	; (800238c <MX_TIM2_Init+0x94>)
 800235a:	f001 fde9 	bl	8003f30 <HAL_TIM_ConfigClockSource>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002364:	f7ff fb36 	bl	80019d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002368:	2300      	movs	r3, #0
 800236a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800236c:	2300      	movs	r3, #0
 800236e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002370:	463b      	mov	r3, r7
 8002372:	4619      	mov	r1, r3
 8002374:	4805      	ldr	r0, [pc, #20]	; (800238c <MX_TIM2_Init+0x94>)
 8002376:	f002 f967 	bl	8004648 <HAL_TIMEx_MasterConfigSynchronization>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002380:	f7ff fb28 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002384:	bf00      	nop
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	20000a98 	.word	0x20000a98

08002390 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b08a      	sub	sp, #40	; 0x28
 8002394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002396:	f107 0320 	add.w	r3, r7, #32
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023a0:	1d3b      	adds	r3, r7, #4
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	605a      	str	r2, [r3, #4]
 80023a8:	609a      	str	r2, [r3, #8]
 80023aa:	60da      	str	r2, [r3, #12]
 80023ac:	611a      	str	r2, [r3, #16]
 80023ae:	615a      	str	r2, [r3, #20]
 80023b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80023b2:	4b22      	ldr	r3, [pc, #136]	; (800243c <MX_TIM3_Init+0xac>)
 80023b4:	4a22      	ldr	r2, [pc, #136]	; (8002440 <MX_TIM3_Init+0xb0>)
 80023b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 80023b8:	4b20      	ldr	r3, [pc, #128]	; (800243c <MX_TIM3_Init+0xac>)
 80023ba:	2209      	movs	r2, #9
 80023bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 80023be:	4b1f      	ldr	r3, [pc, #124]	; (800243c <MX_TIM3_Init+0xac>)
 80023c0:	2260      	movs	r2, #96	; 0x60
 80023c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7199;
 80023c4:	4b1d      	ldr	r3, [pc, #116]	; (800243c <MX_TIM3_Init+0xac>)
 80023c6:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80023ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023cc:	4b1b      	ldr	r3, [pc, #108]	; (800243c <MX_TIM3_Init+0xac>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023d2:	4b1a      	ldr	r3, [pc, #104]	; (800243c <MX_TIM3_Init+0xac>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80023d8:	4818      	ldr	r0, [pc, #96]	; (800243c <MX_TIM3_Init+0xac>)
 80023da:	f001 f9c1 	bl	8003760 <HAL_TIM_PWM_Init>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80023e4:	f7ff faf6 	bl	80019d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023e8:	2300      	movs	r3, #0
 80023ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ec:	2300      	movs	r3, #0
 80023ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023f0:	f107 0320 	add.w	r3, r7, #32
 80023f4:	4619      	mov	r1, r3
 80023f6:	4811      	ldr	r0, [pc, #68]	; (800243c <MX_TIM3_Init+0xac>)
 80023f8:	f002 f926 	bl	8004648 <HAL_TIMEx_MasterConfigSynchronization>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002402:	f7ff fae7 	bl	80019d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002406:	2360      	movs	r3, #96	; 0x60
 8002408:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800240a:	2300      	movs	r3, #0
 800240c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800240e:	2300      	movs	r3, #0
 8002410:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002412:	2300      	movs	r3, #0
 8002414:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002416:	1d3b      	adds	r3, r7, #4
 8002418:	2200      	movs	r2, #0
 800241a:	4619      	mov	r1, r3
 800241c:	4807      	ldr	r0, [pc, #28]	; (800243c <MX_TIM3_Init+0xac>)
 800241e:	f001 fcc9 	bl	8003db4 <HAL_TIM_PWM_ConfigChannel>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002428:	f7ff fad4 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800242c:	4803      	ldr	r0, [pc, #12]	; (800243c <MX_TIM3_Init+0xac>)
 800242e:	f000 f8dd 	bl	80025ec <HAL_TIM_MspPostInit>

}
 8002432:	bf00      	nop
 8002434:	3728      	adds	r7, #40	; 0x28
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	20000ae0 	.word	0x20000ae0
 8002440:	40000400 	.word	0x40000400

08002444 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08c      	sub	sp, #48	; 0x30
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800244a:	f107 030c 	add.w	r3, r7, #12
 800244e:	2224      	movs	r2, #36	; 0x24
 8002450:	2100      	movs	r1, #0
 8002452:	4618      	mov	r0, r3
 8002454:	f002 fbd0 	bl	8004bf8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002458:	1d3b      	adds	r3, r7, #4
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002460:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <MX_TIM4_Init+0xa0>)
 8002462:	4a21      	ldr	r2, [pc, #132]	; (80024e8 <MX_TIM4_Init+0xa4>)
 8002464:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002466:	4b1f      	ldr	r3, [pc, #124]	; (80024e4 <MX_TIM4_Init+0xa0>)
 8002468:	2200      	movs	r2, #0
 800246a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800246c:	4b1d      	ldr	r3, [pc, #116]	; (80024e4 <MX_TIM4_Init+0xa0>)
 800246e:	2200      	movs	r2, #0
 8002470:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002472:	4b1c      	ldr	r3, [pc, #112]	; (80024e4 <MX_TIM4_Init+0xa0>)
 8002474:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002478:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800247a:	4b1a      	ldr	r3, [pc, #104]	; (80024e4 <MX_TIM4_Init+0xa0>)
 800247c:	2200      	movs	r2, #0
 800247e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002480:	4b18      	ldr	r3, [pc, #96]	; (80024e4 <MX_TIM4_Init+0xa0>)
 8002482:	2200      	movs	r2, #0
 8002484:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002486:	2303      	movs	r3, #3
 8002488:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800248a:	2300      	movs	r3, #0
 800248c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800248e:	2301      	movs	r3, #1
 8002490:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002492:	2300      	movs	r3, #0
 8002494:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800249a:	2300      	movs	r3, #0
 800249c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800249e:	2301      	movs	r3, #1
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80024a2:	2300      	movs	r3, #0
 80024a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80024aa:	f107 030c 	add.w	r3, r7, #12
 80024ae:	4619      	mov	r1, r3
 80024b0:	480c      	ldr	r0, [pc, #48]	; (80024e4 <MX_TIM4_Init+0xa0>)
 80024b2:	f001 fa47 	bl	8003944 <HAL_TIM_Encoder_Init>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80024bc:	f7ff fa8a 	bl	80019d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024c0:	2300      	movs	r3, #0
 80024c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024c4:	2300      	movs	r3, #0
 80024c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80024c8:	1d3b      	adds	r3, r7, #4
 80024ca:	4619      	mov	r1, r3
 80024cc:	4805      	ldr	r0, [pc, #20]	; (80024e4 <MX_TIM4_Init+0xa0>)
 80024ce:	f002 f8bb 	bl	8004648 <HAL_TIMEx_MasterConfigSynchronization>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80024d8:	f7ff fa7c 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80024dc:	bf00      	nop
 80024de:	3730      	adds	r7, #48	; 0x30
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	20000b28 	.word	0x20000b28
 80024e8:	40000800 	.word	0x40000800

080024ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024fc:	d113      	bne.n	8002526 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024fe:	4b0c      	ldr	r3, [pc, #48]	; (8002530 <HAL_TIM_Base_MspInit+0x44>)
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	4a0b      	ldr	r2, [pc, #44]	; (8002530 <HAL_TIM_Base_MspInit+0x44>)
 8002504:	f043 0301 	orr.w	r3, r3, #1
 8002508:	61d3      	str	r3, [r2, #28]
 800250a:	4b09      	ldr	r3, [pc, #36]	; (8002530 <HAL_TIM_Base_MspInit+0x44>)
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002516:	2200      	movs	r2, #0
 8002518:	2100      	movs	r1, #0
 800251a:	201c      	movs	r0, #28
 800251c:	f000 fa91 	bl	8002a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002520:	201c      	movs	r0, #28
 8002522:	f000 faaa 	bl	8002a7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002526:	bf00      	nop
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40021000 	.word	0x40021000

08002534 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a09      	ldr	r2, [pc, #36]	; (8002568 <HAL_TIM_PWM_MspInit+0x34>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d10b      	bne.n	800255e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002546:	4b09      	ldr	r3, [pc, #36]	; (800256c <HAL_TIM_PWM_MspInit+0x38>)
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	4a08      	ldr	r2, [pc, #32]	; (800256c <HAL_TIM_PWM_MspInit+0x38>)
 800254c:	f043 0302 	orr.w	r3, r3, #2
 8002550:	61d3      	str	r3, [r2, #28]
 8002552:	4b06      	ldr	r3, [pc, #24]	; (800256c <HAL_TIM_PWM_MspInit+0x38>)
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800255e:	bf00      	nop
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	bc80      	pop	{r7}
 8002566:	4770      	bx	lr
 8002568:	40000400 	.word	0x40000400
 800256c:	40021000 	.word	0x40021000

08002570 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b088      	sub	sp, #32
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002578:	f107 0310 	add.w	r3, r7, #16
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	605a      	str	r2, [r3, #4]
 8002582:	609a      	str	r2, [r3, #8]
 8002584:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM4)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a15      	ldr	r2, [pc, #84]	; (80025e0 <HAL_TIM_Encoder_MspInit+0x70>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d123      	bne.n	80025d8 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002590:	4b14      	ldr	r3, [pc, #80]	; (80025e4 <HAL_TIM_Encoder_MspInit+0x74>)
 8002592:	69db      	ldr	r3, [r3, #28]
 8002594:	4a13      	ldr	r2, [pc, #76]	; (80025e4 <HAL_TIM_Encoder_MspInit+0x74>)
 8002596:	f043 0304 	orr.w	r3, r3, #4
 800259a:	61d3      	str	r3, [r2, #28]
 800259c:	4b11      	ldr	r3, [pc, #68]	; (80025e4 <HAL_TIM_Encoder_MspInit+0x74>)
 800259e:	69db      	ldr	r3, [r3, #28]
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a8:	4b0e      	ldr	r3, [pc, #56]	; (80025e4 <HAL_TIM_Encoder_MspInit+0x74>)
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	4a0d      	ldr	r2, [pc, #52]	; (80025e4 <HAL_TIM_Encoder_MspInit+0x74>)
 80025ae:	f043 0308 	orr.w	r3, r3, #8
 80025b2:	6193      	str	r3, [r2, #24]
 80025b4:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <HAL_TIM_Encoder_MspInit+0x74>)
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	f003 0308 	and.w	r3, r3, #8
 80025bc:	60bb      	str	r3, [r7, #8]
 80025be:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025c0:	23c0      	movs	r3, #192	; 0xc0
 80025c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025c4:	2300      	movs	r3, #0
 80025c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c8:	2300      	movs	r3, #0
 80025ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025cc:	f107 0310 	add.w	r3, r7, #16
 80025d0:	4619      	mov	r1, r3
 80025d2:	4805      	ldr	r0, [pc, #20]	; (80025e8 <HAL_TIM_Encoder_MspInit+0x78>)
 80025d4:	f000 fa6c 	bl	8002ab0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80025d8:	bf00      	nop
 80025da:	3720      	adds	r7, #32
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40000800 	.word	0x40000800
 80025e4:	40021000 	.word	0x40021000
 80025e8:	40010c00 	.word	0x40010c00

080025ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b088      	sub	sp, #32
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f4:	f107 0310 	add.w	r3, r7, #16
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	605a      	str	r2, [r3, #4]
 80025fe:	609a      	str	r2, [r3, #8]
 8002600:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a0f      	ldr	r2, [pc, #60]	; (8002644 <HAL_TIM_MspPostInit+0x58>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d117      	bne.n	800263c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800260c:	4b0e      	ldr	r3, [pc, #56]	; (8002648 <HAL_TIM_MspPostInit+0x5c>)
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	4a0d      	ldr	r2, [pc, #52]	; (8002648 <HAL_TIM_MspPostInit+0x5c>)
 8002612:	f043 0304 	orr.w	r3, r3, #4
 8002616:	6193      	str	r3, [r2, #24]
 8002618:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <HAL_TIM_MspPostInit+0x5c>)
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002624:	2340      	movs	r3, #64	; 0x40
 8002626:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002628:	2302      	movs	r3, #2
 800262a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800262c:	2302      	movs	r3, #2
 800262e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002630:	f107 0310 	add.w	r3, r7, #16
 8002634:	4619      	mov	r1, r3
 8002636:	4805      	ldr	r0, [pc, #20]	; (800264c <HAL_TIM_MspPostInit+0x60>)
 8002638:	f000 fa3a 	bl	8002ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800263c:	bf00      	nop
 800263e:	3720      	adds	r7, #32
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40000400 	.word	0x40000400
 8002648:	40021000 	.word	0x40021000
 800264c:	40010800 	.word	0x40010800

08002650 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002654:	4b11      	ldr	r3, [pc, #68]	; (800269c <MX_USART1_UART_Init+0x4c>)
 8002656:	4a12      	ldr	r2, [pc, #72]	; (80026a0 <MX_USART1_UART_Init+0x50>)
 8002658:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800265a:	4b10      	ldr	r3, [pc, #64]	; (800269c <MX_USART1_UART_Init+0x4c>)
 800265c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002660:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002662:	4b0e      	ldr	r3, [pc, #56]	; (800269c <MX_USART1_UART_Init+0x4c>)
 8002664:	2200      	movs	r2, #0
 8002666:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002668:	4b0c      	ldr	r3, [pc, #48]	; (800269c <MX_USART1_UART_Init+0x4c>)
 800266a:	2200      	movs	r2, #0
 800266c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800266e:	4b0b      	ldr	r3, [pc, #44]	; (800269c <MX_USART1_UART_Init+0x4c>)
 8002670:	2200      	movs	r2, #0
 8002672:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002674:	4b09      	ldr	r3, [pc, #36]	; (800269c <MX_USART1_UART_Init+0x4c>)
 8002676:	220c      	movs	r2, #12
 8002678:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800267a:	4b08      	ldr	r3, [pc, #32]	; (800269c <MX_USART1_UART_Init+0x4c>)
 800267c:	2200      	movs	r2, #0
 800267e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002680:	4b06      	ldr	r3, [pc, #24]	; (800269c <MX_USART1_UART_Init+0x4c>)
 8002682:	2200      	movs	r2, #0
 8002684:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002686:	4805      	ldr	r0, [pc, #20]	; (800269c <MX_USART1_UART_Init+0x4c>)
 8002688:	f002 f84e 	bl	8004728 <HAL_UART_Init>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002692:	f7ff f99f 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002696:	bf00      	nop
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20000b70 	.word	0x20000b70
 80026a0:	40013800 	.word	0x40013800

080026a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b088      	sub	sp, #32
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ac:	f107 0310 	add.w	r3, r7, #16
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	605a      	str	r2, [r3, #4]
 80026b6:	609a      	str	r2, [r3, #8]
 80026b8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a1c      	ldr	r2, [pc, #112]	; (8002730 <HAL_UART_MspInit+0x8c>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d131      	bne.n	8002728 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026c4:	4b1b      	ldr	r3, [pc, #108]	; (8002734 <HAL_UART_MspInit+0x90>)
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	4a1a      	ldr	r2, [pc, #104]	; (8002734 <HAL_UART_MspInit+0x90>)
 80026ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026ce:	6193      	str	r3, [r2, #24]
 80026d0:	4b18      	ldr	r3, [pc, #96]	; (8002734 <HAL_UART_MspInit+0x90>)
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026dc:	4b15      	ldr	r3, [pc, #84]	; (8002734 <HAL_UART_MspInit+0x90>)
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	4a14      	ldr	r2, [pc, #80]	; (8002734 <HAL_UART_MspInit+0x90>)
 80026e2:	f043 0304 	orr.w	r3, r3, #4
 80026e6:	6193      	str	r3, [r2, #24]
 80026e8:	4b12      	ldr	r3, [pc, #72]	; (8002734 <HAL_UART_MspInit+0x90>)
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80026f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fa:	2302      	movs	r3, #2
 80026fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026fe:	2303      	movs	r3, #3
 8002700:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002702:	f107 0310 	add.w	r3, r7, #16
 8002706:	4619      	mov	r1, r3
 8002708:	480b      	ldr	r0, [pc, #44]	; (8002738 <HAL_UART_MspInit+0x94>)
 800270a:	f000 f9d1 	bl	8002ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800270e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002712:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002718:	2300      	movs	r3, #0
 800271a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800271c:	f107 0310 	add.w	r3, r7, #16
 8002720:	4619      	mov	r1, r3
 8002722:	4805      	ldr	r0, [pc, #20]	; (8002738 <HAL_UART_MspInit+0x94>)
 8002724:	f000 f9c4 	bl	8002ab0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002728:	bf00      	nop
 800272a:	3720      	adds	r7, #32
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40013800 	.word	0x40013800
 8002734:	40021000 	.word	0x40021000
 8002738:	40010800 	.word	0x40010800

0800273c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800273c:	480c      	ldr	r0, [pc, #48]	; (8002770 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800273e:	490d      	ldr	r1, [pc, #52]	; (8002774 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002740:	4a0d      	ldr	r2, [pc, #52]	; (8002778 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002744:	e002      	b.n	800274c <LoopCopyDataInit>

08002746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800274a:	3304      	adds	r3, #4

0800274c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800274c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800274e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002750:	d3f9      	bcc.n	8002746 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002752:	4a0a      	ldr	r2, [pc, #40]	; (800277c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002754:	4c0a      	ldr	r4, [pc, #40]	; (8002780 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002758:	e001      	b.n	800275e <LoopFillZerobss>

0800275a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800275a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800275c:	3204      	adds	r2, #4

0800275e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800275e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002760:	d3fb      	bcc.n	800275a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002762:	f7ff fdc3 	bl	80022ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002766:	f002 fa05 	bl	8004b74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800276a:	f7fe fd13 	bl	8001194 <main>
  bx lr
 800276e:	4770      	bx	lr
  ldr r0, =_sdata
 8002770:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002774:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002778:	08006388 	.word	0x08006388
  ldr r2, =_sbss
 800277c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002780:	20000bc8 	.word	0x20000bc8

08002784 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002784:	e7fe      	b.n	8002784 <ADC1_2_IRQHandler>
	...

08002788 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800278c:	4b08      	ldr	r3, [pc, #32]	; (80027b0 <HAL_Init+0x28>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a07      	ldr	r2, [pc, #28]	; (80027b0 <HAL_Init+0x28>)
 8002792:	f043 0310 	orr.w	r3, r3, #16
 8002796:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002798:	2003      	movs	r0, #3
 800279a:	f000 f947 	bl	8002a2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800279e:	200f      	movs	r0, #15
 80027a0:	f000 f808 	bl	80027b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027a4:	f7ff fd08 	bl	80021b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40022000 	.word	0x40022000

080027b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027bc:	4b12      	ldr	r3, [pc, #72]	; (8002808 <HAL_InitTick+0x54>)
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	4b12      	ldr	r3, [pc, #72]	; (800280c <HAL_InitTick+0x58>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	4619      	mov	r1, r3
 80027c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80027ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d2:	4618      	mov	r0, r3
 80027d4:	f000 f95f 	bl	8002a96 <HAL_SYSTICK_Config>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e00e      	b.n	8002800 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b0f      	cmp	r3, #15
 80027e6:	d80a      	bhi.n	80027fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027e8:	2200      	movs	r2, #0
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	f04f 30ff 	mov.w	r0, #4294967295
 80027f0:	f000 f927 	bl	8002a42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027f4:	4a06      	ldr	r2, [pc, #24]	; (8002810 <HAL_InitTick+0x5c>)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
 80027fc:	e000      	b.n	8002800 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
}
 8002800:	4618      	mov	r0, r3
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	2000000c 	.word	0x2000000c
 800280c:	20000014 	.word	0x20000014
 8002810:	20000010 	.word	0x20000010

08002814 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002818:	4b05      	ldr	r3, [pc, #20]	; (8002830 <HAL_IncTick+0x1c>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	461a      	mov	r2, r3
 800281e:	4b05      	ldr	r3, [pc, #20]	; (8002834 <HAL_IncTick+0x20>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4413      	add	r3, r2
 8002824:	4a03      	ldr	r2, [pc, #12]	; (8002834 <HAL_IncTick+0x20>)
 8002826:	6013      	str	r3, [r2, #0]
}
 8002828:	bf00      	nop
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr
 8002830:	20000014 	.word	0x20000014
 8002834:	20000bb4 	.word	0x20000bb4

08002838 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  return uwTick;
 800283c:	4b02      	ldr	r3, [pc, #8]	; (8002848 <HAL_GetTick+0x10>)
 800283e:	681b      	ldr	r3, [r3, #0]
}
 8002840:	4618      	mov	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr
 8002848:	20000bb4 	.word	0x20000bb4

0800284c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002854:	f7ff fff0 	bl	8002838 <HAL_GetTick>
 8002858:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002864:	d005      	beq.n	8002872 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002866:	4b0a      	ldr	r3, [pc, #40]	; (8002890 <HAL_Delay+0x44>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	461a      	mov	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	4413      	add	r3, r2
 8002870:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002872:	bf00      	nop
 8002874:	f7ff ffe0 	bl	8002838 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	429a      	cmp	r2, r3
 8002882:	d8f7      	bhi.n	8002874 <HAL_Delay+0x28>
  {
  }
}
 8002884:	bf00      	nop
 8002886:	bf00      	nop
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20000014 	.word	0x20000014

08002894 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028a4:	4b0c      	ldr	r3, [pc, #48]	; (80028d8 <__NVIC_SetPriorityGrouping+0x44>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028b0:	4013      	ands	r3, r2
 80028b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028c6:	4a04      	ldr	r2, [pc, #16]	; (80028d8 <__NVIC_SetPriorityGrouping+0x44>)
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	60d3      	str	r3, [r2, #12]
}
 80028cc:	bf00      	nop
 80028ce:	3714      	adds	r7, #20
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bc80      	pop	{r7}
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	e000ed00 	.word	0xe000ed00

080028dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028e0:	4b04      	ldr	r3, [pc, #16]	; (80028f4 <__NVIC_GetPriorityGrouping+0x18>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	0a1b      	lsrs	r3, r3, #8
 80028e6:	f003 0307 	and.w	r3, r3, #7
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	e000ed00 	.word	0xe000ed00

080028f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	4603      	mov	r3, r0
 8002900:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002906:	2b00      	cmp	r3, #0
 8002908:	db0b      	blt.n	8002922 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800290a:	79fb      	ldrb	r3, [r7, #7]
 800290c:	f003 021f 	and.w	r2, r3, #31
 8002910:	4906      	ldr	r1, [pc, #24]	; (800292c <__NVIC_EnableIRQ+0x34>)
 8002912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002916:	095b      	lsrs	r3, r3, #5
 8002918:	2001      	movs	r0, #1
 800291a:	fa00 f202 	lsl.w	r2, r0, r2
 800291e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr
 800292c:	e000e100 	.word	0xe000e100

08002930 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	6039      	str	r1, [r7, #0]
 800293a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800293c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002940:	2b00      	cmp	r3, #0
 8002942:	db0a      	blt.n	800295a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	b2da      	uxtb	r2, r3
 8002948:	490c      	ldr	r1, [pc, #48]	; (800297c <__NVIC_SetPriority+0x4c>)
 800294a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294e:	0112      	lsls	r2, r2, #4
 8002950:	b2d2      	uxtb	r2, r2
 8002952:	440b      	add	r3, r1
 8002954:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002958:	e00a      	b.n	8002970 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	b2da      	uxtb	r2, r3
 800295e:	4908      	ldr	r1, [pc, #32]	; (8002980 <__NVIC_SetPriority+0x50>)
 8002960:	79fb      	ldrb	r3, [r7, #7]
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	3b04      	subs	r3, #4
 8002968:	0112      	lsls	r2, r2, #4
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	440b      	add	r3, r1
 800296e:	761a      	strb	r2, [r3, #24]
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	e000e100 	.word	0xe000e100
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002984:	b480      	push	{r7}
 8002986:	b089      	sub	sp, #36	; 0x24
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f1c3 0307 	rsb	r3, r3, #7
 800299e:	2b04      	cmp	r3, #4
 80029a0:	bf28      	it	cs
 80029a2:	2304      	movcs	r3, #4
 80029a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	3304      	adds	r3, #4
 80029aa:	2b06      	cmp	r3, #6
 80029ac:	d902      	bls.n	80029b4 <NVIC_EncodePriority+0x30>
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	3b03      	subs	r3, #3
 80029b2:	e000      	b.n	80029b6 <NVIC_EncodePriority+0x32>
 80029b4:	2300      	movs	r3, #0
 80029b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b8:	f04f 32ff 	mov.w	r2, #4294967295
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	43da      	mvns	r2, r3
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	401a      	ands	r2, r3
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029cc:	f04f 31ff 	mov.w	r1, #4294967295
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	fa01 f303 	lsl.w	r3, r1, r3
 80029d6:	43d9      	mvns	r1, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029dc:	4313      	orrs	r3, r2
         );
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3724      	adds	r7, #36	; 0x24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr

080029e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3b01      	subs	r3, #1
 80029f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029f8:	d301      	bcc.n	80029fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029fa:	2301      	movs	r3, #1
 80029fc:	e00f      	b.n	8002a1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029fe:	4a0a      	ldr	r2, [pc, #40]	; (8002a28 <SysTick_Config+0x40>)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3b01      	subs	r3, #1
 8002a04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a06:	210f      	movs	r1, #15
 8002a08:	f04f 30ff 	mov.w	r0, #4294967295
 8002a0c:	f7ff ff90 	bl	8002930 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a10:	4b05      	ldr	r3, [pc, #20]	; (8002a28 <SysTick_Config+0x40>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a16:	4b04      	ldr	r3, [pc, #16]	; (8002a28 <SysTick_Config+0x40>)
 8002a18:	2207      	movs	r2, #7
 8002a1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	e000e010 	.word	0xe000e010

08002a2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f7ff ff2d 	bl	8002894 <__NVIC_SetPriorityGrouping>
}
 8002a3a:	bf00      	nop
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b086      	sub	sp, #24
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	4603      	mov	r3, r0
 8002a4a:	60b9      	str	r1, [r7, #8]
 8002a4c:	607a      	str	r2, [r7, #4]
 8002a4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a54:	f7ff ff42 	bl	80028dc <__NVIC_GetPriorityGrouping>
 8002a58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	68b9      	ldr	r1, [r7, #8]
 8002a5e:	6978      	ldr	r0, [r7, #20]
 8002a60:	f7ff ff90 	bl	8002984 <NVIC_EncodePriority>
 8002a64:	4602      	mov	r2, r0
 8002a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff ff5f 	bl	8002930 <__NVIC_SetPriority>
}
 8002a72:	bf00      	nop
 8002a74:	3718      	adds	r7, #24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b082      	sub	sp, #8
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	4603      	mov	r3, r0
 8002a82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff ff35 	bl	80028f8 <__NVIC_EnableIRQ>
}
 8002a8e:	bf00      	nop
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b082      	sub	sp, #8
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7ff ffa2 	bl	80029e8 <SysTick_Config>
 8002aa4:	4603      	mov	r3, r0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
	...

08002ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b08b      	sub	sp, #44	; 0x2c
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002aba:	2300      	movs	r3, #0
 8002abc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ac2:	e169      	b.n	8002d98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	69fa      	ldr	r2, [r7, #28]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	f040 8158 	bne.w	8002d92 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	4a9a      	ldr	r2, [pc, #616]	; (8002d50 <HAL_GPIO_Init+0x2a0>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d05e      	beq.n	8002baa <HAL_GPIO_Init+0xfa>
 8002aec:	4a98      	ldr	r2, [pc, #608]	; (8002d50 <HAL_GPIO_Init+0x2a0>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d875      	bhi.n	8002bde <HAL_GPIO_Init+0x12e>
 8002af2:	4a98      	ldr	r2, [pc, #608]	; (8002d54 <HAL_GPIO_Init+0x2a4>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d058      	beq.n	8002baa <HAL_GPIO_Init+0xfa>
 8002af8:	4a96      	ldr	r2, [pc, #600]	; (8002d54 <HAL_GPIO_Init+0x2a4>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d86f      	bhi.n	8002bde <HAL_GPIO_Init+0x12e>
 8002afe:	4a96      	ldr	r2, [pc, #600]	; (8002d58 <HAL_GPIO_Init+0x2a8>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d052      	beq.n	8002baa <HAL_GPIO_Init+0xfa>
 8002b04:	4a94      	ldr	r2, [pc, #592]	; (8002d58 <HAL_GPIO_Init+0x2a8>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d869      	bhi.n	8002bde <HAL_GPIO_Init+0x12e>
 8002b0a:	4a94      	ldr	r2, [pc, #592]	; (8002d5c <HAL_GPIO_Init+0x2ac>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d04c      	beq.n	8002baa <HAL_GPIO_Init+0xfa>
 8002b10:	4a92      	ldr	r2, [pc, #584]	; (8002d5c <HAL_GPIO_Init+0x2ac>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d863      	bhi.n	8002bde <HAL_GPIO_Init+0x12e>
 8002b16:	4a92      	ldr	r2, [pc, #584]	; (8002d60 <HAL_GPIO_Init+0x2b0>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d046      	beq.n	8002baa <HAL_GPIO_Init+0xfa>
 8002b1c:	4a90      	ldr	r2, [pc, #576]	; (8002d60 <HAL_GPIO_Init+0x2b0>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d85d      	bhi.n	8002bde <HAL_GPIO_Init+0x12e>
 8002b22:	2b12      	cmp	r3, #18
 8002b24:	d82a      	bhi.n	8002b7c <HAL_GPIO_Init+0xcc>
 8002b26:	2b12      	cmp	r3, #18
 8002b28:	d859      	bhi.n	8002bde <HAL_GPIO_Init+0x12e>
 8002b2a:	a201      	add	r2, pc, #4	; (adr r2, 8002b30 <HAL_GPIO_Init+0x80>)
 8002b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b30:	08002bab 	.word	0x08002bab
 8002b34:	08002b85 	.word	0x08002b85
 8002b38:	08002b97 	.word	0x08002b97
 8002b3c:	08002bd9 	.word	0x08002bd9
 8002b40:	08002bdf 	.word	0x08002bdf
 8002b44:	08002bdf 	.word	0x08002bdf
 8002b48:	08002bdf 	.word	0x08002bdf
 8002b4c:	08002bdf 	.word	0x08002bdf
 8002b50:	08002bdf 	.word	0x08002bdf
 8002b54:	08002bdf 	.word	0x08002bdf
 8002b58:	08002bdf 	.word	0x08002bdf
 8002b5c:	08002bdf 	.word	0x08002bdf
 8002b60:	08002bdf 	.word	0x08002bdf
 8002b64:	08002bdf 	.word	0x08002bdf
 8002b68:	08002bdf 	.word	0x08002bdf
 8002b6c:	08002bdf 	.word	0x08002bdf
 8002b70:	08002bdf 	.word	0x08002bdf
 8002b74:	08002b8d 	.word	0x08002b8d
 8002b78:	08002ba1 	.word	0x08002ba1
 8002b7c:	4a79      	ldr	r2, [pc, #484]	; (8002d64 <HAL_GPIO_Init+0x2b4>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d013      	beq.n	8002baa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b82:	e02c      	b.n	8002bde <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	623b      	str	r3, [r7, #32]
          break;
 8002b8a:	e029      	b.n	8002be0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	3304      	adds	r3, #4
 8002b92:	623b      	str	r3, [r7, #32]
          break;
 8002b94:	e024      	b.n	8002be0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	3308      	adds	r3, #8
 8002b9c:	623b      	str	r3, [r7, #32]
          break;
 8002b9e:	e01f      	b.n	8002be0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	330c      	adds	r3, #12
 8002ba6:	623b      	str	r3, [r7, #32]
          break;
 8002ba8:	e01a      	b.n	8002be0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d102      	bne.n	8002bb8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002bb2:	2304      	movs	r3, #4
 8002bb4:	623b      	str	r3, [r7, #32]
          break;
 8002bb6:	e013      	b.n	8002be0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d105      	bne.n	8002bcc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bc0:	2308      	movs	r3, #8
 8002bc2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	69fa      	ldr	r2, [r7, #28]
 8002bc8:	611a      	str	r2, [r3, #16]
          break;
 8002bca:	e009      	b.n	8002be0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bcc:	2308      	movs	r3, #8
 8002bce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	69fa      	ldr	r2, [r7, #28]
 8002bd4:	615a      	str	r2, [r3, #20]
          break;
 8002bd6:	e003      	b.n	8002be0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	623b      	str	r3, [r7, #32]
          break;
 8002bdc:	e000      	b.n	8002be0 <HAL_GPIO_Init+0x130>
          break;
 8002bde:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	2bff      	cmp	r3, #255	; 0xff
 8002be4:	d801      	bhi.n	8002bea <HAL_GPIO_Init+0x13a>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	e001      	b.n	8002bee <HAL_GPIO_Init+0x13e>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	3304      	adds	r3, #4
 8002bee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	2bff      	cmp	r3, #255	; 0xff
 8002bf4:	d802      	bhi.n	8002bfc <HAL_GPIO_Init+0x14c>
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	e002      	b.n	8002c02 <HAL_GPIO_Init+0x152>
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfe:	3b08      	subs	r3, #8
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	210f      	movs	r1, #15
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c10:	43db      	mvns	r3, r3
 8002c12:	401a      	ands	r2, r3
 8002c14:	6a39      	ldr	r1, [r7, #32]
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 80b1 	beq.w	8002d92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c30:	4b4d      	ldr	r3, [pc, #308]	; (8002d68 <HAL_GPIO_Init+0x2b8>)
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	4a4c      	ldr	r2, [pc, #304]	; (8002d68 <HAL_GPIO_Init+0x2b8>)
 8002c36:	f043 0301 	orr.w	r3, r3, #1
 8002c3a:	6193      	str	r3, [r2, #24]
 8002c3c:	4b4a      	ldr	r3, [pc, #296]	; (8002d68 <HAL_GPIO_Init+0x2b8>)
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	60bb      	str	r3, [r7, #8]
 8002c46:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c48:	4a48      	ldr	r2, [pc, #288]	; (8002d6c <HAL_GPIO_Init+0x2bc>)
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	089b      	lsrs	r3, r3, #2
 8002c4e:	3302      	adds	r3, #2
 8002c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c54:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	f003 0303 	and.w	r3, r3, #3
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	220f      	movs	r2, #15
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	43db      	mvns	r3, r3
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a40      	ldr	r2, [pc, #256]	; (8002d70 <HAL_GPIO_Init+0x2c0>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d013      	beq.n	8002c9c <HAL_GPIO_Init+0x1ec>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a3f      	ldr	r2, [pc, #252]	; (8002d74 <HAL_GPIO_Init+0x2c4>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d00d      	beq.n	8002c98 <HAL_GPIO_Init+0x1e8>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a3e      	ldr	r2, [pc, #248]	; (8002d78 <HAL_GPIO_Init+0x2c8>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d007      	beq.n	8002c94 <HAL_GPIO_Init+0x1e4>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a3d      	ldr	r2, [pc, #244]	; (8002d7c <HAL_GPIO_Init+0x2cc>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d101      	bne.n	8002c90 <HAL_GPIO_Init+0x1e0>
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e006      	b.n	8002c9e <HAL_GPIO_Init+0x1ee>
 8002c90:	2304      	movs	r3, #4
 8002c92:	e004      	b.n	8002c9e <HAL_GPIO_Init+0x1ee>
 8002c94:	2302      	movs	r3, #2
 8002c96:	e002      	b.n	8002c9e <HAL_GPIO_Init+0x1ee>
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e000      	b.n	8002c9e <HAL_GPIO_Init+0x1ee>
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca0:	f002 0203 	and.w	r2, r2, #3
 8002ca4:	0092      	lsls	r2, r2, #2
 8002ca6:	4093      	lsls	r3, r2
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002cae:	492f      	ldr	r1, [pc, #188]	; (8002d6c <HAL_GPIO_Init+0x2bc>)
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	089b      	lsrs	r3, r3, #2
 8002cb4:	3302      	adds	r3, #2
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d006      	beq.n	8002cd6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002cc8:	4b2d      	ldr	r3, [pc, #180]	; (8002d80 <HAL_GPIO_Init+0x2d0>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	492c      	ldr	r1, [pc, #176]	; (8002d80 <HAL_GPIO_Init+0x2d0>)
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	600b      	str	r3, [r1, #0]
 8002cd4:	e006      	b.n	8002ce4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002cd6:	4b2a      	ldr	r3, [pc, #168]	; (8002d80 <HAL_GPIO_Init+0x2d0>)
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	4928      	ldr	r1, [pc, #160]	; (8002d80 <HAL_GPIO_Init+0x2d0>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d006      	beq.n	8002cfe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002cf0:	4b23      	ldr	r3, [pc, #140]	; (8002d80 <HAL_GPIO_Init+0x2d0>)
 8002cf2:	685a      	ldr	r2, [r3, #4]
 8002cf4:	4922      	ldr	r1, [pc, #136]	; (8002d80 <HAL_GPIO_Init+0x2d0>)
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	604b      	str	r3, [r1, #4]
 8002cfc:	e006      	b.n	8002d0c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002cfe:	4b20      	ldr	r3, [pc, #128]	; (8002d80 <HAL_GPIO_Init+0x2d0>)
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	43db      	mvns	r3, r3
 8002d06:	491e      	ldr	r1, [pc, #120]	; (8002d80 <HAL_GPIO_Init+0x2d0>)
 8002d08:	4013      	ands	r3, r2
 8002d0a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d006      	beq.n	8002d26 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d18:	4b19      	ldr	r3, [pc, #100]	; (8002d80 <HAL_GPIO_Init+0x2d0>)
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	4918      	ldr	r1, [pc, #96]	; (8002d80 <HAL_GPIO_Init+0x2d0>)
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	608b      	str	r3, [r1, #8]
 8002d24:	e006      	b.n	8002d34 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d26:	4b16      	ldr	r3, [pc, #88]	; (8002d80 <HAL_GPIO_Init+0x2d0>)
 8002d28:	689a      	ldr	r2, [r3, #8]
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	4914      	ldr	r1, [pc, #80]	; (8002d80 <HAL_GPIO_Init+0x2d0>)
 8002d30:	4013      	ands	r3, r2
 8002d32:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d021      	beq.n	8002d84 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d40:	4b0f      	ldr	r3, [pc, #60]	; (8002d80 <HAL_GPIO_Init+0x2d0>)
 8002d42:	68da      	ldr	r2, [r3, #12]
 8002d44:	490e      	ldr	r1, [pc, #56]	; (8002d80 <HAL_GPIO_Init+0x2d0>)
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	60cb      	str	r3, [r1, #12]
 8002d4c:	e021      	b.n	8002d92 <HAL_GPIO_Init+0x2e2>
 8002d4e:	bf00      	nop
 8002d50:	10320000 	.word	0x10320000
 8002d54:	10310000 	.word	0x10310000
 8002d58:	10220000 	.word	0x10220000
 8002d5c:	10210000 	.word	0x10210000
 8002d60:	10120000 	.word	0x10120000
 8002d64:	10110000 	.word	0x10110000
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	40010000 	.word	0x40010000
 8002d70:	40010800 	.word	0x40010800
 8002d74:	40010c00 	.word	0x40010c00
 8002d78:	40011000 	.word	0x40011000
 8002d7c:	40011400 	.word	0x40011400
 8002d80:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d84:	4b0b      	ldr	r3, [pc, #44]	; (8002db4 <HAL_GPIO_Init+0x304>)
 8002d86:	68da      	ldr	r2, [r3, #12]
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	4909      	ldr	r1, [pc, #36]	; (8002db4 <HAL_GPIO_Init+0x304>)
 8002d8e:	4013      	ands	r3, r2
 8002d90:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	3301      	adds	r3, #1
 8002d96:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f47f ae8e 	bne.w	8002ac4 <HAL_GPIO_Init+0x14>
  }
}
 8002da8:	bf00      	nop
 8002daa:	bf00      	nop
 8002dac:	372c      	adds	r7, #44	; 0x2c
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bc80      	pop	{r7}
 8002db2:	4770      	bx	lr
 8002db4:	40010400 	.word	0x40010400

08002db8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	807b      	strh	r3, [r7, #2]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002dc8:	787b      	ldrb	r3, [r7, #1]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dce:	887a      	ldrh	r2, [r7, #2]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002dd4:	e003      	b.n	8002dde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002dd6:	887b      	ldrh	r3, [r7, #2]
 8002dd8:	041a      	lsls	r2, r3, #16
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	611a      	str	r2, [r3, #16]
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bc80      	pop	{r7}
 8002de6:	4770      	bx	lr

08002de8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e272      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f000 8087 	beq.w	8002f16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e08:	4b92      	ldr	r3, [pc, #584]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f003 030c 	and.w	r3, r3, #12
 8002e10:	2b04      	cmp	r3, #4
 8002e12:	d00c      	beq.n	8002e2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e14:	4b8f      	ldr	r3, [pc, #572]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f003 030c 	and.w	r3, r3, #12
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d112      	bne.n	8002e46 <HAL_RCC_OscConfig+0x5e>
 8002e20:	4b8c      	ldr	r3, [pc, #560]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e2c:	d10b      	bne.n	8002e46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e2e:	4b89      	ldr	r3, [pc, #548]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d06c      	beq.n	8002f14 <HAL_RCC_OscConfig+0x12c>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d168      	bne.n	8002f14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e24c      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e4e:	d106      	bne.n	8002e5e <HAL_RCC_OscConfig+0x76>
 8002e50:	4b80      	ldr	r3, [pc, #512]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a7f      	ldr	r2, [pc, #508]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e5a:	6013      	str	r3, [r2, #0]
 8002e5c:	e02e      	b.n	8002ebc <HAL_RCC_OscConfig+0xd4>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10c      	bne.n	8002e80 <HAL_RCC_OscConfig+0x98>
 8002e66:	4b7b      	ldr	r3, [pc, #492]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a7a      	ldr	r2, [pc, #488]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e70:	6013      	str	r3, [r2, #0]
 8002e72:	4b78      	ldr	r3, [pc, #480]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a77      	ldr	r2, [pc, #476]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	e01d      	b.n	8002ebc <HAL_RCC_OscConfig+0xd4>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e88:	d10c      	bne.n	8002ea4 <HAL_RCC_OscConfig+0xbc>
 8002e8a:	4b72      	ldr	r3, [pc, #456]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a71      	ldr	r2, [pc, #452]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	4b6f      	ldr	r3, [pc, #444]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a6e      	ldr	r2, [pc, #440]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ea0:	6013      	str	r3, [r2, #0]
 8002ea2:	e00b      	b.n	8002ebc <HAL_RCC_OscConfig+0xd4>
 8002ea4:	4b6b      	ldr	r3, [pc, #428]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a6a      	ldr	r2, [pc, #424]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eae:	6013      	str	r3, [r2, #0]
 8002eb0:	4b68      	ldr	r3, [pc, #416]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a67      	ldr	r2, [pc, #412]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d013      	beq.n	8002eec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec4:	f7ff fcb8 	bl	8002838 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ecc:	f7ff fcb4 	bl	8002838 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b64      	cmp	r3, #100	; 0x64
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e200      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ede:	4b5d      	ldr	r3, [pc, #372]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0f0      	beq.n	8002ecc <HAL_RCC_OscConfig+0xe4>
 8002eea:	e014      	b.n	8002f16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eec:	f7ff fca4 	bl	8002838 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ef4:	f7ff fca0 	bl	8002838 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b64      	cmp	r3, #100	; 0x64
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e1ec      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f06:	4b53      	ldr	r3, [pc, #332]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1f0      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x10c>
 8002f12:	e000      	b.n	8002f16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d063      	beq.n	8002fea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f22:	4b4c      	ldr	r3, [pc, #304]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f003 030c 	and.w	r3, r3, #12
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00b      	beq.n	8002f46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f2e:	4b49      	ldr	r3, [pc, #292]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f003 030c 	and.w	r3, r3, #12
 8002f36:	2b08      	cmp	r3, #8
 8002f38:	d11c      	bne.n	8002f74 <HAL_RCC_OscConfig+0x18c>
 8002f3a:	4b46      	ldr	r3, [pc, #280]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d116      	bne.n	8002f74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f46:	4b43      	ldr	r3, [pc, #268]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d005      	beq.n	8002f5e <HAL_RCC_OscConfig+0x176>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d001      	beq.n	8002f5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e1c0      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f5e:	4b3d      	ldr	r3, [pc, #244]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	4939      	ldr	r1, [pc, #228]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f72:	e03a      	b.n	8002fea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d020      	beq.n	8002fbe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f7c:	4b36      	ldr	r3, [pc, #216]	; (8003058 <HAL_RCC_OscConfig+0x270>)
 8002f7e:	2201      	movs	r2, #1
 8002f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f82:	f7ff fc59 	bl	8002838 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f88:	e008      	b.n	8002f9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f8a:	f7ff fc55 	bl	8002838 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e1a1      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f9c:	4b2d      	ldr	r3, [pc, #180]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0f0      	beq.n	8002f8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fa8:	4b2a      	ldr	r3, [pc, #168]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	4927      	ldr	r1, [pc, #156]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	600b      	str	r3, [r1, #0]
 8002fbc:	e015      	b.n	8002fea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fbe:	4b26      	ldr	r3, [pc, #152]	; (8003058 <HAL_RCC_OscConfig+0x270>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc4:	f7ff fc38 	bl	8002838 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fcc:	f7ff fc34 	bl	8002838 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e180      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fde:	4b1d      	ldr	r3, [pc, #116]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1f0      	bne.n	8002fcc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0308 	and.w	r3, r3, #8
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d03a      	beq.n	800306c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d019      	beq.n	8003032 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ffe:	4b17      	ldr	r3, [pc, #92]	; (800305c <HAL_RCC_OscConfig+0x274>)
 8003000:	2201      	movs	r2, #1
 8003002:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003004:	f7ff fc18 	bl	8002838 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800300c:	f7ff fc14 	bl	8002838 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e160      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800301e:	4b0d      	ldr	r3, [pc, #52]	; (8003054 <HAL_RCC_OscConfig+0x26c>)
 8003020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0f0      	beq.n	800300c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800302a:	2001      	movs	r0, #1
 800302c:	f000 fad8 	bl	80035e0 <RCC_Delay>
 8003030:	e01c      	b.n	800306c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003032:	4b0a      	ldr	r3, [pc, #40]	; (800305c <HAL_RCC_OscConfig+0x274>)
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003038:	f7ff fbfe 	bl	8002838 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800303e:	e00f      	b.n	8003060 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003040:	f7ff fbfa 	bl	8002838 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d908      	bls.n	8003060 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e146      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
 8003052:	bf00      	nop
 8003054:	40021000 	.word	0x40021000
 8003058:	42420000 	.word	0x42420000
 800305c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003060:	4b92      	ldr	r3, [pc, #584]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1e9      	bne.n	8003040 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0304 	and.w	r3, r3, #4
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 80a6 	beq.w	80031c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800307a:	2300      	movs	r3, #0
 800307c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800307e:	4b8b      	ldr	r3, [pc, #556]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10d      	bne.n	80030a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800308a:	4b88      	ldr	r3, [pc, #544]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	4a87      	ldr	r2, [pc, #540]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003094:	61d3      	str	r3, [r2, #28]
 8003096:	4b85      	ldr	r3, [pc, #532]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309e:	60bb      	str	r3, [r7, #8]
 80030a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030a2:	2301      	movs	r3, #1
 80030a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a6:	4b82      	ldr	r3, [pc, #520]	; (80032b0 <HAL_RCC_OscConfig+0x4c8>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d118      	bne.n	80030e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030b2:	4b7f      	ldr	r3, [pc, #508]	; (80032b0 <HAL_RCC_OscConfig+0x4c8>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a7e      	ldr	r2, [pc, #504]	; (80032b0 <HAL_RCC_OscConfig+0x4c8>)
 80030b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030be:	f7ff fbbb 	bl	8002838 <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030c6:	f7ff fbb7 	bl	8002838 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b64      	cmp	r3, #100	; 0x64
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e103      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d8:	4b75      	ldr	r3, [pc, #468]	; (80032b0 <HAL_RCC_OscConfig+0x4c8>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0f0      	beq.n	80030c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d106      	bne.n	80030fa <HAL_RCC_OscConfig+0x312>
 80030ec:	4b6f      	ldr	r3, [pc, #444]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	4a6e      	ldr	r2, [pc, #440]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 80030f2:	f043 0301 	orr.w	r3, r3, #1
 80030f6:	6213      	str	r3, [r2, #32]
 80030f8:	e02d      	b.n	8003156 <HAL_RCC_OscConfig+0x36e>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10c      	bne.n	800311c <HAL_RCC_OscConfig+0x334>
 8003102:	4b6a      	ldr	r3, [pc, #424]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	4a69      	ldr	r2, [pc, #420]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003108:	f023 0301 	bic.w	r3, r3, #1
 800310c:	6213      	str	r3, [r2, #32]
 800310e:	4b67      	ldr	r3, [pc, #412]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	4a66      	ldr	r2, [pc, #408]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003114:	f023 0304 	bic.w	r3, r3, #4
 8003118:	6213      	str	r3, [r2, #32]
 800311a:	e01c      	b.n	8003156 <HAL_RCC_OscConfig+0x36e>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	2b05      	cmp	r3, #5
 8003122:	d10c      	bne.n	800313e <HAL_RCC_OscConfig+0x356>
 8003124:	4b61      	ldr	r3, [pc, #388]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	4a60      	ldr	r2, [pc, #384]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 800312a:	f043 0304 	orr.w	r3, r3, #4
 800312e:	6213      	str	r3, [r2, #32]
 8003130:	4b5e      	ldr	r3, [pc, #376]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	4a5d      	ldr	r2, [pc, #372]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003136:	f043 0301 	orr.w	r3, r3, #1
 800313a:	6213      	str	r3, [r2, #32]
 800313c:	e00b      	b.n	8003156 <HAL_RCC_OscConfig+0x36e>
 800313e:	4b5b      	ldr	r3, [pc, #364]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	4a5a      	ldr	r2, [pc, #360]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003144:	f023 0301 	bic.w	r3, r3, #1
 8003148:	6213      	str	r3, [r2, #32]
 800314a:	4b58      	ldr	r3, [pc, #352]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	4a57      	ldr	r2, [pc, #348]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003150:	f023 0304 	bic.w	r3, r3, #4
 8003154:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d015      	beq.n	800318a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800315e:	f7ff fb6b 	bl	8002838 <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003164:	e00a      	b.n	800317c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003166:	f7ff fb67 	bl	8002838 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	f241 3288 	movw	r2, #5000	; 0x1388
 8003174:	4293      	cmp	r3, r2
 8003176:	d901      	bls.n	800317c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e0b1      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800317c:	4b4b      	ldr	r3, [pc, #300]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d0ee      	beq.n	8003166 <HAL_RCC_OscConfig+0x37e>
 8003188:	e014      	b.n	80031b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800318a:	f7ff fb55 	bl	8002838 <HAL_GetTick>
 800318e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003190:	e00a      	b.n	80031a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003192:	f7ff fb51 	bl	8002838 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e09b      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031a8:	4b40      	ldr	r3, [pc, #256]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1ee      	bne.n	8003192 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031b4:	7dfb      	ldrb	r3, [r7, #23]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d105      	bne.n	80031c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ba:	4b3c      	ldr	r3, [pc, #240]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	4a3b      	ldr	r2, [pc, #236]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 80031c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f000 8087 	beq.w	80032de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031d0:	4b36      	ldr	r3, [pc, #216]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f003 030c 	and.w	r3, r3, #12
 80031d8:	2b08      	cmp	r3, #8
 80031da:	d061      	beq.n	80032a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d146      	bne.n	8003272 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e4:	4b33      	ldr	r3, [pc, #204]	; (80032b4 <HAL_RCC_OscConfig+0x4cc>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ea:	f7ff fb25 	bl	8002838 <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031f0:	e008      	b.n	8003204 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f2:	f7ff fb21 	bl	8002838 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e06d      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003204:	4b29      	ldr	r3, [pc, #164]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1f0      	bne.n	80031f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003218:	d108      	bne.n	800322c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800321a:	4b24      	ldr	r3, [pc, #144]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	4921      	ldr	r1, [pc, #132]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003228:	4313      	orrs	r3, r2
 800322a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800322c:	4b1f      	ldr	r3, [pc, #124]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a19      	ldr	r1, [r3, #32]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323c:	430b      	orrs	r3, r1
 800323e:	491b      	ldr	r1, [pc, #108]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003240:	4313      	orrs	r3, r2
 8003242:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003244:	4b1b      	ldr	r3, [pc, #108]	; (80032b4 <HAL_RCC_OscConfig+0x4cc>)
 8003246:	2201      	movs	r2, #1
 8003248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800324a:	f7ff faf5 	bl	8002838 <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003250:	e008      	b.n	8003264 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003252:	f7ff faf1 	bl	8002838 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e03d      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003264:	4b11      	ldr	r3, [pc, #68]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0f0      	beq.n	8003252 <HAL_RCC_OscConfig+0x46a>
 8003270:	e035      	b.n	80032de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003272:	4b10      	ldr	r3, [pc, #64]	; (80032b4 <HAL_RCC_OscConfig+0x4cc>)
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003278:	f7ff fade 	bl	8002838 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003280:	f7ff fada 	bl	8002838 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e026      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003292:	4b06      	ldr	r3, [pc, #24]	; (80032ac <HAL_RCC_OscConfig+0x4c4>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1f0      	bne.n	8003280 <HAL_RCC_OscConfig+0x498>
 800329e:	e01e      	b.n	80032de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d107      	bne.n	80032b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e019      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
 80032ac:	40021000 	.word	0x40021000
 80032b0:	40007000 	.word	0x40007000
 80032b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032b8:	4b0b      	ldr	r3, [pc, #44]	; (80032e8 <HAL_RCC_OscConfig+0x500>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d106      	bne.n	80032da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d001      	beq.n	80032de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e000      	b.n	80032e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3718      	adds	r7, #24
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	40021000 	.word	0x40021000

080032ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d101      	bne.n	8003300 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e0d0      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003300:	4b6a      	ldr	r3, [pc, #424]	; (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	429a      	cmp	r2, r3
 800330c:	d910      	bls.n	8003330 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330e:	4b67      	ldr	r3, [pc, #412]	; (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f023 0207 	bic.w	r2, r3, #7
 8003316:	4965      	ldr	r1, [pc, #404]	; (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	4313      	orrs	r3, r2
 800331c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800331e:	4b63      	ldr	r3, [pc, #396]	; (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	429a      	cmp	r2, r3
 800332a:	d001      	beq.n	8003330 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e0b8      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d020      	beq.n	800337e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d005      	beq.n	8003354 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003348:	4b59      	ldr	r3, [pc, #356]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	4a58      	ldr	r2, [pc, #352]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 800334e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003352:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	2b00      	cmp	r3, #0
 800335e:	d005      	beq.n	800336c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003360:	4b53      	ldr	r3, [pc, #332]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	4a52      	ldr	r2, [pc, #328]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003366:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800336a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800336c:	4b50      	ldr	r3, [pc, #320]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	494d      	ldr	r1, [pc, #308]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 800337a:	4313      	orrs	r3, r2
 800337c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d040      	beq.n	800340c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d107      	bne.n	80033a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003392:	4b47      	ldr	r3, [pc, #284]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d115      	bne.n	80033ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e07f      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d107      	bne.n	80033ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033aa:	4b41      	ldr	r3, [pc, #260]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d109      	bne.n	80033ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e073      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ba:	4b3d      	ldr	r3, [pc, #244]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e06b      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ca:	4b39      	ldr	r3, [pc, #228]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f023 0203 	bic.w	r2, r3, #3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	4936      	ldr	r1, [pc, #216]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033dc:	f7ff fa2c 	bl	8002838 <HAL_GetTick>
 80033e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033e2:	e00a      	b.n	80033fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033e4:	f7ff fa28 	bl	8002838 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e053      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033fa:	4b2d      	ldr	r3, [pc, #180]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f003 020c 	and.w	r2, r3, #12
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	429a      	cmp	r2, r3
 800340a:	d1eb      	bne.n	80033e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800340c:	4b27      	ldr	r3, [pc, #156]	; (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	429a      	cmp	r2, r3
 8003418:	d210      	bcs.n	800343c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800341a:	4b24      	ldr	r3, [pc, #144]	; (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f023 0207 	bic.w	r2, r3, #7
 8003422:	4922      	ldr	r1, [pc, #136]	; (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	4313      	orrs	r3, r2
 8003428:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800342a:	4b20      	ldr	r3, [pc, #128]	; (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	429a      	cmp	r2, r3
 8003436:	d001      	beq.n	800343c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e032      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	d008      	beq.n	800345a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003448:	4b19      	ldr	r3, [pc, #100]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	4916      	ldr	r1, [pc, #88]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003456:	4313      	orrs	r3, r2
 8003458:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	2b00      	cmp	r3, #0
 8003464:	d009      	beq.n	800347a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003466:	4b12      	ldr	r3, [pc, #72]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	490e      	ldr	r1, [pc, #56]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003476:	4313      	orrs	r3, r2
 8003478:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800347a:	f000 f821 	bl	80034c0 <HAL_RCC_GetSysClockFreq>
 800347e:	4602      	mov	r2, r0
 8003480:	4b0b      	ldr	r3, [pc, #44]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	091b      	lsrs	r3, r3, #4
 8003486:	f003 030f 	and.w	r3, r3, #15
 800348a:	490a      	ldr	r1, [pc, #40]	; (80034b4 <HAL_RCC_ClockConfig+0x1c8>)
 800348c:	5ccb      	ldrb	r3, [r1, r3]
 800348e:	fa22 f303 	lsr.w	r3, r2, r3
 8003492:	4a09      	ldr	r2, [pc, #36]	; (80034b8 <HAL_RCC_ClockConfig+0x1cc>)
 8003494:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003496:	4b09      	ldr	r3, [pc, #36]	; (80034bc <HAL_RCC_ClockConfig+0x1d0>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff f98a 	bl	80027b4 <HAL_InitTick>

  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	40022000 	.word	0x40022000
 80034b0:	40021000 	.word	0x40021000
 80034b4:	08006304 	.word	0x08006304
 80034b8:	2000000c 	.word	0x2000000c
 80034bc:	20000010 	.word	0x20000010

080034c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034c0:	b490      	push	{r4, r7}
 80034c2:	b08a      	sub	sp, #40	; 0x28
 80034c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80034c6:	4b29      	ldr	r3, [pc, #164]	; (800356c <HAL_RCC_GetSysClockFreq+0xac>)
 80034c8:	1d3c      	adds	r4, r7, #4
 80034ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80034d0:	f240 2301 	movw	r3, #513	; 0x201
 80034d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	61fb      	str	r3, [r7, #28]
 80034da:	2300      	movs	r3, #0
 80034dc:	61bb      	str	r3, [r7, #24]
 80034de:	2300      	movs	r3, #0
 80034e0:	627b      	str	r3, [r7, #36]	; 0x24
 80034e2:	2300      	movs	r3, #0
 80034e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80034e6:	2300      	movs	r3, #0
 80034e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034ea:	4b21      	ldr	r3, [pc, #132]	; (8003570 <HAL_RCC_GetSysClockFreq+0xb0>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	f003 030c 	and.w	r3, r3, #12
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	d002      	beq.n	8003500 <HAL_RCC_GetSysClockFreq+0x40>
 80034fa:	2b08      	cmp	r3, #8
 80034fc:	d003      	beq.n	8003506 <HAL_RCC_GetSysClockFreq+0x46>
 80034fe:	e02b      	b.n	8003558 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003500:	4b1c      	ldr	r3, [pc, #112]	; (8003574 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003502:	623b      	str	r3, [r7, #32]
      break;
 8003504:	e02b      	b.n	800355e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	0c9b      	lsrs	r3, r3, #18
 800350a:	f003 030f 	and.w	r3, r3, #15
 800350e:	3328      	adds	r3, #40	; 0x28
 8003510:	443b      	add	r3, r7
 8003512:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003516:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d012      	beq.n	8003548 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003522:	4b13      	ldr	r3, [pc, #76]	; (8003570 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	0c5b      	lsrs	r3, r3, #17
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	3328      	adds	r3, #40	; 0x28
 800352e:	443b      	add	r3, r7
 8003530:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003534:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	4a0e      	ldr	r2, [pc, #56]	; (8003574 <HAL_RCC_GetSysClockFreq+0xb4>)
 800353a:	fb03 f202 	mul.w	r2, r3, r2
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	fbb2 f3f3 	udiv	r3, r2, r3
 8003544:	627b      	str	r3, [r7, #36]	; 0x24
 8003546:	e004      	b.n	8003552 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	4a0b      	ldr	r2, [pc, #44]	; (8003578 <HAL_RCC_GetSysClockFreq+0xb8>)
 800354c:	fb02 f303 	mul.w	r3, r2, r3
 8003550:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	623b      	str	r3, [r7, #32]
      break;
 8003556:	e002      	b.n	800355e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003558:	4b06      	ldr	r3, [pc, #24]	; (8003574 <HAL_RCC_GetSysClockFreq+0xb4>)
 800355a:	623b      	str	r3, [r7, #32]
      break;
 800355c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800355e:	6a3b      	ldr	r3, [r7, #32]
}
 8003560:	4618      	mov	r0, r3
 8003562:	3728      	adds	r7, #40	; 0x28
 8003564:	46bd      	mov	sp, r7
 8003566:	bc90      	pop	{r4, r7}
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	080062f4 	.word	0x080062f4
 8003570:	40021000 	.word	0x40021000
 8003574:	007a1200 	.word	0x007a1200
 8003578:	003d0900 	.word	0x003d0900

0800357c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003580:	4b02      	ldr	r3, [pc, #8]	; (800358c <HAL_RCC_GetHCLKFreq+0x10>)
 8003582:	681b      	ldr	r3, [r3, #0]
}
 8003584:	4618      	mov	r0, r3
 8003586:	46bd      	mov	sp, r7
 8003588:	bc80      	pop	{r7}
 800358a:	4770      	bx	lr
 800358c:	2000000c 	.word	0x2000000c

08003590 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003594:	f7ff fff2 	bl	800357c <HAL_RCC_GetHCLKFreq>
 8003598:	4602      	mov	r2, r0
 800359a:	4b05      	ldr	r3, [pc, #20]	; (80035b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	0a1b      	lsrs	r3, r3, #8
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	4903      	ldr	r1, [pc, #12]	; (80035b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035a6:	5ccb      	ldrb	r3, [r1, r3]
 80035a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	40021000 	.word	0x40021000
 80035b4:	08006314 	.word	0x08006314

080035b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035bc:	f7ff ffde 	bl	800357c <HAL_RCC_GetHCLKFreq>
 80035c0:	4602      	mov	r2, r0
 80035c2:	4b05      	ldr	r3, [pc, #20]	; (80035d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	0adb      	lsrs	r3, r3, #11
 80035c8:	f003 0307 	and.w	r3, r3, #7
 80035cc:	4903      	ldr	r1, [pc, #12]	; (80035dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80035ce:	5ccb      	ldrb	r3, [r1, r3]
 80035d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	40021000 	.word	0x40021000
 80035dc:	08006314 	.word	0x08006314

080035e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035e8:	4b0a      	ldr	r3, [pc, #40]	; (8003614 <RCC_Delay+0x34>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a0a      	ldr	r2, [pc, #40]	; (8003618 <RCC_Delay+0x38>)
 80035ee:	fba2 2303 	umull	r2, r3, r2, r3
 80035f2:	0a5b      	lsrs	r3, r3, #9
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	fb02 f303 	mul.w	r3, r2, r3
 80035fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80035fc:	bf00      	nop
  }
  while (Delay --);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	1e5a      	subs	r2, r3, #1
 8003602:	60fa      	str	r2, [r7, #12]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1f9      	bne.n	80035fc <RCC_Delay+0x1c>
}
 8003608:	bf00      	nop
 800360a:	bf00      	nop
 800360c:	3714      	adds	r7, #20
 800360e:	46bd      	mov	sp, r7
 8003610:	bc80      	pop	{r7}
 8003612:	4770      	bx	lr
 8003614:	2000000c 	.word	0x2000000c
 8003618:	10624dd3 	.word	0x10624dd3

0800361c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e041      	b.n	80036b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d106      	bne.n	8003648 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f7fe ff52 	bl	80024ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2202      	movs	r2, #2
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3304      	adds	r3, #4
 8003658:	4619      	mov	r1, r3
 800365a:	4610      	mov	r0, r2
 800365c:	f000 fd50 	bl	8004100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
	...

080036bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d001      	beq.n	80036d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e03a      	b.n	800374a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2202      	movs	r2, #2
 80036d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68da      	ldr	r2, [r3, #12]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 0201 	orr.w	r2, r2, #1
 80036ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a18      	ldr	r2, [pc, #96]	; (8003754 <HAL_TIM_Base_Start_IT+0x98>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d00e      	beq.n	8003714 <HAL_TIM_Base_Start_IT+0x58>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036fe:	d009      	beq.n	8003714 <HAL_TIM_Base_Start_IT+0x58>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a14      	ldr	r2, [pc, #80]	; (8003758 <HAL_TIM_Base_Start_IT+0x9c>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d004      	beq.n	8003714 <HAL_TIM_Base_Start_IT+0x58>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a13      	ldr	r2, [pc, #76]	; (800375c <HAL_TIM_Base_Start_IT+0xa0>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d111      	bne.n	8003738 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2b06      	cmp	r3, #6
 8003724:	d010      	beq.n	8003748 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f042 0201 	orr.w	r2, r2, #1
 8003734:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003736:	e007      	b.n	8003748 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f042 0201 	orr.w	r2, r2, #1
 8003746:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	bc80      	pop	{r7}
 8003752:	4770      	bx	lr
 8003754:	40012c00 	.word	0x40012c00
 8003758:	40000400 	.word	0x40000400
 800375c:	40000800 	.word	0x40000800

08003760 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e041      	b.n	80037f6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d106      	bne.n	800378c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7fe fed4 	bl	8002534 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2202      	movs	r2, #2
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	3304      	adds	r3, #4
 800379c:	4619      	mov	r1, r3
 800379e:	4610      	mov	r0, r2
 80037a0:	f000 fcae 	bl	8004100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
	...

08003800 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d109      	bne.n	8003824 <HAL_TIM_PWM_Start+0x24>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b01      	cmp	r3, #1
 800381a:	bf14      	ite	ne
 800381c:	2301      	movne	r3, #1
 800381e:	2300      	moveq	r3, #0
 8003820:	b2db      	uxtb	r3, r3
 8003822:	e022      	b.n	800386a <HAL_TIM_PWM_Start+0x6a>
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	2b04      	cmp	r3, #4
 8003828:	d109      	bne.n	800383e <HAL_TIM_PWM_Start+0x3e>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b01      	cmp	r3, #1
 8003834:	bf14      	ite	ne
 8003836:	2301      	movne	r3, #1
 8003838:	2300      	moveq	r3, #0
 800383a:	b2db      	uxtb	r3, r3
 800383c:	e015      	b.n	800386a <HAL_TIM_PWM_Start+0x6a>
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	2b08      	cmp	r3, #8
 8003842:	d109      	bne.n	8003858 <HAL_TIM_PWM_Start+0x58>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b01      	cmp	r3, #1
 800384e:	bf14      	ite	ne
 8003850:	2301      	movne	r3, #1
 8003852:	2300      	moveq	r3, #0
 8003854:	b2db      	uxtb	r3, r3
 8003856:	e008      	b.n	800386a <HAL_TIM_PWM_Start+0x6a>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b01      	cmp	r3, #1
 8003862:	bf14      	ite	ne
 8003864:	2301      	movne	r3, #1
 8003866:	2300      	moveq	r3, #0
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e05e      	b.n	8003930 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d104      	bne.n	8003882 <HAL_TIM_PWM_Start+0x82>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2202      	movs	r2, #2
 800387c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003880:	e013      	b.n	80038aa <HAL_TIM_PWM_Start+0xaa>
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	2b04      	cmp	r3, #4
 8003886:	d104      	bne.n	8003892 <HAL_TIM_PWM_Start+0x92>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2202      	movs	r2, #2
 800388c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003890:	e00b      	b.n	80038aa <HAL_TIM_PWM_Start+0xaa>
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	2b08      	cmp	r3, #8
 8003896:	d104      	bne.n	80038a2 <HAL_TIM_PWM_Start+0xa2>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2202      	movs	r2, #2
 800389c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038a0:	e003      	b.n	80038aa <HAL_TIM_PWM_Start+0xaa>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2202      	movs	r2, #2
 80038a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2201      	movs	r2, #1
 80038b0:	6839      	ldr	r1, [r7, #0]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 fea4 	bl	8004600 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a1e      	ldr	r2, [pc, #120]	; (8003938 <HAL_TIM_PWM_Start+0x138>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d107      	bne.n	80038d2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a18      	ldr	r2, [pc, #96]	; (8003938 <HAL_TIM_PWM_Start+0x138>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d00e      	beq.n	80038fa <HAL_TIM_PWM_Start+0xfa>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e4:	d009      	beq.n	80038fa <HAL_TIM_PWM_Start+0xfa>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a14      	ldr	r2, [pc, #80]	; (800393c <HAL_TIM_PWM_Start+0x13c>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d004      	beq.n	80038fa <HAL_TIM_PWM_Start+0xfa>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a12      	ldr	r2, [pc, #72]	; (8003940 <HAL_TIM_PWM_Start+0x140>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d111      	bne.n	800391e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f003 0307 	and.w	r3, r3, #7
 8003904:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2b06      	cmp	r3, #6
 800390a:	d010      	beq.n	800392e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f042 0201 	orr.w	r2, r2, #1
 800391a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800391c:	e007      	b.n	800392e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f042 0201 	orr.w	r2, r2, #1
 800392c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	40012c00 	.word	0x40012c00
 800393c:	40000400 	.word	0x40000400
 8003940:	40000800 	.word	0x40000800

08003944 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e093      	b.n	8003a80 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	d106      	bne.n	8003972 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f7fe fdff 	bl	8002570 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2202      	movs	r2, #2
 8003976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6812      	ldr	r2, [r2, #0]
 8003984:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003988:	f023 0307 	bic.w	r3, r3, #7
 800398c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	3304      	adds	r3, #4
 8003996:	4619      	mov	r1, r3
 8003998:	4610      	mov	r0, r2
 800399a:	f000 fbb1 	bl	8004100 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	4313      	orrs	r3, r2
 80039be:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039c6:	f023 0303 	bic.w	r3, r3, #3
 80039ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	689a      	ldr	r2, [r3, #8]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	021b      	lsls	r3, r3, #8
 80039d6:	4313      	orrs	r3, r2
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	4313      	orrs	r3, r2
 80039dc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80039e4:	f023 030c 	bic.w	r3, r3, #12
 80039e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	68da      	ldr	r2, [r3, #12]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	69db      	ldr	r3, [r3, #28]
 80039fe:	021b      	lsls	r3, r3, #8
 8003a00:	4313      	orrs	r3, r2
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	011a      	lsls	r2, r3, #4
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	031b      	lsls	r3, r3, #12
 8003a14:	4313      	orrs	r3, r2
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003a22:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3718      	adds	r7, #24
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a98:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003aa0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003aa8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003ab0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d110      	bne.n	8003ada <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ab8:	7bfb      	ldrb	r3, [r7, #15]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d102      	bne.n	8003ac4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003abe:	7b7b      	ldrb	r3, [r7, #13]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d001      	beq.n	8003ac8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e069      	b.n	8003b9c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2202      	movs	r2, #2
 8003acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ad8:	e031      	b.n	8003b3e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	2b04      	cmp	r3, #4
 8003ade:	d110      	bne.n	8003b02 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ae0:	7bbb      	ldrb	r3, [r7, #14]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d102      	bne.n	8003aec <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ae6:	7b3b      	ldrb	r3, [r7, #12]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d001      	beq.n	8003af0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e055      	b.n	8003b9c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2202      	movs	r2, #2
 8003af4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2202      	movs	r2, #2
 8003afc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b00:	e01d      	b.n	8003b3e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b02:	7bfb      	ldrb	r3, [r7, #15]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d108      	bne.n	8003b1a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b08:	7bbb      	ldrb	r3, [r7, #14]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d105      	bne.n	8003b1a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b0e:	7b7b      	ldrb	r3, [r7, #13]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d102      	bne.n	8003b1a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b14:	7b3b      	ldrb	r3, [r7, #12]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d001      	beq.n	8003b1e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e03e      	b.n	8003b9c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2202      	movs	r2, #2
 8003b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2202      	movs	r2, #2
 8003b2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2202      	movs	r2, #2
 8003b32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2202      	movs	r2, #2
 8003b3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d003      	beq.n	8003b4c <HAL_TIM_Encoder_Start+0xc4>
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	2b04      	cmp	r3, #4
 8003b48:	d008      	beq.n	8003b5c <HAL_TIM_Encoder_Start+0xd4>
 8003b4a:	e00f      	b.n	8003b6c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2201      	movs	r2, #1
 8003b52:	2100      	movs	r1, #0
 8003b54:	4618      	mov	r0, r3
 8003b56:	f000 fd53 	bl	8004600 <TIM_CCxChannelCmd>
      break;
 8003b5a:	e016      	b.n	8003b8a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2201      	movs	r2, #1
 8003b62:	2104      	movs	r1, #4
 8003b64:	4618      	mov	r0, r3
 8003b66:	f000 fd4b 	bl	8004600 <TIM_CCxChannelCmd>
      break;
 8003b6a:	e00e      	b.n	8003b8a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2201      	movs	r2, #1
 8003b72:	2100      	movs	r1, #0
 8003b74:	4618      	mov	r0, r3
 8003b76:	f000 fd43 	bl	8004600 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	2104      	movs	r1, #4
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 fd3c 	bl	8004600 <TIM_CCxChannelCmd>
      break;
 8003b88:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f042 0201 	orr.w	r2, r2, #1
 8003b98:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d122      	bne.n	8003c00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d11b      	bne.n	8003c00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f06f 0202 	mvn.w	r2, #2
 8003bd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	f003 0303 	and.w	r3, r3, #3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d003      	beq.n	8003bee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 fa6f 	bl	80040ca <HAL_TIM_IC_CaptureCallback>
 8003bec:	e005      	b.n	8003bfa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 fa62 	bl	80040b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 fa71 	bl	80040dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	f003 0304 	and.w	r3, r3, #4
 8003c0a:	2b04      	cmp	r3, #4
 8003c0c:	d122      	bne.n	8003c54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	2b04      	cmp	r3, #4
 8003c1a:	d11b      	bne.n	8003c54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f06f 0204 	mvn.w	r2, #4
 8003c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2202      	movs	r2, #2
 8003c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 fa45 	bl	80040ca <HAL_TIM_IC_CaptureCallback>
 8003c40:	e005      	b.n	8003c4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 fa38 	bl	80040b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 fa47 	bl	80040dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	f003 0308 	and.w	r3, r3, #8
 8003c5e:	2b08      	cmp	r3, #8
 8003c60:	d122      	bne.n	8003ca8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	f003 0308 	and.w	r3, r3, #8
 8003c6c:	2b08      	cmp	r3, #8
 8003c6e:	d11b      	bne.n	8003ca8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f06f 0208 	mvn.w	r2, #8
 8003c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2204      	movs	r2, #4
 8003c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	69db      	ldr	r3, [r3, #28]
 8003c86:	f003 0303 	and.w	r3, r3, #3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 fa1b 	bl	80040ca <HAL_TIM_IC_CaptureCallback>
 8003c94:	e005      	b.n	8003ca2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 fa0e 	bl	80040b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 fa1d 	bl	80040dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	f003 0310 	and.w	r3, r3, #16
 8003cb2:	2b10      	cmp	r3, #16
 8003cb4:	d122      	bne.n	8003cfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	f003 0310 	and.w	r3, r3, #16
 8003cc0:	2b10      	cmp	r3, #16
 8003cc2:	d11b      	bne.n	8003cfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f06f 0210 	mvn.w	r2, #16
 8003ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2208      	movs	r2, #8
 8003cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d003      	beq.n	8003cea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f9f1 	bl	80040ca <HAL_TIM_IC_CaptureCallback>
 8003ce8:	e005      	b.n	8003cf6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 f9e4 	bl	80040b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 f9f3 	bl	80040dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d10e      	bne.n	8003d28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d107      	bne.n	8003d28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f06f 0201 	mvn.w	r2, #1
 8003d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7fd fe16 	bl	8001954 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d32:	2b80      	cmp	r3, #128	; 0x80
 8003d34:	d10e      	bne.n	8003d54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d40:	2b80      	cmp	r3, #128	; 0x80
 8003d42:	d107      	bne.n	8003d54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 fce1 	bl	8004716 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d5e:	2b40      	cmp	r3, #64	; 0x40
 8003d60:	d10e      	bne.n	8003d80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d6c:	2b40      	cmp	r3, #64	; 0x40
 8003d6e:	d107      	bne.n	8003d80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 f9b7 	bl	80040ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	f003 0320 	and.w	r3, r3, #32
 8003d8a:	2b20      	cmp	r3, #32
 8003d8c:	d10e      	bne.n	8003dac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f003 0320 	and.w	r3, r3, #32
 8003d98:	2b20      	cmp	r3, #32
 8003d9a:	d107      	bne.n	8003dac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f06f 0220 	mvn.w	r2, #32
 8003da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 fcac 	bl	8004704 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dac:	bf00      	nop
 8003dae:	3708      	adds	r7, #8
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d101      	bne.n	8003dce <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003dca:	2302      	movs	r3, #2
 8003dcc:	e0ac      	b.n	8003f28 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2b0c      	cmp	r3, #12
 8003dda:	f200 809f 	bhi.w	8003f1c <HAL_TIM_PWM_ConfigChannel+0x168>
 8003dde:	a201      	add	r2, pc, #4	; (adr r2, 8003de4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de4:	08003e19 	.word	0x08003e19
 8003de8:	08003f1d 	.word	0x08003f1d
 8003dec:	08003f1d 	.word	0x08003f1d
 8003df0:	08003f1d 	.word	0x08003f1d
 8003df4:	08003e59 	.word	0x08003e59
 8003df8:	08003f1d 	.word	0x08003f1d
 8003dfc:	08003f1d 	.word	0x08003f1d
 8003e00:	08003f1d 	.word	0x08003f1d
 8003e04:	08003e9b 	.word	0x08003e9b
 8003e08:	08003f1d 	.word	0x08003f1d
 8003e0c:	08003f1d 	.word	0x08003f1d
 8003e10:	08003f1d 	.word	0x08003f1d
 8003e14:	08003edb 	.word	0x08003edb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68b9      	ldr	r1, [r7, #8]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 f9d0 	bl	80041c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	699a      	ldr	r2, [r3, #24]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f042 0208 	orr.w	r2, r2, #8
 8003e32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	699a      	ldr	r2, [r3, #24]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 0204 	bic.w	r2, r2, #4
 8003e42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6999      	ldr	r1, [r3, #24]
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	691a      	ldr	r2, [r3, #16]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	619a      	str	r2, [r3, #24]
      break;
 8003e56:	e062      	b.n	8003f1e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68b9      	ldr	r1, [r7, #8]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 fa16 	bl	8004290 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	699a      	ldr	r2, [r3, #24]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	699a      	ldr	r2, [r3, #24]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6999      	ldr	r1, [r3, #24]
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	021a      	lsls	r2, r3, #8
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	430a      	orrs	r2, r1
 8003e96:	619a      	str	r2, [r3, #24]
      break;
 8003e98:	e041      	b.n	8003f1e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68b9      	ldr	r1, [r7, #8]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f000 fa5f 	bl	8004364 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	69da      	ldr	r2, [r3, #28]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f042 0208 	orr.w	r2, r2, #8
 8003eb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	69da      	ldr	r2, [r3, #28]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 0204 	bic.w	r2, r2, #4
 8003ec4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	69d9      	ldr	r1, [r3, #28]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	691a      	ldr	r2, [r3, #16]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	61da      	str	r2, [r3, #28]
      break;
 8003ed8:	e021      	b.n	8003f1e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68b9      	ldr	r1, [r7, #8]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f000 faa9 	bl	8004438 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	69da      	ldr	r2, [r3, #28]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ef4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	69da      	ldr	r2, [r3, #28]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	69d9      	ldr	r1, [r3, #28]
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	021a      	lsls	r2, r3, #8
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	61da      	str	r2, [r3, #28]
      break;
 8003f1a:	e000      	b.n	8003f1e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003f1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d101      	bne.n	8003f48 <HAL_TIM_ConfigClockSource+0x18>
 8003f44:	2302      	movs	r3, #2
 8003f46:	e0b3      	b.n	80040b0 <HAL_TIM_ConfigClockSource+0x180>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2202      	movs	r2, #2
 8003f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f6e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f80:	d03e      	beq.n	8004000 <HAL_TIM_ConfigClockSource+0xd0>
 8003f82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f86:	f200 8087 	bhi.w	8004098 <HAL_TIM_ConfigClockSource+0x168>
 8003f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f8e:	f000 8085 	beq.w	800409c <HAL_TIM_ConfigClockSource+0x16c>
 8003f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f96:	d87f      	bhi.n	8004098 <HAL_TIM_ConfigClockSource+0x168>
 8003f98:	2b70      	cmp	r3, #112	; 0x70
 8003f9a:	d01a      	beq.n	8003fd2 <HAL_TIM_ConfigClockSource+0xa2>
 8003f9c:	2b70      	cmp	r3, #112	; 0x70
 8003f9e:	d87b      	bhi.n	8004098 <HAL_TIM_ConfigClockSource+0x168>
 8003fa0:	2b60      	cmp	r3, #96	; 0x60
 8003fa2:	d050      	beq.n	8004046 <HAL_TIM_ConfigClockSource+0x116>
 8003fa4:	2b60      	cmp	r3, #96	; 0x60
 8003fa6:	d877      	bhi.n	8004098 <HAL_TIM_ConfigClockSource+0x168>
 8003fa8:	2b50      	cmp	r3, #80	; 0x50
 8003faa:	d03c      	beq.n	8004026 <HAL_TIM_ConfigClockSource+0xf6>
 8003fac:	2b50      	cmp	r3, #80	; 0x50
 8003fae:	d873      	bhi.n	8004098 <HAL_TIM_ConfigClockSource+0x168>
 8003fb0:	2b40      	cmp	r3, #64	; 0x40
 8003fb2:	d058      	beq.n	8004066 <HAL_TIM_ConfigClockSource+0x136>
 8003fb4:	2b40      	cmp	r3, #64	; 0x40
 8003fb6:	d86f      	bhi.n	8004098 <HAL_TIM_ConfigClockSource+0x168>
 8003fb8:	2b30      	cmp	r3, #48	; 0x30
 8003fba:	d064      	beq.n	8004086 <HAL_TIM_ConfigClockSource+0x156>
 8003fbc:	2b30      	cmp	r3, #48	; 0x30
 8003fbe:	d86b      	bhi.n	8004098 <HAL_TIM_ConfigClockSource+0x168>
 8003fc0:	2b20      	cmp	r3, #32
 8003fc2:	d060      	beq.n	8004086 <HAL_TIM_ConfigClockSource+0x156>
 8003fc4:	2b20      	cmp	r3, #32
 8003fc6:	d867      	bhi.n	8004098 <HAL_TIM_ConfigClockSource+0x168>
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d05c      	beq.n	8004086 <HAL_TIM_ConfigClockSource+0x156>
 8003fcc:	2b10      	cmp	r3, #16
 8003fce:	d05a      	beq.n	8004086 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003fd0:	e062      	b.n	8004098 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6818      	ldr	r0, [r3, #0]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	6899      	ldr	r1, [r3, #8]
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	f000 faee 	bl	80045c2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ff4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	609a      	str	r2, [r3, #8]
      break;
 8003ffe:	e04e      	b.n	800409e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6818      	ldr	r0, [r3, #0]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	6899      	ldr	r1, [r3, #8]
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	f000 fad7 	bl	80045c2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004022:	609a      	str	r2, [r3, #8]
      break;
 8004024:	e03b      	b.n	800409e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6818      	ldr	r0, [r3, #0]
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	6859      	ldr	r1, [r3, #4]
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	461a      	mov	r2, r3
 8004034:	f000 fa4e 	bl	80044d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2150      	movs	r1, #80	; 0x50
 800403e:	4618      	mov	r0, r3
 8004040:	f000 faa5 	bl	800458e <TIM_ITRx_SetConfig>
      break;
 8004044:	e02b      	b.n	800409e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6818      	ldr	r0, [r3, #0]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	6859      	ldr	r1, [r3, #4]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	461a      	mov	r2, r3
 8004054:	f000 fa6c 	bl	8004530 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2160      	movs	r1, #96	; 0x60
 800405e:	4618      	mov	r0, r3
 8004060:	f000 fa95 	bl	800458e <TIM_ITRx_SetConfig>
      break;
 8004064:	e01b      	b.n	800409e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6818      	ldr	r0, [r3, #0]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	6859      	ldr	r1, [r3, #4]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	461a      	mov	r2, r3
 8004074:	f000 fa2e 	bl	80044d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2140      	movs	r1, #64	; 0x40
 800407e:	4618      	mov	r0, r3
 8004080:	f000 fa85 	bl	800458e <TIM_ITRx_SetConfig>
      break;
 8004084:	e00b      	b.n	800409e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4619      	mov	r1, r3
 8004090:	4610      	mov	r0, r2
 8004092:	f000 fa7c 	bl	800458e <TIM_ITRx_SetConfig>
        break;
 8004096:	e002      	b.n	800409e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004098:	bf00      	nop
 800409a:	e000      	b.n	800409e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800409c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3710      	adds	r7, #16
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bc80      	pop	{r7}
 80040c8:	4770      	bx	lr

080040ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b083      	sub	sp, #12
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040d2:	bf00      	nop
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bc80      	pop	{r7}
 80040da:	4770      	bx	lr

080040dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bc80      	pop	{r7}
 80040ec:	4770      	bx	lr

080040ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040ee:	b480      	push	{r7}
 80040f0:	b083      	sub	sp, #12
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040f6:	bf00      	nop
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bc80      	pop	{r7}
 80040fe:	4770      	bx	lr

08004100 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a29      	ldr	r2, [pc, #164]	; (80041b8 <TIM_Base_SetConfig+0xb8>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d00b      	beq.n	8004130 <TIM_Base_SetConfig+0x30>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800411e:	d007      	beq.n	8004130 <TIM_Base_SetConfig+0x30>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a26      	ldr	r2, [pc, #152]	; (80041bc <TIM_Base_SetConfig+0xbc>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d003      	beq.n	8004130 <TIM_Base_SetConfig+0x30>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a25      	ldr	r2, [pc, #148]	; (80041c0 <TIM_Base_SetConfig+0xc0>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d108      	bne.n	8004142 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004136:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	4313      	orrs	r3, r2
 8004140:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a1c      	ldr	r2, [pc, #112]	; (80041b8 <TIM_Base_SetConfig+0xb8>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d00b      	beq.n	8004162 <TIM_Base_SetConfig+0x62>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004150:	d007      	beq.n	8004162 <TIM_Base_SetConfig+0x62>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a19      	ldr	r2, [pc, #100]	; (80041bc <TIM_Base_SetConfig+0xbc>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d003      	beq.n	8004162 <TIM_Base_SetConfig+0x62>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a18      	ldr	r2, [pc, #96]	; (80041c0 <TIM_Base_SetConfig+0xc0>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d108      	bne.n	8004174 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004168:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	4313      	orrs	r3, r2
 8004172:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	4313      	orrs	r3, r2
 8004180:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	689a      	ldr	r2, [r3, #8]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a07      	ldr	r2, [pc, #28]	; (80041b8 <TIM_Base_SetConfig+0xb8>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d103      	bne.n	80041a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	691a      	ldr	r2, [r3, #16]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	615a      	str	r2, [r3, #20]
}
 80041ae:	bf00      	nop
 80041b0:	3714      	adds	r7, #20
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bc80      	pop	{r7}
 80041b6:	4770      	bx	lr
 80041b8:	40012c00 	.word	0x40012c00
 80041bc:	40000400 	.word	0x40000400
 80041c0:	40000800 	.word	0x40000800

080041c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b087      	sub	sp, #28
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	f023 0201 	bic.w	r2, r3, #1
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f023 0303 	bic.w	r3, r3, #3
 80041fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	4313      	orrs	r3, r2
 8004204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f023 0302 	bic.w	r3, r3, #2
 800420c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	4313      	orrs	r3, r2
 8004216:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a1c      	ldr	r2, [pc, #112]	; (800428c <TIM_OC1_SetConfig+0xc8>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d10c      	bne.n	800423a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	f023 0308 	bic.w	r3, r3, #8
 8004226:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	4313      	orrs	r3, r2
 8004230:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	f023 0304 	bic.w	r3, r3, #4
 8004238:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a13      	ldr	r2, [pc, #76]	; (800428c <TIM_OC1_SetConfig+0xc8>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d111      	bne.n	8004266 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004248:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004250:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	4313      	orrs	r3, r2
 800425a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	4313      	orrs	r3, r2
 8004264:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	621a      	str	r2, [r3, #32]
}
 8004280:	bf00      	nop
 8004282:	371c      	adds	r7, #28
 8004284:	46bd      	mov	sp, r7
 8004286:	bc80      	pop	{r7}
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	40012c00 	.word	0x40012c00

08004290 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004290:	b480      	push	{r7}
 8004292:	b087      	sub	sp, #28
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	f023 0210 	bic.w	r2, r3, #16
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	021b      	lsls	r3, r3, #8
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	f023 0320 	bic.w	r3, r3, #32
 80042da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	011b      	lsls	r3, r3, #4
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a1d      	ldr	r2, [pc, #116]	; (8004360 <TIM_OC2_SetConfig+0xd0>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d10d      	bne.n	800430c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	011b      	lsls	r3, r3, #4
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	4313      	orrs	r3, r2
 8004302:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800430a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a14      	ldr	r2, [pc, #80]	; (8004360 <TIM_OC2_SetConfig+0xd0>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d113      	bne.n	800433c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800431a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004322:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	695b      	ldr	r3, [r3, #20]
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	4313      	orrs	r3, r2
 800432e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	4313      	orrs	r3, r2
 800433a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	697a      	ldr	r2, [r7, #20]
 8004354:	621a      	str	r2, [r3, #32]
}
 8004356:	bf00      	nop
 8004358:	371c      	adds	r7, #28
 800435a:	46bd      	mov	sp, r7
 800435c:	bc80      	pop	{r7}
 800435e:	4770      	bx	lr
 8004360:	40012c00 	.word	0x40012c00

08004364 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004364:	b480      	push	{r7}
 8004366:	b087      	sub	sp, #28
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f023 0303 	bic.w	r3, r3, #3
 800439a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	021b      	lsls	r3, r3, #8
 80043b4:	697a      	ldr	r2, [r7, #20]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a1d      	ldr	r2, [pc, #116]	; (8004434 <TIM_OC3_SetConfig+0xd0>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d10d      	bne.n	80043de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	021b      	lsls	r3, r3, #8
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a14      	ldr	r2, [pc, #80]	; (8004434 <TIM_OC3_SetConfig+0xd0>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d113      	bne.n	800440e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	011b      	lsls	r3, r3, #4
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	4313      	orrs	r3, r2
 8004400:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	011b      	lsls	r3, r3, #4
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	4313      	orrs	r3, r2
 800440c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	621a      	str	r2, [r3, #32]
}
 8004428:	bf00      	nop
 800442a:	371c      	adds	r7, #28
 800442c:	46bd      	mov	sp, r7
 800442e:	bc80      	pop	{r7}
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	40012c00 	.word	0x40012c00

08004438 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004438:	b480      	push	{r7}
 800443a:	b087      	sub	sp, #28
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800446e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	021b      	lsls	r3, r3, #8
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	4313      	orrs	r3, r2
 800447a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004482:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	031b      	lsls	r3, r3, #12
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	4313      	orrs	r3, r2
 800448e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a0f      	ldr	r2, [pc, #60]	; (80044d0 <TIM_OC4_SetConfig+0x98>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d109      	bne.n	80044ac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800449e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	019b      	lsls	r3, r3, #6
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	621a      	str	r2, [r3, #32]
}
 80044c6:	bf00      	nop
 80044c8:	371c      	adds	r7, #28
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bc80      	pop	{r7}
 80044ce:	4770      	bx	lr
 80044d0:	40012c00 	.word	0x40012c00

080044d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b087      	sub	sp, #28
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	f023 0201 	bic.w	r2, r3, #1
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	011b      	lsls	r3, r3, #4
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	4313      	orrs	r3, r2
 8004508:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f023 030a 	bic.w	r3, r3, #10
 8004510:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	4313      	orrs	r3, r2
 8004518:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	621a      	str	r2, [r3, #32]
}
 8004526:	bf00      	nop
 8004528:	371c      	adds	r7, #28
 800452a:	46bd      	mov	sp, r7
 800452c:	bc80      	pop	{r7}
 800452e:	4770      	bx	lr

08004530 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004530:	b480      	push	{r7}
 8004532:	b087      	sub	sp, #28
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	f023 0210 	bic.w	r2, r3, #16
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800455a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	031b      	lsls	r3, r3, #12
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	4313      	orrs	r3, r2
 8004564:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800456c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	011b      	lsls	r3, r3, #4
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	4313      	orrs	r3, r2
 8004576:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	621a      	str	r2, [r3, #32]
}
 8004584:	bf00      	nop
 8004586:	371c      	adds	r7, #28
 8004588:	46bd      	mov	sp, r7
 800458a:	bc80      	pop	{r7}
 800458c:	4770      	bx	lr

0800458e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800458e:	b480      	push	{r7}
 8004590:	b085      	sub	sp, #20
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
 8004596:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	f043 0307 	orr.w	r3, r3, #7
 80045b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	609a      	str	r2, [r3, #8]
}
 80045b8:	bf00      	nop
 80045ba:	3714      	adds	r7, #20
 80045bc:	46bd      	mov	sp, r7
 80045be:	bc80      	pop	{r7}
 80045c0:	4770      	bx	lr

080045c2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045c2:	b480      	push	{r7}
 80045c4:	b087      	sub	sp, #28
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	60f8      	str	r0, [r7, #12]
 80045ca:	60b9      	str	r1, [r7, #8]
 80045cc:	607a      	str	r2, [r7, #4]
 80045ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045dc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	021a      	lsls	r2, r3, #8
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	431a      	orrs	r2, r3
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	609a      	str	r2, [r3, #8]
}
 80045f6:	bf00      	nop
 80045f8:	371c      	adds	r7, #28
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bc80      	pop	{r7}
 80045fe:	4770      	bx	lr

08004600 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004600:	b480      	push	{r7}
 8004602:	b087      	sub	sp, #28
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	f003 031f 	and.w	r3, r3, #31
 8004612:	2201      	movs	r2, #1
 8004614:	fa02 f303 	lsl.w	r3, r2, r3
 8004618:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6a1a      	ldr	r2, [r3, #32]
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	43db      	mvns	r3, r3
 8004622:	401a      	ands	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6a1a      	ldr	r2, [r3, #32]
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	f003 031f 	and.w	r3, r3, #31
 8004632:	6879      	ldr	r1, [r7, #4]
 8004634:	fa01 f303 	lsl.w	r3, r1, r3
 8004638:	431a      	orrs	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	621a      	str	r2, [r3, #32]
}
 800463e:	bf00      	nop
 8004640:	371c      	adds	r7, #28
 8004642:	46bd      	mov	sp, r7
 8004644:	bc80      	pop	{r7}
 8004646:	4770      	bx	lr

08004648 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004658:	2b01      	cmp	r3, #1
 800465a:	d101      	bne.n	8004660 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800465c:	2302      	movs	r3, #2
 800465e:	e046      	b.n	80046ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2202      	movs	r2, #2
 800466c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004686:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	4313      	orrs	r3, r2
 8004690:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a16      	ldr	r2, [pc, #88]	; (80046f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d00e      	beq.n	80046c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ac:	d009      	beq.n	80046c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a12      	ldr	r2, [pc, #72]	; (80046fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d004      	beq.n	80046c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a10      	ldr	r2, [pc, #64]	; (8004700 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d10c      	bne.n	80046dc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	68ba      	ldr	r2, [r7, #8]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3714      	adds	r7, #20
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bc80      	pop	{r7}
 80046f6:	4770      	bx	lr
 80046f8:	40012c00 	.word	0x40012c00
 80046fc:	40000400 	.word	0x40000400
 8004700:	40000800 	.word	0x40000800

08004704 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	bc80      	pop	{r7}
 8004714:	4770      	bx	lr

08004716 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004716:	b480      	push	{r7}
 8004718:	b083      	sub	sp, #12
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800471e:	bf00      	nop
 8004720:	370c      	adds	r7, #12
 8004722:	46bd      	mov	sp, r7
 8004724:	bc80      	pop	{r7}
 8004726:	4770      	bx	lr

08004728 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e03f      	b.n	80047ba <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d106      	bne.n	8004754 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7fd ffa8 	bl	80026a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2224      	movs	r2, #36	; 0x24
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800476a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 f96d 	bl	8004a4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	691a      	ldr	r2, [r3, #16]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004780:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	695a      	ldr	r2, [r3, #20]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004790:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68da      	ldr	r2, [r3, #12]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2220      	movs	r2, #32
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2220      	movs	r2, #32
 80047b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3708      	adds	r7, #8
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b08a      	sub	sp, #40	; 0x28
 80047c6:	af02      	add	r7, sp, #8
 80047c8:	60f8      	str	r0, [r7, #12]
 80047ca:	60b9      	str	r1, [r7, #8]
 80047cc:	603b      	str	r3, [r7, #0]
 80047ce:	4613      	mov	r3, r2
 80047d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047d2:	2300      	movs	r3, #0
 80047d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b20      	cmp	r3, #32
 80047e0:	d17c      	bne.n	80048dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d002      	beq.n	80047ee <HAL_UART_Transmit+0x2c>
 80047e8:	88fb      	ldrh	r3, [r7, #6]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d101      	bne.n	80047f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e075      	b.n	80048de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d101      	bne.n	8004800 <HAL_UART_Transmit+0x3e>
 80047fc:	2302      	movs	r3, #2
 80047fe:	e06e      	b.n	80048de <HAL_UART_Transmit+0x11c>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2221      	movs	r2, #33	; 0x21
 8004812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004816:	f7fe f80f 	bl	8002838 <HAL_GetTick>
 800481a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	88fa      	ldrh	r2, [r7, #6]
 8004820:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	88fa      	ldrh	r2, [r7, #6]
 8004826:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004830:	d108      	bne.n	8004844 <HAL_UART_Transmit+0x82>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d104      	bne.n	8004844 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800483a:	2300      	movs	r3, #0
 800483c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	61bb      	str	r3, [r7, #24]
 8004842:	e003      	b.n	800484c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004848:	2300      	movs	r3, #0
 800484a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004854:	e02a      	b.n	80048ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	9300      	str	r3, [sp, #0]
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2200      	movs	r2, #0
 800485e:	2180      	movs	r1, #128	; 0x80
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f000 f870 	bl	8004946 <UART_WaitOnFlagUntilTimeout>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d001      	beq.n	8004870 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e036      	b.n	80048de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10b      	bne.n	800488e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	881b      	ldrh	r3, [r3, #0]
 800487a:	461a      	mov	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004884:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	3302      	adds	r3, #2
 800488a:	61bb      	str	r3, [r7, #24]
 800488c:	e007      	b.n	800489e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	781a      	ldrb	r2, [r3, #0]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	3301      	adds	r3, #1
 800489c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	3b01      	subs	r3, #1
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1cf      	bne.n	8004856 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	2200      	movs	r2, #0
 80048be:	2140      	movs	r1, #64	; 0x40
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 f840 	bl	8004946 <UART_WaitOnFlagUntilTimeout>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e006      	b.n	80048de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2220      	movs	r2, #32
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80048d8:	2300      	movs	r3, #0
 80048da:	e000      	b.n	80048de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80048dc:	2302      	movs	r3, #2
  }
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3720      	adds	r7, #32
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b084      	sub	sp, #16
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	60f8      	str	r0, [r7, #12]
 80048ee:	60b9      	str	r1, [r7, #8]
 80048f0:	4613      	mov	r3, r2
 80048f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	2b20      	cmp	r3, #32
 80048fe:	d11d      	bne.n	800493c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d002      	beq.n	800490c <HAL_UART_Receive_IT+0x26>
 8004906:	88fb      	ldrh	r3, [r7, #6]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d101      	bne.n	8004910 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e016      	b.n	800493e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004916:	2b01      	cmp	r3, #1
 8004918:	d101      	bne.n	800491e <HAL_UART_Receive_IT+0x38>
 800491a:	2302      	movs	r3, #2
 800491c:	e00f      	b.n	800493e <HAL_UART_Receive_IT+0x58>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800492c:	88fb      	ldrh	r3, [r7, #6]
 800492e:	461a      	mov	r2, r3
 8004930:	68b9      	ldr	r1, [r7, #8]
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f000 f851 	bl	80049da <UART_Start_Receive_IT>
 8004938:	4603      	mov	r3, r0
 800493a:	e000      	b.n	800493e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800493c:	2302      	movs	r3, #2
  }
}
 800493e:	4618      	mov	r0, r3
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b084      	sub	sp, #16
 800494a:	af00      	add	r7, sp, #0
 800494c:	60f8      	str	r0, [r7, #12]
 800494e:	60b9      	str	r1, [r7, #8]
 8004950:	603b      	str	r3, [r7, #0]
 8004952:	4613      	mov	r3, r2
 8004954:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004956:	e02c      	b.n	80049b2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800495e:	d028      	beq.n	80049b2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d007      	beq.n	8004976 <UART_WaitOnFlagUntilTimeout+0x30>
 8004966:	f7fd ff67 	bl	8002838 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	429a      	cmp	r2, r3
 8004974:	d21d      	bcs.n	80049b2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68da      	ldr	r2, [r3, #12]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004984:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	695a      	ldr	r2, [r3, #20]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f022 0201 	bic.w	r2, r2, #1
 8004994:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2220      	movs	r2, #32
 800499a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2220      	movs	r2, #32
 80049a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e00f      	b.n	80049d2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	4013      	ands	r3, r2
 80049bc:	68ba      	ldr	r2, [r7, #8]
 80049be:	429a      	cmp	r2, r3
 80049c0:	bf0c      	ite	eq
 80049c2:	2301      	moveq	r3, #1
 80049c4:	2300      	movne	r3, #0
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	461a      	mov	r2, r3
 80049ca:	79fb      	ldrb	r3, [r7, #7]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d0c3      	beq.n	8004958 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049da:	b480      	push	{r7}
 80049dc:	b085      	sub	sp, #20
 80049de:	af00      	add	r7, sp, #0
 80049e0:	60f8      	str	r0, [r7, #12]
 80049e2:	60b9      	str	r1, [r7, #8]
 80049e4:	4613      	mov	r3, r2
 80049e6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	88fa      	ldrh	r2, [r7, #6]
 80049f2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	88fa      	ldrh	r2, [r7, #6]
 80049f8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2222      	movs	r2, #34	; 0x22
 8004a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68da      	ldr	r2, [r3, #12]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a1e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	695a      	ldr	r2, [r3, #20]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f042 0201 	orr.w	r2, r2, #1
 8004a2e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68da      	ldr	r2, [r3, #12]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f042 0220 	orr.w	r2, r2, #32
 8004a3e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3714      	adds	r7, #20
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bc80      	pop	{r7}
 8004a4a:	4770      	bx	lr

08004a4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68da      	ldr	r2, [r3, #12]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	689a      	ldr	r2, [r3, #8]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	431a      	orrs	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004a86:	f023 030c 	bic.w	r3, r3, #12
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	6812      	ldr	r2, [r2, #0]
 8004a8e:	68b9      	ldr	r1, [r7, #8]
 8004a90:	430b      	orrs	r3, r1
 8004a92:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699a      	ldr	r2, [r3, #24]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a2c      	ldr	r2, [pc, #176]	; (8004b60 <UART_SetConfig+0x114>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d103      	bne.n	8004abc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ab4:	f7fe fd80 	bl	80035b8 <HAL_RCC_GetPCLK2Freq>
 8004ab8:	60f8      	str	r0, [r7, #12]
 8004aba:	e002      	b.n	8004ac2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004abc:	f7fe fd68 	bl	8003590 <HAL_RCC_GetPCLK1Freq>
 8004ac0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4413      	add	r3, r2
 8004aca:	009a      	lsls	r2, r3, #2
 8004acc:	441a      	add	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad8:	4a22      	ldr	r2, [pc, #136]	; (8004b64 <UART_SetConfig+0x118>)
 8004ada:	fba2 2303 	umull	r2, r3, r2, r3
 8004ade:	095b      	lsrs	r3, r3, #5
 8004ae0:	0119      	lsls	r1, r3, #4
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	4413      	add	r3, r2
 8004aea:	009a      	lsls	r2, r3, #2
 8004aec:	441a      	add	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004af8:	4b1a      	ldr	r3, [pc, #104]	; (8004b64 <UART_SetConfig+0x118>)
 8004afa:	fba3 0302 	umull	r0, r3, r3, r2
 8004afe:	095b      	lsrs	r3, r3, #5
 8004b00:	2064      	movs	r0, #100	; 0x64
 8004b02:	fb00 f303 	mul.w	r3, r0, r3
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	011b      	lsls	r3, r3, #4
 8004b0a:	3332      	adds	r3, #50	; 0x32
 8004b0c:	4a15      	ldr	r2, [pc, #84]	; (8004b64 <UART_SetConfig+0x118>)
 8004b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b12:	095b      	lsrs	r3, r3, #5
 8004b14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b18:	4419      	add	r1, r3
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4413      	add	r3, r2
 8004b22:	009a      	lsls	r2, r3, #2
 8004b24:	441a      	add	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b30:	4b0c      	ldr	r3, [pc, #48]	; (8004b64 <UART_SetConfig+0x118>)
 8004b32:	fba3 0302 	umull	r0, r3, r3, r2
 8004b36:	095b      	lsrs	r3, r3, #5
 8004b38:	2064      	movs	r0, #100	; 0x64
 8004b3a:	fb00 f303 	mul.w	r3, r0, r3
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	011b      	lsls	r3, r3, #4
 8004b42:	3332      	adds	r3, #50	; 0x32
 8004b44:	4a07      	ldr	r2, [pc, #28]	; (8004b64 <UART_SetConfig+0x118>)
 8004b46:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4a:	095b      	lsrs	r3, r3, #5
 8004b4c:	f003 020f 	and.w	r2, r3, #15
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	440a      	add	r2, r1
 8004b56:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004b58:	bf00      	nop
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	40013800 	.word	0x40013800
 8004b64:	51eb851f 	.word	0x51eb851f

08004b68 <__errno>:
 8004b68:	4b01      	ldr	r3, [pc, #4]	; (8004b70 <__errno+0x8>)
 8004b6a:	6818      	ldr	r0, [r3, #0]
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	20000018 	.word	0x20000018

08004b74 <__libc_init_array>:
 8004b74:	b570      	push	{r4, r5, r6, lr}
 8004b76:	2600      	movs	r6, #0
 8004b78:	4d0c      	ldr	r5, [pc, #48]	; (8004bac <__libc_init_array+0x38>)
 8004b7a:	4c0d      	ldr	r4, [pc, #52]	; (8004bb0 <__libc_init_array+0x3c>)
 8004b7c:	1b64      	subs	r4, r4, r5
 8004b7e:	10a4      	asrs	r4, r4, #2
 8004b80:	42a6      	cmp	r6, r4
 8004b82:	d109      	bne.n	8004b98 <__libc_init_array+0x24>
 8004b84:	f001 fb8e 	bl	80062a4 <_init>
 8004b88:	2600      	movs	r6, #0
 8004b8a:	4d0a      	ldr	r5, [pc, #40]	; (8004bb4 <__libc_init_array+0x40>)
 8004b8c:	4c0a      	ldr	r4, [pc, #40]	; (8004bb8 <__libc_init_array+0x44>)
 8004b8e:	1b64      	subs	r4, r4, r5
 8004b90:	10a4      	asrs	r4, r4, #2
 8004b92:	42a6      	cmp	r6, r4
 8004b94:	d105      	bne.n	8004ba2 <__libc_init_array+0x2e>
 8004b96:	bd70      	pop	{r4, r5, r6, pc}
 8004b98:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b9c:	4798      	blx	r3
 8004b9e:	3601      	adds	r6, #1
 8004ba0:	e7ee      	b.n	8004b80 <__libc_init_array+0xc>
 8004ba2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ba6:	4798      	blx	r3
 8004ba8:	3601      	adds	r6, #1
 8004baa:	e7f2      	b.n	8004b92 <__libc_init_array+0x1e>
 8004bac:	08006380 	.word	0x08006380
 8004bb0:	08006380 	.word	0x08006380
 8004bb4:	08006380 	.word	0x08006380
 8004bb8:	08006384 	.word	0x08006384

08004bbc <malloc>:
 8004bbc:	4b02      	ldr	r3, [pc, #8]	; (8004bc8 <malloc+0xc>)
 8004bbe:	4601      	mov	r1, r0
 8004bc0:	6818      	ldr	r0, [r3, #0]
 8004bc2:	f000 b889 	b.w	8004cd8 <_malloc_r>
 8004bc6:	bf00      	nop
 8004bc8:	20000018 	.word	0x20000018

08004bcc <free>:
 8004bcc:	4b02      	ldr	r3, [pc, #8]	; (8004bd8 <free+0xc>)
 8004bce:	4601      	mov	r1, r0
 8004bd0:	6818      	ldr	r0, [r3, #0]
 8004bd2:	f000 b819 	b.w	8004c08 <_free_r>
 8004bd6:	bf00      	nop
 8004bd8:	20000018 	.word	0x20000018

08004bdc <memcpy>:
 8004bdc:	440a      	add	r2, r1
 8004bde:	4291      	cmp	r1, r2
 8004be0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004be4:	d100      	bne.n	8004be8 <memcpy+0xc>
 8004be6:	4770      	bx	lr
 8004be8:	b510      	push	{r4, lr}
 8004bea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bee:	4291      	cmp	r1, r2
 8004bf0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bf4:	d1f9      	bne.n	8004bea <memcpy+0xe>
 8004bf6:	bd10      	pop	{r4, pc}

08004bf8 <memset>:
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	4402      	add	r2, r0
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d100      	bne.n	8004c02 <memset+0xa>
 8004c00:	4770      	bx	lr
 8004c02:	f803 1b01 	strb.w	r1, [r3], #1
 8004c06:	e7f9      	b.n	8004bfc <memset+0x4>

08004c08 <_free_r>:
 8004c08:	b538      	push	{r3, r4, r5, lr}
 8004c0a:	4605      	mov	r5, r0
 8004c0c:	2900      	cmp	r1, #0
 8004c0e:	d040      	beq.n	8004c92 <_free_r+0x8a>
 8004c10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c14:	1f0c      	subs	r4, r1, #4
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	bfb8      	it	lt
 8004c1a:	18e4      	addlt	r4, r4, r3
 8004c1c:	f000 f900 	bl	8004e20 <__malloc_lock>
 8004c20:	4a1c      	ldr	r2, [pc, #112]	; (8004c94 <_free_r+0x8c>)
 8004c22:	6813      	ldr	r3, [r2, #0]
 8004c24:	b933      	cbnz	r3, 8004c34 <_free_r+0x2c>
 8004c26:	6063      	str	r3, [r4, #4]
 8004c28:	6014      	str	r4, [r2, #0]
 8004c2a:	4628      	mov	r0, r5
 8004c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c30:	f000 b8fc 	b.w	8004e2c <__malloc_unlock>
 8004c34:	42a3      	cmp	r3, r4
 8004c36:	d908      	bls.n	8004c4a <_free_r+0x42>
 8004c38:	6820      	ldr	r0, [r4, #0]
 8004c3a:	1821      	adds	r1, r4, r0
 8004c3c:	428b      	cmp	r3, r1
 8004c3e:	bf01      	itttt	eq
 8004c40:	6819      	ldreq	r1, [r3, #0]
 8004c42:	685b      	ldreq	r3, [r3, #4]
 8004c44:	1809      	addeq	r1, r1, r0
 8004c46:	6021      	streq	r1, [r4, #0]
 8004c48:	e7ed      	b.n	8004c26 <_free_r+0x1e>
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	b10b      	cbz	r3, 8004c54 <_free_r+0x4c>
 8004c50:	42a3      	cmp	r3, r4
 8004c52:	d9fa      	bls.n	8004c4a <_free_r+0x42>
 8004c54:	6811      	ldr	r1, [r2, #0]
 8004c56:	1850      	adds	r0, r2, r1
 8004c58:	42a0      	cmp	r0, r4
 8004c5a:	d10b      	bne.n	8004c74 <_free_r+0x6c>
 8004c5c:	6820      	ldr	r0, [r4, #0]
 8004c5e:	4401      	add	r1, r0
 8004c60:	1850      	adds	r0, r2, r1
 8004c62:	4283      	cmp	r3, r0
 8004c64:	6011      	str	r1, [r2, #0]
 8004c66:	d1e0      	bne.n	8004c2a <_free_r+0x22>
 8004c68:	6818      	ldr	r0, [r3, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	4401      	add	r1, r0
 8004c6e:	6011      	str	r1, [r2, #0]
 8004c70:	6053      	str	r3, [r2, #4]
 8004c72:	e7da      	b.n	8004c2a <_free_r+0x22>
 8004c74:	d902      	bls.n	8004c7c <_free_r+0x74>
 8004c76:	230c      	movs	r3, #12
 8004c78:	602b      	str	r3, [r5, #0]
 8004c7a:	e7d6      	b.n	8004c2a <_free_r+0x22>
 8004c7c:	6820      	ldr	r0, [r4, #0]
 8004c7e:	1821      	adds	r1, r4, r0
 8004c80:	428b      	cmp	r3, r1
 8004c82:	bf01      	itttt	eq
 8004c84:	6819      	ldreq	r1, [r3, #0]
 8004c86:	685b      	ldreq	r3, [r3, #4]
 8004c88:	1809      	addeq	r1, r1, r0
 8004c8a:	6021      	streq	r1, [r4, #0]
 8004c8c:	6063      	str	r3, [r4, #4]
 8004c8e:	6054      	str	r4, [r2, #4]
 8004c90:	e7cb      	b.n	8004c2a <_free_r+0x22>
 8004c92:	bd38      	pop	{r3, r4, r5, pc}
 8004c94:	20000bb8 	.word	0x20000bb8

08004c98 <sbrk_aligned>:
 8004c98:	b570      	push	{r4, r5, r6, lr}
 8004c9a:	4e0e      	ldr	r6, [pc, #56]	; (8004cd4 <sbrk_aligned+0x3c>)
 8004c9c:	460c      	mov	r4, r1
 8004c9e:	6831      	ldr	r1, [r6, #0]
 8004ca0:	4605      	mov	r5, r0
 8004ca2:	b911      	cbnz	r1, 8004caa <sbrk_aligned+0x12>
 8004ca4:	f000 f88c 	bl	8004dc0 <_sbrk_r>
 8004ca8:	6030      	str	r0, [r6, #0]
 8004caa:	4621      	mov	r1, r4
 8004cac:	4628      	mov	r0, r5
 8004cae:	f000 f887 	bl	8004dc0 <_sbrk_r>
 8004cb2:	1c43      	adds	r3, r0, #1
 8004cb4:	d00a      	beq.n	8004ccc <sbrk_aligned+0x34>
 8004cb6:	1cc4      	adds	r4, r0, #3
 8004cb8:	f024 0403 	bic.w	r4, r4, #3
 8004cbc:	42a0      	cmp	r0, r4
 8004cbe:	d007      	beq.n	8004cd0 <sbrk_aligned+0x38>
 8004cc0:	1a21      	subs	r1, r4, r0
 8004cc2:	4628      	mov	r0, r5
 8004cc4:	f000 f87c 	bl	8004dc0 <_sbrk_r>
 8004cc8:	3001      	adds	r0, #1
 8004cca:	d101      	bne.n	8004cd0 <sbrk_aligned+0x38>
 8004ccc:	f04f 34ff 	mov.w	r4, #4294967295
 8004cd0:	4620      	mov	r0, r4
 8004cd2:	bd70      	pop	{r4, r5, r6, pc}
 8004cd4:	20000bbc 	.word	0x20000bbc

08004cd8 <_malloc_r>:
 8004cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cdc:	1ccd      	adds	r5, r1, #3
 8004cde:	f025 0503 	bic.w	r5, r5, #3
 8004ce2:	3508      	adds	r5, #8
 8004ce4:	2d0c      	cmp	r5, #12
 8004ce6:	bf38      	it	cc
 8004ce8:	250c      	movcc	r5, #12
 8004cea:	2d00      	cmp	r5, #0
 8004cec:	4607      	mov	r7, r0
 8004cee:	db01      	blt.n	8004cf4 <_malloc_r+0x1c>
 8004cf0:	42a9      	cmp	r1, r5
 8004cf2:	d905      	bls.n	8004d00 <_malloc_r+0x28>
 8004cf4:	230c      	movs	r3, #12
 8004cf6:	2600      	movs	r6, #0
 8004cf8:	603b      	str	r3, [r7, #0]
 8004cfa:	4630      	mov	r0, r6
 8004cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d00:	4e2e      	ldr	r6, [pc, #184]	; (8004dbc <_malloc_r+0xe4>)
 8004d02:	f000 f88d 	bl	8004e20 <__malloc_lock>
 8004d06:	6833      	ldr	r3, [r6, #0]
 8004d08:	461c      	mov	r4, r3
 8004d0a:	bb34      	cbnz	r4, 8004d5a <_malloc_r+0x82>
 8004d0c:	4629      	mov	r1, r5
 8004d0e:	4638      	mov	r0, r7
 8004d10:	f7ff ffc2 	bl	8004c98 <sbrk_aligned>
 8004d14:	1c43      	adds	r3, r0, #1
 8004d16:	4604      	mov	r4, r0
 8004d18:	d14d      	bne.n	8004db6 <_malloc_r+0xde>
 8004d1a:	6834      	ldr	r4, [r6, #0]
 8004d1c:	4626      	mov	r6, r4
 8004d1e:	2e00      	cmp	r6, #0
 8004d20:	d140      	bne.n	8004da4 <_malloc_r+0xcc>
 8004d22:	6823      	ldr	r3, [r4, #0]
 8004d24:	4631      	mov	r1, r6
 8004d26:	4638      	mov	r0, r7
 8004d28:	eb04 0803 	add.w	r8, r4, r3
 8004d2c:	f000 f848 	bl	8004dc0 <_sbrk_r>
 8004d30:	4580      	cmp	r8, r0
 8004d32:	d13a      	bne.n	8004daa <_malloc_r+0xd2>
 8004d34:	6821      	ldr	r1, [r4, #0]
 8004d36:	3503      	adds	r5, #3
 8004d38:	1a6d      	subs	r5, r5, r1
 8004d3a:	f025 0503 	bic.w	r5, r5, #3
 8004d3e:	3508      	adds	r5, #8
 8004d40:	2d0c      	cmp	r5, #12
 8004d42:	bf38      	it	cc
 8004d44:	250c      	movcc	r5, #12
 8004d46:	4638      	mov	r0, r7
 8004d48:	4629      	mov	r1, r5
 8004d4a:	f7ff ffa5 	bl	8004c98 <sbrk_aligned>
 8004d4e:	3001      	adds	r0, #1
 8004d50:	d02b      	beq.n	8004daa <_malloc_r+0xd2>
 8004d52:	6823      	ldr	r3, [r4, #0]
 8004d54:	442b      	add	r3, r5
 8004d56:	6023      	str	r3, [r4, #0]
 8004d58:	e00e      	b.n	8004d78 <_malloc_r+0xa0>
 8004d5a:	6822      	ldr	r2, [r4, #0]
 8004d5c:	1b52      	subs	r2, r2, r5
 8004d5e:	d41e      	bmi.n	8004d9e <_malloc_r+0xc6>
 8004d60:	2a0b      	cmp	r2, #11
 8004d62:	d916      	bls.n	8004d92 <_malloc_r+0xba>
 8004d64:	1961      	adds	r1, r4, r5
 8004d66:	42a3      	cmp	r3, r4
 8004d68:	6025      	str	r5, [r4, #0]
 8004d6a:	bf18      	it	ne
 8004d6c:	6059      	strne	r1, [r3, #4]
 8004d6e:	6863      	ldr	r3, [r4, #4]
 8004d70:	bf08      	it	eq
 8004d72:	6031      	streq	r1, [r6, #0]
 8004d74:	5162      	str	r2, [r4, r5]
 8004d76:	604b      	str	r3, [r1, #4]
 8004d78:	4638      	mov	r0, r7
 8004d7a:	f104 060b 	add.w	r6, r4, #11
 8004d7e:	f000 f855 	bl	8004e2c <__malloc_unlock>
 8004d82:	f026 0607 	bic.w	r6, r6, #7
 8004d86:	1d23      	adds	r3, r4, #4
 8004d88:	1af2      	subs	r2, r6, r3
 8004d8a:	d0b6      	beq.n	8004cfa <_malloc_r+0x22>
 8004d8c:	1b9b      	subs	r3, r3, r6
 8004d8e:	50a3      	str	r3, [r4, r2]
 8004d90:	e7b3      	b.n	8004cfa <_malloc_r+0x22>
 8004d92:	6862      	ldr	r2, [r4, #4]
 8004d94:	42a3      	cmp	r3, r4
 8004d96:	bf0c      	ite	eq
 8004d98:	6032      	streq	r2, [r6, #0]
 8004d9a:	605a      	strne	r2, [r3, #4]
 8004d9c:	e7ec      	b.n	8004d78 <_malloc_r+0xa0>
 8004d9e:	4623      	mov	r3, r4
 8004da0:	6864      	ldr	r4, [r4, #4]
 8004da2:	e7b2      	b.n	8004d0a <_malloc_r+0x32>
 8004da4:	4634      	mov	r4, r6
 8004da6:	6876      	ldr	r6, [r6, #4]
 8004da8:	e7b9      	b.n	8004d1e <_malloc_r+0x46>
 8004daa:	230c      	movs	r3, #12
 8004dac:	4638      	mov	r0, r7
 8004dae:	603b      	str	r3, [r7, #0]
 8004db0:	f000 f83c 	bl	8004e2c <__malloc_unlock>
 8004db4:	e7a1      	b.n	8004cfa <_malloc_r+0x22>
 8004db6:	6025      	str	r5, [r4, #0]
 8004db8:	e7de      	b.n	8004d78 <_malloc_r+0xa0>
 8004dba:	bf00      	nop
 8004dbc:	20000bb8 	.word	0x20000bb8

08004dc0 <_sbrk_r>:
 8004dc0:	b538      	push	{r3, r4, r5, lr}
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	4d05      	ldr	r5, [pc, #20]	; (8004ddc <_sbrk_r+0x1c>)
 8004dc6:	4604      	mov	r4, r0
 8004dc8:	4608      	mov	r0, r1
 8004dca:	602b      	str	r3, [r5, #0]
 8004dcc:	f7fd fa58 	bl	8002280 <_sbrk>
 8004dd0:	1c43      	adds	r3, r0, #1
 8004dd2:	d102      	bne.n	8004dda <_sbrk_r+0x1a>
 8004dd4:	682b      	ldr	r3, [r5, #0]
 8004dd6:	b103      	cbz	r3, 8004dda <_sbrk_r+0x1a>
 8004dd8:	6023      	str	r3, [r4, #0]
 8004dda:	bd38      	pop	{r3, r4, r5, pc}
 8004ddc:	20000bc0 	.word	0x20000bc0

08004de0 <siprintf>:
 8004de0:	b40e      	push	{r1, r2, r3}
 8004de2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004de6:	b500      	push	{lr}
 8004de8:	b09c      	sub	sp, #112	; 0x70
 8004dea:	ab1d      	add	r3, sp, #116	; 0x74
 8004dec:	9002      	str	r0, [sp, #8]
 8004dee:	9006      	str	r0, [sp, #24]
 8004df0:	9107      	str	r1, [sp, #28]
 8004df2:	9104      	str	r1, [sp, #16]
 8004df4:	4808      	ldr	r0, [pc, #32]	; (8004e18 <siprintf+0x38>)
 8004df6:	4909      	ldr	r1, [pc, #36]	; (8004e1c <siprintf+0x3c>)
 8004df8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004dfc:	9105      	str	r1, [sp, #20]
 8004dfe:	6800      	ldr	r0, [r0, #0]
 8004e00:	a902      	add	r1, sp, #8
 8004e02:	9301      	str	r3, [sp, #4]
 8004e04:	f000 f874 	bl	8004ef0 <_svfiprintf_r>
 8004e08:	2200      	movs	r2, #0
 8004e0a:	9b02      	ldr	r3, [sp, #8]
 8004e0c:	701a      	strb	r2, [r3, #0]
 8004e0e:	b01c      	add	sp, #112	; 0x70
 8004e10:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e14:	b003      	add	sp, #12
 8004e16:	4770      	bx	lr
 8004e18:	20000018 	.word	0x20000018
 8004e1c:	ffff0208 	.word	0xffff0208

08004e20 <__malloc_lock>:
 8004e20:	4801      	ldr	r0, [pc, #4]	; (8004e28 <__malloc_lock+0x8>)
 8004e22:	f000 bafb 	b.w	800541c <__retarget_lock_acquire_recursive>
 8004e26:	bf00      	nop
 8004e28:	20000bc4 	.word	0x20000bc4

08004e2c <__malloc_unlock>:
 8004e2c:	4801      	ldr	r0, [pc, #4]	; (8004e34 <__malloc_unlock+0x8>)
 8004e2e:	f000 baf6 	b.w	800541e <__retarget_lock_release_recursive>
 8004e32:	bf00      	nop
 8004e34:	20000bc4 	.word	0x20000bc4

08004e38 <__ssputs_r>:
 8004e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e3c:	688e      	ldr	r6, [r1, #8]
 8004e3e:	4682      	mov	sl, r0
 8004e40:	429e      	cmp	r6, r3
 8004e42:	460c      	mov	r4, r1
 8004e44:	4690      	mov	r8, r2
 8004e46:	461f      	mov	r7, r3
 8004e48:	d838      	bhi.n	8004ebc <__ssputs_r+0x84>
 8004e4a:	898a      	ldrh	r2, [r1, #12]
 8004e4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e50:	d032      	beq.n	8004eb8 <__ssputs_r+0x80>
 8004e52:	6825      	ldr	r5, [r4, #0]
 8004e54:	6909      	ldr	r1, [r1, #16]
 8004e56:	3301      	adds	r3, #1
 8004e58:	eba5 0901 	sub.w	r9, r5, r1
 8004e5c:	6965      	ldr	r5, [r4, #20]
 8004e5e:	444b      	add	r3, r9
 8004e60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e68:	106d      	asrs	r5, r5, #1
 8004e6a:	429d      	cmp	r5, r3
 8004e6c:	bf38      	it	cc
 8004e6e:	461d      	movcc	r5, r3
 8004e70:	0553      	lsls	r3, r2, #21
 8004e72:	d531      	bpl.n	8004ed8 <__ssputs_r+0xa0>
 8004e74:	4629      	mov	r1, r5
 8004e76:	f7ff ff2f 	bl	8004cd8 <_malloc_r>
 8004e7a:	4606      	mov	r6, r0
 8004e7c:	b950      	cbnz	r0, 8004e94 <__ssputs_r+0x5c>
 8004e7e:	230c      	movs	r3, #12
 8004e80:	f04f 30ff 	mov.w	r0, #4294967295
 8004e84:	f8ca 3000 	str.w	r3, [sl]
 8004e88:	89a3      	ldrh	r3, [r4, #12]
 8004e8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e8e:	81a3      	strh	r3, [r4, #12]
 8004e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e94:	464a      	mov	r2, r9
 8004e96:	6921      	ldr	r1, [r4, #16]
 8004e98:	f7ff fea0 	bl	8004bdc <memcpy>
 8004e9c:	89a3      	ldrh	r3, [r4, #12]
 8004e9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ea6:	81a3      	strh	r3, [r4, #12]
 8004ea8:	6126      	str	r6, [r4, #16]
 8004eaa:	444e      	add	r6, r9
 8004eac:	6026      	str	r6, [r4, #0]
 8004eae:	463e      	mov	r6, r7
 8004eb0:	6165      	str	r5, [r4, #20]
 8004eb2:	eba5 0509 	sub.w	r5, r5, r9
 8004eb6:	60a5      	str	r5, [r4, #8]
 8004eb8:	42be      	cmp	r6, r7
 8004eba:	d900      	bls.n	8004ebe <__ssputs_r+0x86>
 8004ebc:	463e      	mov	r6, r7
 8004ebe:	4632      	mov	r2, r6
 8004ec0:	4641      	mov	r1, r8
 8004ec2:	6820      	ldr	r0, [r4, #0]
 8004ec4:	f000 faba 	bl	800543c <memmove>
 8004ec8:	68a3      	ldr	r3, [r4, #8]
 8004eca:	2000      	movs	r0, #0
 8004ecc:	1b9b      	subs	r3, r3, r6
 8004ece:	60a3      	str	r3, [r4, #8]
 8004ed0:	6823      	ldr	r3, [r4, #0]
 8004ed2:	4433      	add	r3, r6
 8004ed4:	6023      	str	r3, [r4, #0]
 8004ed6:	e7db      	b.n	8004e90 <__ssputs_r+0x58>
 8004ed8:	462a      	mov	r2, r5
 8004eda:	f000 fac9 	bl	8005470 <_realloc_r>
 8004ede:	4606      	mov	r6, r0
 8004ee0:	2800      	cmp	r0, #0
 8004ee2:	d1e1      	bne.n	8004ea8 <__ssputs_r+0x70>
 8004ee4:	4650      	mov	r0, sl
 8004ee6:	6921      	ldr	r1, [r4, #16]
 8004ee8:	f7ff fe8e 	bl	8004c08 <_free_r>
 8004eec:	e7c7      	b.n	8004e7e <__ssputs_r+0x46>
	...

08004ef0 <_svfiprintf_r>:
 8004ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ef4:	4698      	mov	r8, r3
 8004ef6:	898b      	ldrh	r3, [r1, #12]
 8004ef8:	4607      	mov	r7, r0
 8004efa:	061b      	lsls	r3, r3, #24
 8004efc:	460d      	mov	r5, r1
 8004efe:	4614      	mov	r4, r2
 8004f00:	b09d      	sub	sp, #116	; 0x74
 8004f02:	d50e      	bpl.n	8004f22 <_svfiprintf_r+0x32>
 8004f04:	690b      	ldr	r3, [r1, #16]
 8004f06:	b963      	cbnz	r3, 8004f22 <_svfiprintf_r+0x32>
 8004f08:	2140      	movs	r1, #64	; 0x40
 8004f0a:	f7ff fee5 	bl	8004cd8 <_malloc_r>
 8004f0e:	6028      	str	r0, [r5, #0]
 8004f10:	6128      	str	r0, [r5, #16]
 8004f12:	b920      	cbnz	r0, 8004f1e <_svfiprintf_r+0x2e>
 8004f14:	230c      	movs	r3, #12
 8004f16:	603b      	str	r3, [r7, #0]
 8004f18:	f04f 30ff 	mov.w	r0, #4294967295
 8004f1c:	e0d1      	b.n	80050c2 <_svfiprintf_r+0x1d2>
 8004f1e:	2340      	movs	r3, #64	; 0x40
 8004f20:	616b      	str	r3, [r5, #20]
 8004f22:	2300      	movs	r3, #0
 8004f24:	9309      	str	r3, [sp, #36]	; 0x24
 8004f26:	2320      	movs	r3, #32
 8004f28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f2c:	2330      	movs	r3, #48	; 0x30
 8004f2e:	f04f 0901 	mov.w	r9, #1
 8004f32:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f36:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80050dc <_svfiprintf_r+0x1ec>
 8004f3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f3e:	4623      	mov	r3, r4
 8004f40:	469a      	mov	sl, r3
 8004f42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f46:	b10a      	cbz	r2, 8004f4c <_svfiprintf_r+0x5c>
 8004f48:	2a25      	cmp	r2, #37	; 0x25
 8004f4a:	d1f9      	bne.n	8004f40 <_svfiprintf_r+0x50>
 8004f4c:	ebba 0b04 	subs.w	fp, sl, r4
 8004f50:	d00b      	beq.n	8004f6a <_svfiprintf_r+0x7a>
 8004f52:	465b      	mov	r3, fp
 8004f54:	4622      	mov	r2, r4
 8004f56:	4629      	mov	r1, r5
 8004f58:	4638      	mov	r0, r7
 8004f5a:	f7ff ff6d 	bl	8004e38 <__ssputs_r>
 8004f5e:	3001      	adds	r0, #1
 8004f60:	f000 80aa 	beq.w	80050b8 <_svfiprintf_r+0x1c8>
 8004f64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f66:	445a      	add	r2, fp
 8004f68:	9209      	str	r2, [sp, #36]	; 0x24
 8004f6a:	f89a 3000 	ldrb.w	r3, [sl]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f000 80a2 	beq.w	80050b8 <_svfiprintf_r+0x1c8>
 8004f74:	2300      	movs	r3, #0
 8004f76:	f04f 32ff 	mov.w	r2, #4294967295
 8004f7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f7e:	f10a 0a01 	add.w	sl, sl, #1
 8004f82:	9304      	str	r3, [sp, #16]
 8004f84:	9307      	str	r3, [sp, #28]
 8004f86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f8a:	931a      	str	r3, [sp, #104]	; 0x68
 8004f8c:	4654      	mov	r4, sl
 8004f8e:	2205      	movs	r2, #5
 8004f90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f94:	4851      	ldr	r0, [pc, #324]	; (80050dc <_svfiprintf_r+0x1ec>)
 8004f96:	f000 fa43 	bl	8005420 <memchr>
 8004f9a:	9a04      	ldr	r2, [sp, #16]
 8004f9c:	b9d8      	cbnz	r0, 8004fd6 <_svfiprintf_r+0xe6>
 8004f9e:	06d0      	lsls	r0, r2, #27
 8004fa0:	bf44      	itt	mi
 8004fa2:	2320      	movmi	r3, #32
 8004fa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fa8:	0711      	lsls	r1, r2, #28
 8004faa:	bf44      	itt	mi
 8004fac:	232b      	movmi	r3, #43	; 0x2b
 8004fae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fb2:	f89a 3000 	ldrb.w	r3, [sl]
 8004fb6:	2b2a      	cmp	r3, #42	; 0x2a
 8004fb8:	d015      	beq.n	8004fe6 <_svfiprintf_r+0xf6>
 8004fba:	4654      	mov	r4, sl
 8004fbc:	2000      	movs	r0, #0
 8004fbe:	f04f 0c0a 	mov.w	ip, #10
 8004fc2:	9a07      	ldr	r2, [sp, #28]
 8004fc4:	4621      	mov	r1, r4
 8004fc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fca:	3b30      	subs	r3, #48	; 0x30
 8004fcc:	2b09      	cmp	r3, #9
 8004fce:	d94e      	bls.n	800506e <_svfiprintf_r+0x17e>
 8004fd0:	b1b0      	cbz	r0, 8005000 <_svfiprintf_r+0x110>
 8004fd2:	9207      	str	r2, [sp, #28]
 8004fd4:	e014      	b.n	8005000 <_svfiprintf_r+0x110>
 8004fd6:	eba0 0308 	sub.w	r3, r0, r8
 8004fda:	fa09 f303 	lsl.w	r3, r9, r3
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	46a2      	mov	sl, r4
 8004fe2:	9304      	str	r3, [sp, #16]
 8004fe4:	e7d2      	b.n	8004f8c <_svfiprintf_r+0x9c>
 8004fe6:	9b03      	ldr	r3, [sp, #12]
 8004fe8:	1d19      	adds	r1, r3, #4
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	9103      	str	r1, [sp, #12]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	bfbb      	ittet	lt
 8004ff2:	425b      	neglt	r3, r3
 8004ff4:	f042 0202 	orrlt.w	r2, r2, #2
 8004ff8:	9307      	strge	r3, [sp, #28]
 8004ffa:	9307      	strlt	r3, [sp, #28]
 8004ffc:	bfb8      	it	lt
 8004ffe:	9204      	strlt	r2, [sp, #16]
 8005000:	7823      	ldrb	r3, [r4, #0]
 8005002:	2b2e      	cmp	r3, #46	; 0x2e
 8005004:	d10c      	bne.n	8005020 <_svfiprintf_r+0x130>
 8005006:	7863      	ldrb	r3, [r4, #1]
 8005008:	2b2a      	cmp	r3, #42	; 0x2a
 800500a:	d135      	bne.n	8005078 <_svfiprintf_r+0x188>
 800500c:	9b03      	ldr	r3, [sp, #12]
 800500e:	3402      	adds	r4, #2
 8005010:	1d1a      	adds	r2, r3, #4
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	9203      	str	r2, [sp, #12]
 8005016:	2b00      	cmp	r3, #0
 8005018:	bfb8      	it	lt
 800501a:	f04f 33ff 	movlt.w	r3, #4294967295
 800501e:	9305      	str	r3, [sp, #20]
 8005020:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80050e0 <_svfiprintf_r+0x1f0>
 8005024:	2203      	movs	r2, #3
 8005026:	4650      	mov	r0, sl
 8005028:	7821      	ldrb	r1, [r4, #0]
 800502a:	f000 f9f9 	bl	8005420 <memchr>
 800502e:	b140      	cbz	r0, 8005042 <_svfiprintf_r+0x152>
 8005030:	2340      	movs	r3, #64	; 0x40
 8005032:	eba0 000a 	sub.w	r0, r0, sl
 8005036:	fa03 f000 	lsl.w	r0, r3, r0
 800503a:	9b04      	ldr	r3, [sp, #16]
 800503c:	3401      	adds	r4, #1
 800503e:	4303      	orrs	r3, r0
 8005040:	9304      	str	r3, [sp, #16]
 8005042:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005046:	2206      	movs	r2, #6
 8005048:	4826      	ldr	r0, [pc, #152]	; (80050e4 <_svfiprintf_r+0x1f4>)
 800504a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800504e:	f000 f9e7 	bl	8005420 <memchr>
 8005052:	2800      	cmp	r0, #0
 8005054:	d038      	beq.n	80050c8 <_svfiprintf_r+0x1d8>
 8005056:	4b24      	ldr	r3, [pc, #144]	; (80050e8 <_svfiprintf_r+0x1f8>)
 8005058:	bb1b      	cbnz	r3, 80050a2 <_svfiprintf_r+0x1b2>
 800505a:	9b03      	ldr	r3, [sp, #12]
 800505c:	3307      	adds	r3, #7
 800505e:	f023 0307 	bic.w	r3, r3, #7
 8005062:	3308      	adds	r3, #8
 8005064:	9303      	str	r3, [sp, #12]
 8005066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005068:	4433      	add	r3, r6
 800506a:	9309      	str	r3, [sp, #36]	; 0x24
 800506c:	e767      	b.n	8004f3e <_svfiprintf_r+0x4e>
 800506e:	460c      	mov	r4, r1
 8005070:	2001      	movs	r0, #1
 8005072:	fb0c 3202 	mla	r2, ip, r2, r3
 8005076:	e7a5      	b.n	8004fc4 <_svfiprintf_r+0xd4>
 8005078:	2300      	movs	r3, #0
 800507a:	f04f 0c0a 	mov.w	ip, #10
 800507e:	4619      	mov	r1, r3
 8005080:	3401      	adds	r4, #1
 8005082:	9305      	str	r3, [sp, #20]
 8005084:	4620      	mov	r0, r4
 8005086:	f810 2b01 	ldrb.w	r2, [r0], #1
 800508a:	3a30      	subs	r2, #48	; 0x30
 800508c:	2a09      	cmp	r2, #9
 800508e:	d903      	bls.n	8005098 <_svfiprintf_r+0x1a8>
 8005090:	2b00      	cmp	r3, #0
 8005092:	d0c5      	beq.n	8005020 <_svfiprintf_r+0x130>
 8005094:	9105      	str	r1, [sp, #20]
 8005096:	e7c3      	b.n	8005020 <_svfiprintf_r+0x130>
 8005098:	4604      	mov	r4, r0
 800509a:	2301      	movs	r3, #1
 800509c:	fb0c 2101 	mla	r1, ip, r1, r2
 80050a0:	e7f0      	b.n	8005084 <_svfiprintf_r+0x194>
 80050a2:	ab03      	add	r3, sp, #12
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	462a      	mov	r2, r5
 80050a8:	4638      	mov	r0, r7
 80050aa:	4b10      	ldr	r3, [pc, #64]	; (80050ec <_svfiprintf_r+0x1fc>)
 80050ac:	a904      	add	r1, sp, #16
 80050ae:	f3af 8000 	nop.w
 80050b2:	1c42      	adds	r2, r0, #1
 80050b4:	4606      	mov	r6, r0
 80050b6:	d1d6      	bne.n	8005066 <_svfiprintf_r+0x176>
 80050b8:	89ab      	ldrh	r3, [r5, #12]
 80050ba:	065b      	lsls	r3, r3, #25
 80050bc:	f53f af2c 	bmi.w	8004f18 <_svfiprintf_r+0x28>
 80050c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050c2:	b01d      	add	sp, #116	; 0x74
 80050c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050c8:	ab03      	add	r3, sp, #12
 80050ca:	9300      	str	r3, [sp, #0]
 80050cc:	462a      	mov	r2, r5
 80050ce:	4638      	mov	r0, r7
 80050d0:	4b06      	ldr	r3, [pc, #24]	; (80050ec <_svfiprintf_r+0x1fc>)
 80050d2:	a904      	add	r1, sp, #16
 80050d4:	f000 f87c 	bl	80051d0 <_printf_i>
 80050d8:	e7eb      	b.n	80050b2 <_svfiprintf_r+0x1c2>
 80050da:	bf00      	nop
 80050dc:	0800631c 	.word	0x0800631c
 80050e0:	08006322 	.word	0x08006322
 80050e4:	08006326 	.word	0x08006326
 80050e8:	00000000 	.word	0x00000000
 80050ec:	08004e39 	.word	0x08004e39

080050f0 <_printf_common>:
 80050f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050f4:	4616      	mov	r6, r2
 80050f6:	4699      	mov	r9, r3
 80050f8:	688a      	ldr	r2, [r1, #8]
 80050fa:	690b      	ldr	r3, [r1, #16]
 80050fc:	4607      	mov	r7, r0
 80050fe:	4293      	cmp	r3, r2
 8005100:	bfb8      	it	lt
 8005102:	4613      	movlt	r3, r2
 8005104:	6033      	str	r3, [r6, #0]
 8005106:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800510a:	460c      	mov	r4, r1
 800510c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005110:	b10a      	cbz	r2, 8005116 <_printf_common+0x26>
 8005112:	3301      	adds	r3, #1
 8005114:	6033      	str	r3, [r6, #0]
 8005116:	6823      	ldr	r3, [r4, #0]
 8005118:	0699      	lsls	r1, r3, #26
 800511a:	bf42      	ittt	mi
 800511c:	6833      	ldrmi	r3, [r6, #0]
 800511e:	3302      	addmi	r3, #2
 8005120:	6033      	strmi	r3, [r6, #0]
 8005122:	6825      	ldr	r5, [r4, #0]
 8005124:	f015 0506 	ands.w	r5, r5, #6
 8005128:	d106      	bne.n	8005138 <_printf_common+0x48>
 800512a:	f104 0a19 	add.w	sl, r4, #25
 800512e:	68e3      	ldr	r3, [r4, #12]
 8005130:	6832      	ldr	r2, [r6, #0]
 8005132:	1a9b      	subs	r3, r3, r2
 8005134:	42ab      	cmp	r3, r5
 8005136:	dc28      	bgt.n	800518a <_printf_common+0x9a>
 8005138:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800513c:	1e13      	subs	r3, r2, #0
 800513e:	6822      	ldr	r2, [r4, #0]
 8005140:	bf18      	it	ne
 8005142:	2301      	movne	r3, #1
 8005144:	0692      	lsls	r2, r2, #26
 8005146:	d42d      	bmi.n	80051a4 <_printf_common+0xb4>
 8005148:	4649      	mov	r1, r9
 800514a:	4638      	mov	r0, r7
 800514c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005150:	47c0      	blx	r8
 8005152:	3001      	adds	r0, #1
 8005154:	d020      	beq.n	8005198 <_printf_common+0xa8>
 8005156:	6823      	ldr	r3, [r4, #0]
 8005158:	68e5      	ldr	r5, [r4, #12]
 800515a:	f003 0306 	and.w	r3, r3, #6
 800515e:	2b04      	cmp	r3, #4
 8005160:	bf18      	it	ne
 8005162:	2500      	movne	r5, #0
 8005164:	6832      	ldr	r2, [r6, #0]
 8005166:	f04f 0600 	mov.w	r6, #0
 800516a:	68a3      	ldr	r3, [r4, #8]
 800516c:	bf08      	it	eq
 800516e:	1aad      	subeq	r5, r5, r2
 8005170:	6922      	ldr	r2, [r4, #16]
 8005172:	bf08      	it	eq
 8005174:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005178:	4293      	cmp	r3, r2
 800517a:	bfc4      	itt	gt
 800517c:	1a9b      	subgt	r3, r3, r2
 800517e:	18ed      	addgt	r5, r5, r3
 8005180:	341a      	adds	r4, #26
 8005182:	42b5      	cmp	r5, r6
 8005184:	d11a      	bne.n	80051bc <_printf_common+0xcc>
 8005186:	2000      	movs	r0, #0
 8005188:	e008      	b.n	800519c <_printf_common+0xac>
 800518a:	2301      	movs	r3, #1
 800518c:	4652      	mov	r2, sl
 800518e:	4649      	mov	r1, r9
 8005190:	4638      	mov	r0, r7
 8005192:	47c0      	blx	r8
 8005194:	3001      	adds	r0, #1
 8005196:	d103      	bne.n	80051a0 <_printf_common+0xb0>
 8005198:	f04f 30ff 	mov.w	r0, #4294967295
 800519c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051a0:	3501      	adds	r5, #1
 80051a2:	e7c4      	b.n	800512e <_printf_common+0x3e>
 80051a4:	2030      	movs	r0, #48	; 0x30
 80051a6:	18e1      	adds	r1, r4, r3
 80051a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051ac:	1c5a      	adds	r2, r3, #1
 80051ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051b2:	4422      	add	r2, r4
 80051b4:	3302      	adds	r3, #2
 80051b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051ba:	e7c5      	b.n	8005148 <_printf_common+0x58>
 80051bc:	2301      	movs	r3, #1
 80051be:	4622      	mov	r2, r4
 80051c0:	4649      	mov	r1, r9
 80051c2:	4638      	mov	r0, r7
 80051c4:	47c0      	blx	r8
 80051c6:	3001      	adds	r0, #1
 80051c8:	d0e6      	beq.n	8005198 <_printf_common+0xa8>
 80051ca:	3601      	adds	r6, #1
 80051cc:	e7d9      	b.n	8005182 <_printf_common+0x92>
	...

080051d0 <_printf_i>:
 80051d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051d4:	7e0f      	ldrb	r7, [r1, #24]
 80051d6:	4691      	mov	r9, r2
 80051d8:	2f78      	cmp	r7, #120	; 0x78
 80051da:	4680      	mov	r8, r0
 80051dc:	460c      	mov	r4, r1
 80051de:	469a      	mov	sl, r3
 80051e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80051e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80051e6:	d807      	bhi.n	80051f8 <_printf_i+0x28>
 80051e8:	2f62      	cmp	r7, #98	; 0x62
 80051ea:	d80a      	bhi.n	8005202 <_printf_i+0x32>
 80051ec:	2f00      	cmp	r7, #0
 80051ee:	f000 80d9 	beq.w	80053a4 <_printf_i+0x1d4>
 80051f2:	2f58      	cmp	r7, #88	; 0x58
 80051f4:	f000 80a4 	beq.w	8005340 <_printf_i+0x170>
 80051f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005200:	e03a      	b.n	8005278 <_printf_i+0xa8>
 8005202:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005206:	2b15      	cmp	r3, #21
 8005208:	d8f6      	bhi.n	80051f8 <_printf_i+0x28>
 800520a:	a101      	add	r1, pc, #4	; (adr r1, 8005210 <_printf_i+0x40>)
 800520c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005210:	08005269 	.word	0x08005269
 8005214:	0800527d 	.word	0x0800527d
 8005218:	080051f9 	.word	0x080051f9
 800521c:	080051f9 	.word	0x080051f9
 8005220:	080051f9 	.word	0x080051f9
 8005224:	080051f9 	.word	0x080051f9
 8005228:	0800527d 	.word	0x0800527d
 800522c:	080051f9 	.word	0x080051f9
 8005230:	080051f9 	.word	0x080051f9
 8005234:	080051f9 	.word	0x080051f9
 8005238:	080051f9 	.word	0x080051f9
 800523c:	0800538b 	.word	0x0800538b
 8005240:	080052ad 	.word	0x080052ad
 8005244:	0800536d 	.word	0x0800536d
 8005248:	080051f9 	.word	0x080051f9
 800524c:	080051f9 	.word	0x080051f9
 8005250:	080053ad 	.word	0x080053ad
 8005254:	080051f9 	.word	0x080051f9
 8005258:	080052ad 	.word	0x080052ad
 800525c:	080051f9 	.word	0x080051f9
 8005260:	080051f9 	.word	0x080051f9
 8005264:	08005375 	.word	0x08005375
 8005268:	682b      	ldr	r3, [r5, #0]
 800526a:	1d1a      	adds	r2, r3, #4
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	602a      	str	r2, [r5, #0]
 8005270:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005274:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005278:	2301      	movs	r3, #1
 800527a:	e0a4      	b.n	80053c6 <_printf_i+0x1f6>
 800527c:	6820      	ldr	r0, [r4, #0]
 800527e:	6829      	ldr	r1, [r5, #0]
 8005280:	0606      	lsls	r6, r0, #24
 8005282:	f101 0304 	add.w	r3, r1, #4
 8005286:	d50a      	bpl.n	800529e <_printf_i+0xce>
 8005288:	680e      	ldr	r6, [r1, #0]
 800528a:	602b      	str	r3, [r5, #0]
 800528c:	2e00      	cmp	r6, #0
 800528e:	da03      	bge.n	8005298 <_printf_i+0xc8>
 8005290:	232d      	movs	r3, #45	; 0x2d
 8005292:	4276      	negs	r6, r6
 8005294:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005298:	230a      	movs	r3, #10
 800529a:	485e      	ldr	r0, [pc, #376]	; (8005414 <_printf_i+0x244>)
 800529c:	e019      	b.n	80052d2 <_printf_i+0x102>
 800529e:	680e      	ldr	r6, [r1, #0]
 80052a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80052a4:	602b      	str	r3, [r5, #0]
 80052a6:	bf18      	it	ne
 80052a8:	b236      	sxthne	r6, r6
 80052aa:	e7ef      	b.n	800528c <_printf_i+0xbc>
 80052ac:	682b      	ldr	r3, [r5, #0]
 80052ae:	6820      	ldr	r0, [r4, #0]
 80052b0:	1d19      	adds	r1, r3, #4
 80052b2:	6029      	str	r1, [r5, #0]
 80052b4:	0601      	lsls	r1, r0, #24
 80052b6:	d501      	bpl.n	80052bc <_printf_i+0xec>
 80052b8:	681e      	ldr	r6, [r3, #0]
 80052ba:	e002      	b.n	80052c2 <_printf_i+0xf2>
 80052bc:	0646      	lsls	r6, r0, #25
 80052be:	d5fb      	bpl.n	80052b8 <_printf_i+0xe8>
 80052c0:	881e      	ldrh	r6, [r3, #0]
 80052c2:	2f6f      	cmp	r7, #111	; 0x6f
 80052c4:	bf0c      	ite	eq
 80052c6:	2308      	moveq	r3, #8
 80052c8:	230a      	movne	r3, #10
 80052ca:	4852      	ldr	r0, [pc, #328]	; (8005414 <_printf_i+0x244>)
 80052cc:	2100      	movs	r1, #0
 80052ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052d2:	6865      	ldr	r5, [r4, #4]
 80052d4:	2d00      	cmp	r5, #0
 80052d6:	bfa8      	it	ge
 80052d8:	6821      	ldrge	r1, [r4, #0]
 80052da:	60a5      	str	r5, [r4, #8]
 80052dc:	bfa4      	itt	ge
 80052de:	f021 0104 	bicge.w	r1, r1, #4
 80052e2:	6021      	strge	r1, [r4, #0]
 80052e4:	b90e      	cbnz	r6, 80052ea <_printf_i+0x11a>
 80052e6:	2d00      	cmp	r5, #0
 80052e8:	d04d      	beq.n	8005386 <_printf_i+0x1b6>
 80052ea:	4615      	mov	r5, r2
 80052ec:	fbb6 f1f3 	udiv	r1, r6, r3
 80052f0:	fb03 6711 	mls	r7, r3, r1, r6
 80052f4:	5dc7      	ldrb	r7, [r0, r7]
 80052f6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80052fa:	4637      	mov	r7, r6
 80052fc:	42bb      	cmp	r3, r7
 80052fe:	460e      	mov	r6, r1
 8005300:	d9f4      	bls.n	80052ec <_printf_i+0x11c>
 8005302:	2b08      	cmp	r3, #8
 8005304:	d10b      	bne.n	800531e <_printf_i+0x14e>
 8005306:	6823      	ldr	r3, [r4, #0]
 8005308:	07de      	lsls	r6, r3, #31
 800530a:	d508      	bpl.n	800531e <_printf_i+0x14e>
 800530c:	6923      	ldr	r3, [r4, #16]
 800530e:	6861      	ldr	r1, [r4, #4]
 8005310:	4299      	cmp	r1, r3
 8005312:	bfde      	ittt	le
 8005314:	2330      	movle	r3, #48	; 0x30
 8005316:	f805 3c01 	strble.w	r3, [r5, #-1]
 800531a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800531e:	1b52      	subs	r2, r2, r5
 8005320:	6122      	str	r2, [r4, #16]
 8005322:	464b      	mov	r3, r9
 8005324:	4621      	mov	r1, r4
 8005326:	4640      	mov	r0, r8
 8005328:	f8cd a000 	str.w	sl, [sp]
 800532c:	aa03      	add	r2, sp, #12
 800532e:	f7ff fedf 	bl	80050f0 <_printf_common>
 8005332:	3001      	adds	r0, #1
 8005334:	d14c      	bne.n	80053d0 <_printf_i+0x200>
 8005336:	f04f 30ff 	mov.w	r0, #4294967295
 800533a:	b004      	add	sp, #16
 800533c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005340:	4834      	ldr	r0, [pc, #208]	; (8005414 <_printf_i+0x244>)
 8005342:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005346:	6829      	ldr	r1, [r5, #0]
 8005348:	6823      	ldr	r3, [r4, #0]
 800534a:	f851 6b04 	ldr.w	r6, [r1], #4
 800534e:	6029      	str	r1, [r5, #0]
 8005350:	061d      	lsls	r5, r3, #24
 8005352:	d514      	bpl.n	800537e <_printf_i+0x1ae>
 8005354:	07df      	lsls	r7, r3, #31
 8005356:	bf44      	itt	mi
 8005358:	f043 0320 	orrmi.w	r3, r3, #32
 800535c:	6023      	strmi	r3, [r4, #0]
 800535e:	b91e      	cbnz	r6, 8005368 <_printf_i+0x198>
 8005360:	6823      	ldr	r3, [r4, #0]
 8005362:	f023 0320 	bic.w	r3, r3, #32
 8005366:	6023      	str	r3, [r4, #0]
 8005368:	2310      	movs	r3, #16
 800536a:	e7af      	b.n	80052cc <_printf_i+0xfc>
 800536c:	6823      	ldr	r3, [r4, #0]
 800536e:	f043 0320 	orr.w	r3, r3, #32
 8005372:	6023      	str	r3, [r4, #0]
 8005374:	2378      	movs	r3, #120	; 0x78
 8005376:	4828      	ldr	r0, [pc, #160]	; (8005418 <_printf_i+0x248>)
 8005378:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800537c:	e7e3      	b.n	8005346 <_printf_i+0x176>
 800537e:	0659      	lsls	r1, r3, #25
 8005380:	bf48      	it	mi
 8005382:	b2b6      	uxthmi	r6, r6
 8005384:	e7e6      	b.n	8005354 <_printf_i+0x184>
 8005386:	4615      	mov	r5, r2
 8005388:	e7bb      	b.n	8005302 <_printf_i+0x132>
 800538a:	682b      	ldr	r3, [r5, #0]
 800538c:	6826      	ldr	r6, [r4, #0]
 800538e:	1d18      	adds	r0, r3, #4
 8005390:	6961      	ldr	r1, [r4, #20]
 8005392:	6028      	str	r0, [r5, #0]
 8005394:	0635      	lsls	r5, r6, #24
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	d501      	bpl.n	800539e <_printf_i+0x1ce>
 800539a:	6019      	str	r1, [r3, #0]
 800539c:	e002      	b.n	80053a4 <_printf_i+0x1d4>
 800539e:	0670      	lsls	r0, r6, #25
 80053a0:	d5fb      	bpl.n	800539a <_printf_i+0x1ca>
 80053a2:	8019      	strh	r1, [r3, #0]
 80053a4:	2300      	movs	r3, #0
 80053a6:	4615      	mov	r5, r2
 80053a8:	6123      	str	r3, [r4, #16]
 80053aa:	e7ba      	b.n	8005322 <_printf_i+0x152>
 80053ac:	682b      	ldr	r3, [r5, #0]
 80053ae:	2100      	movs	r1, #0
 80053b0:	1d1a      	adds	r2, r3, #4
 80053b2:	602a      	str	r2, [r5, #0]
 80053b4:	681d      	ldr	r5, [r3, #0]
 80053b6:	6862      	ldr	r2, [r4, #4]
 80053b8:	4628      	mov	r0, r5
 80053ba:	f000 f831 	bl	8005420 <memchr>
 80053be:	b108      	cbz	r0, 80053c4 <_printf_i+0x1f4>
 80053c0:	1b40      	subs	r0, r0, r5
 80053c2:	6060      	str	r0, [r4, #4]
 80053c4:	6863      	ldr	r3, [r4, #4]
 80053c6:	6123      	str	r3, [r4, #16]
 80053c8:	2300      	movs	r3, #0
 80053ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053ce:	e7a8      	b.n	8005322 <_printf_i+0x152>
 80053d0:	462a      	mov	r2, r5
 80053d2:	4649      	mov	r1, r9
 80053d4:	4640      	mov	r0, r8
 80053d6:	6923      	ldr	r3, [r4, #16]
 80053d8:	47d0      	blx	sl
 80053da:	3001      	adds	r0, #1
 80053dc:	d0ab      	beq.n	8005336 <_printf_i+0x166>
 80053de:	6823      	ldr	r3, [r4, #0]
 80053e0:	079b      	lsls	r3, r3, #30
 80053e2:	d413      	bmi.n	800540c <_printf_i+0x23c>
 80053e4:	68e0      	ldr	r0, [r4, #12]
 80053e6:	9b03      	ldr	r3, [sp, #12]
 80053e8:	4298      	cmp	r0, r3
 80053ea:	bfb8      	it	lt
 80053ec:	4618      	movlt	r0, r3
 80053ee:	e7a4      	b.n	800533a <_printf_i+0x16a>
 80053f0:	2301      	movs	r3, #1
 80053f2:	4632      	mov	r2, r6
 80053f4:	4649      	mov	r1, r9
 80053f6:	4640      	mov	r0, r8
 80053f8:	47d0      	blx	sl
 80053fa:	3001      	adds	r0, #1
 80053fc:	d09b      	beq.n	8005336 <_printf_i+0x166>
 80053fe:	3501      	adds	r5, #1
 8005400:	68e3      	ldr	r3, [r4, #12]
 8005402:	9903      	ldr	r1, [sp, #12]
 8005404:	1a5b      	subs	r3, r3, r1
 8005406:	42ab      	cmp	r3, r5
 8005408:	dcf2      	bgt.n	80053f0 <_printf_i+0x220>
 800540a:	e7eb      	b.n	80053e4 <_printf_i+0x214>
 800540c:	2500      	movs	r5, #0
 800540e:	f104 0619 	add.w	r6, r4, #25
 8005412:	e7f5      	b.n	8005400 <_printf_i+0x230>
 8005414:	0800632d 	.word	0x0800632d
 8005418:	0800633e 	.word	0x0800633e

0800541c <__retarget_lock_acquire_recursive>:
 800541c:	4770      	bx	lr

0800541e <__retarget_lock_release_recursive>:
 800541e:	4770      	bx	lr

08005420 <memchr>:
 8005420:	4603      	mov	r3, r0
 8005422:	b510      	push	{r4, lr}
 8005424:	b2c9      	uxtb	r1, r1
 8005426:	4402      	add	r2, r0
 8005428:	4293      	cmp	r3, r2
 800542a:	4618      	mov	r0, r3
 800542c:	d101      	bne.n	8005432 <memchr+0x12>
 800542e:	2000      	movs	r0, #0
 8005430:	e003      	b.n	800543a <memchr+0x1a>
 8005432:	7804      	ldrb	r4, [r0, #0]
 8005434:	3301      	adds	r3, #1
 8005436:	428c      	cmp	r4, r1
 8005438:	d1f6      	bne.n	8005428 <memchr+0x8>
 800543a:	bd10      	pop	{r4, pc}

0800543c <memmove>:
 800543c:	4288      	cmp	r0, r1
 800543e:	b510      	push	{r4, lr}
 8005440:	eb01 0402 	add.w	r4, r1, r2
 8005444:	d902      	bls.n	800544c <memmove+0x10>
 8005446:	4284      	cmp	r4, r0
 8005448:	4623      	mov	r3, r4
 800544a:	d807      	bhi.n	800545c <memmove+0x20>
 800544c:	1e43      	subs	r3, r0, #1
 800544e:	42a1      	cmp	r1, r4
 8005450:	d008      	beq.n	8005464 <memmove+0x28>
 8005452:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005456:	f803 2f01 	strb.w	r2, [r3, #1]!
 800545a:	e7f8      	b.n	800544e <memmove+0x12>
 800545c:	4601      	mov	r1, r0
 800545e:	4402      	add	r2, r0
 8005460:	428a      	cmp	r2, r1
 8005462:	d100      	bne.n	8005466 <memmove+0x2a>
 8005464:	bd10      	pop	{r4, pc}
 8005466:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800546a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800546e:	e7f7      	b.n	8005460 <memmove+0x24>

08005470 <_realloc_r>:
 8005470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005474:	4680      	mov	r8, r0
 8005476:	4614      	mov	r4, r2
 8005478:	460e      	mov	r6, r1
 800547a:	b921      	cbnz	r1, 8005486 <_realloc_r+0x16>
 800547c:	4611      	mov	r1, r2
 800547e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005482:	f7ff bc29 	b.w	8004cd8 <_malloc_r>
 8005486:	b92a      	cbnz	r2, 8005494 <_realloc_r+0x24>
 8005488:	f7ff fbbe 	bl	8004c08 <_free_r>
 800548c:	4625      	mov	r5, r4
 800548e:	4628      	mov	r0, r5
 8005490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005494:	f000 f81b 	bl	80054ce <_malloc_usable_size_r>
 8005498:	4284      	cmp	r4, r0
 800549a:	4607      	mov	r7, r0
 800549c:	d802      	bhi.n	80054a4 <_realloc_r+0x34>
 800549e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80054a2:	d812      	bhi.n	80054ca <_realloc_r+0x5a>
 80054a4:	4621      	mov	r1, r4
 80054a6:	4640      	mov	r0, r8
 80054a8:	f7ff fc16 	bl	8004cd8 <_malloc_r>
 80054ac:	4605      	mov	r5, r0
 80054ae:	2800      	cmp	r0, #0
 80054b0:	d0ed      	beq.n	800548e <_realloc_r+0x1e>
 80054b2:	42bc      	cmp	r4, r7
 80054b4:	4622      	mov	r2, r4
 80054b6:	4631      	mov	r1, r6
 80054b8:	bf28      	it	cs
 80054ba:	463a      	movcs	r2, r7
 80054bc:	f7ff fb8e 	bl	8004bdc <memcpy>
 80054c0:	4631      	mov	r1, r6
 80054c2:	4640      	mov	r0, r8
 80054c4:	f7ff fba0 	bl	8004c08 <_free_r>
 80054c8:	e7e1      	b.n	800548e <_realloc_r+0x1e>
 80054ca:	4635      	mov	r5, r6
 80054cc:	e7df      	b.n	800548e <_realloc_r+0x1e>

080054ce <_malloc_usable_size_r>:
 80054ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054d2:	1f18      	subs	r0, r3, #4
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	bfbc      	itt	lt
 80054d8:	580b      	ldrlt	r3, [r1, r0]
 80054da:	18c0      	addlt	r0, r0, r3
 80054dc:	4770      	bx	lr
	...

080054e0 <pow>:
 80054e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054e4:	4614      	mov	r4, r2
 80054e6:	461d      	mov	r5, r3
 80054e8:	4680      	mov	r8, r0
 80054ea:	4689      	mov	r9, r1
 80054ec:	f000 f860 	bl	80055b0 <__ieee754_pow>
 80054f0:	4622      	mov	r2, r4
 80054f2:	4606      	mov	r6, r0
 80054f4:	460f      	mov	r7, r1
 80054f6:	462b      	mov	r3, r5
 80054f8:	4620      	mov	r0, r4
 80054fa:	4629      	mov	r1, r5
 80054fc:	f7fb fa7e 	bl	80009fc <__aeabi_dcmpun>
 8005500:	bbc8      	cbnz	r0, 8005576 <pow+0x96>
 8005502:	2200      	movs	r2, #0
 8005504:	2300      	movs	r3, #0
 8005506:	4640      	mov	r0, r8
 8005508:	4649      	mov	r1, r9
 800550a:	f7fb fa45 	bl	8000998 <__aeabi_dcmpeq>
 800550e:	b1b8      	cbz	r0, 8005540 <pow+0x60>
 8005510:	2200      	movs	r2, #0
 8005512:	2300      	movs	r3, #0
 8005514:	4620      	mov	r0, r4
 8005516:	4629      	mov	r1, r5
 8005518:	f7fb fa3e 	bl	8000998 <__aeabi_dcmpeq>
 800551c:	2800      	cmp	r0, #0
 800551e:	d141      	bne.n	80055a4 <pow+0xc4>
 8005520:	4620      	mov	r0, r4
 8005522:	4629      	mov	r1, r5
 8005524:	f000 fe39 	bl	800619a <finite>
 8005528:	b328      	cbz	r0, 8005576 <pow+0x96>
 800552a:	2200      	movs	r2, #0
 800552c:	2300      	movs	r3, #0
 800552e:	4620      	mov	r0, r4
 8005530:	4629      	mov	r1, r5
 8005532:	f7fb fa3b 	bl	80009ac <__aeabi_dcmplt>
 8005536:	b1f0      	cbz	r0, 8005576 <pow+0x96>
 8005538:	f7ff fb16 	bl	8004b68 <__errno>
 800553c:	2322      	movs	r3, #34	; 0x22
 800553e:	e019      	b.n	8005574 <pow+0x94>
 8005540:	4630      	mov	r0, r6
 8005542:	4639      	mov	r1, r7
 8005544:	f000 fe29 	bl	800619a <finite>
 8005548:	b9c8      	cbnz	r0, 800557e <pow+0x9e>
 800554a:	4640      	mov	r0, r8
 800554c:	4649      	mov	r1, r9
 800554e:	f000 fe24 	bl	800619a <finite>
 8005552:	b1a0      	cbz	r0, 800557e <pow+0x9e>
 8005554:	4620      	mov	r0, r4
 8005556:	4629      	mov	r1, r5
 8005558:	f000 fe1f 	bl	800619a <finite>
 800555c:	b178      	cbz	r0, 800557e <pow+0x9e>
 800555e:	4632      	mov	r2, r6
 8005560:	463b      	mov	r3, r7
 8005562:	4630      	mov	r0, r6
 8005564:	4639      	mov	r1, r7
 8005566:	f7fb fa49 	bl	80009fc <__aeabi_dcmpun>
 800556a:	2800      	cmp	r0, #0
 800556c:	d0e4      	beq.n	8005538 <pow+0x58>
 800556e:	f7ff fafb 	bl	8004b68 <__errno>
 8005572:	2321      	movs	r3, #33	; 0x21
 8005574:	6003      	str	r3, [r0, #0]
 8005576:	4630      	mov	r0, r6
 8005578:	4639      	mov	r1, r7
 800557a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800557e:	2200      	movs	r2, #0
 8005580:	2300      	movs	r3, #0
 8005582:	4630      	mov	r0, r6
 8005584:	4639      	mov	r1, r7
 8005586:	f7fb fa07 	bl	8000998 <__aeabi_dcmpeq>
 800558a:	2800      	cmp	r0, #0
 800558c:	d0f3      	beq.n	8005576 <pow+0x96>
 800558e:	4640      	mov	r0, r8
 8005590:	4649      	mov	r1, r9
 8005592:	f000 fe02 	bl	800619a <finite>
 8005596:	2800      	cmp	r0, #0
 8005598:	d0ed      	beq.n	8005576 <pow+0x96>
 800559a:	4620      	mov	r0, r4
 800559c:	4629      	mov	r1, r5
 800559e:	f000 fdfc 	bl	800619a <finite>
 80055a2:	e7c8      	b.n	8005536 <pow+0x56>
 80055a4:	2600      	movs	r6, #0
 80055a6:	4f01      	ldr	r7, [pc, #4]	; (80055ac <pow+0xcc>)
 80055a8:	e7e5      	b.n	8005576 <pow+0x96>
 80055aa:	bf00      	nop
 80055ac:	3ff00000 	.word	0x3ff00000

080055b0 <__ieee754_pow>:
 80055b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055b4:	b093      	sub	sp, #76	; 0x4c
 80055b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80055ba:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 80055be:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80055c2:	4689      	mov	r9, r1
 80055c4:	ea56 0102 	orrs.w	r1, r6, r2
 80055c8:	4680      	mov	r8, r0
 80055ca:	d111      	bne.n	80055f0 <__ieee754_pow+0x40>
 80055cc:	1803      	adds	r3, r0, r0
 80055ce:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 80055d2:	4152      	adcs	r2, r2
 80055d4:	4299      	cmp	r1, r3
 80055d6:	4b82      	ldr	r3, [pc, #520]	; (80057e0 <__ieee754_pow+0x230>)
 80055d8:	4193      	sbcs	r3, r2
 80055da:	f080 84b9 	bcs.w	8005f50 <__ieee754_pow+0x9a0>
 80055de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055e2:	4640      	mov	r0, r8
 80055e4:	4649      	mov	r1, r9
 80055e6:	f7fa fdb9 	bl	800015c <__adddf3>
 80055ea:	4683      	mov	fp, r0
 80055ec:	468c      	mov	ip, r1
 80055ee:	e06f      	b.n	80056d0 <__ieee754_pow+0x120>
 80055f0:	4b7c      	ldr	r3, [pc, #496]	; (80057e4 <__ieee754_pow+0x234>)
 80055f2:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 80055f6:	429c      	cmp	r4, r3
 80055f8:	464d      	mov	r5, r9
 80055fa:	4682      	mov	sl, r0
 80055fc:	dc06      	bgt.n	800560c <__ieee754_pow+0x5c>
 80055fe:	d101      	bne.n	8005604 <__ieee754_pow+0x54>
 8005600:	2800      	cmp	r0, #0
 8005602:	d1ec      	bne.n	80055de <__ieee754_pow+0x2e>
 8005604:	429e      	cmp	r6, r3
 8005606:	dc01      	bgt.n	800560c <__ieee754_pow+0x5c>
 8005608:	d10f      	bne.n	800562a <__ieee754_pow+0x7a>
 800560a:	b172      	cbz	r2, 800562a <__ieee754_pow+0x7a>
 800560c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8005610:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8005614:	ea55 050a 	orrs.w	r5, r5, sl
 8005618:	d1e1      	bne.n	80055de <__ieee754_pow+0x2e>
 800561a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800561e:	18db      	adds	r3, r3, r3
 8005620:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8005624:	4152      	adcs	r2, r2
 8005626:	429d      	cmp	r5, r3
 8005628:	e7d5      	b.n	80055d6 <__ieee754_pow+0x26>
 800562a:	2d00      	cmp	r5, #0
 800562c:	da39      	bge.n	80056a2 <__ieee754_pow+0xf2>
 800562e:	4b6e      	ldr	r3, [pc, #440]	; (80057e8 <__ieee754_pow+0x238>)
 8005630:	429e      	cmp	r6, r3
 8005632:	dc52      	bgt.n	80056da <__ieee754_pow+0x12a>
 8005634:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005638:	429e      	cmp	r6, r3
 800563a:	f340 849c 	ble.w	8005f76 <__ieee754_pow+0x9c6>
 800563e:	1533      	asrs	r3, r6, #20
 8005640:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005644:	2b14      	cmp	r3, #20
 8005646:	dd0f      	ble.n	8005668 <__ieee754_pow+0xb8>
 8005648:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800564c:	fa22 f103 	lsr.w	r1, r2, r3
 8005650:	fa01 f303 	lsl.w	r3, r1, r3
 8005654:	4293      	cmp	r3, r2
 8005656:	f040 848e 	bne.w	8005f76 <__ieee754_pow+0x9c6>
 800565a:	f001 0101 	and.w	r1, r1, #1
 800565e:	f1c1 0302 	rsb	r3, r1, #2
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	b182      	cbz	r2, 8005688 <__ieee754_pow+0xd8>
 8005666:	e05d      	b.n	8005724 <__ieee754_pow+0x174>
 8005668:	2a00      	cmp	r2, #0
 800566a:	d159      	bne.n	8005720 <__ieee754_pow+0x170>
 800566c:	f1c3 0314 	rsb	r3, r3, #20
 8005670:	fa46 f103 	asr.w	r1, r6, r3
 8005674:	fa01 f303 	lsl.w	r3, r1, r3
 8005678:	42b3      	cmp	r3, r6
 800567a:	f040 8479 	bne.w	8005f70 <__ieee754_pow+0x9c0>
 800567e:	f001 0101 	and.w	r1, r1, #1
 8005682:	f1c1 0302 	rsb	r3, r1, #2
 8005686:	9300      	str	r3, [sp, #0]
 8005688:	4b58      	ldr	r3, [pc, #352]	; (80057ec <__ieee754_pow+0x23c>)
 800568a:	429e      	cmp	r6, r3
 800568c:	d132      	bne.n	80056f4 <__ieee754_pow+0x144>
 800568e:	2f00      	cmp	r7, #0
 8005690:	f280 846a 	bge.w	8005f68 <__ieee754_pow+0x9b8>
 8005694:	4642      	mov	r2, r8
 8005696:	464b      	mov	r3, r9
 8005698:	2000      	movs	r0, #0
 800569a:	4954      	ldr	r1, [pc, #336]	; (80057ec <__ieee754_pow+0x23c>)
 800569c:	f7fb f83e 	bl	800071c <__aeabi_ddiv>
 80056a0:	e7a3      	b.n	80055ea <__ieee754_pow+0x3a>
 80056a2:	2300      	movs	r3, #0
 80056a4:	9300      	str	r3, [sp, #0]
 80056a6:	2a00      	cmp	r2, #0
 80056a8:	d13c      	bne.n	8005724 <__ieee754_pow+0x174>
 80056aa:	4b4e      	ldr	r3, [pc, #312]	; (80057e4 <__ieee754_pow+0x234>)
 80056ac:	429e      	cmp	r6, r3
 80056ae:	d1eb      	bne.n	8005688 <__ieee754_pow+0xd8>
 80056b0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80056b4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80056b8:	ea53 030a 	orrs.w	r3, r3, sl
 80056bc:	f000 8448 	beq.w	8005f50 <__ieee754_pow+0x9a0>
 80056c0:	4b4b      	ldr	r3, [pc, #300]	; (80057f0 <__ieee754_pow+0x240>)
 80056c2:	429c      	cmp	r4, r3
 80056c4:	dd0b      	ble.n	80056de <__ieee754_pow+0x12e>
 80056c6:	2f00      	cmp	r7, #0
 80056c8:	f2c0 8448 	blt.w	8005f5c <__ieee754_pow+0x9ac>
 80056cc:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80056d0:	4658      	mov	r0, fp
 80056d2:	4661      	mov	r1, ip
 80056d4:	b013      	add	sp, #76	; 0x4c
 80056d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056da:	2302      	movs	r3, #2
 80056dc:	e7e2      	b.n	80056a4 <__ieee754_pow+0xf4>
 80056de:	2f00      	cmp	r7, #0
 80056e0:	f04f 0b00 	mov.w	fp, #0
 80056e4:	f04f 0c00 	mov.w	ip, #0
 80056e8:	daf2      	bge.n	80056d0 <__ieee754_pow+0x120>
 80056ea:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80056ee:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80056f2:	e7ed      	b.n	80056d0 <__ieee754_pow+0x120>
 80056f4:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80056f8:	d106      	bne.n	8005708 <__ieee754_pow+0x158>
 80056fa:	4642      	mov	r2, r8
 80056fc:	464b      	mov	r3, r9
 80056fe:	4640      	mov	r0, r8
 8005700:	4649      	mov	r1, r9
 8005702:	f7fa fee1 	bl	80004c8 <__aeabi_dmul>
 8005706:	e770      	b.n	80055ea <__ieee754_pow+0x3a>
 8005708:	4b3a      	ldr	r3, [pc, #232]	; (80057f4 <__ieee754_pow+0x244>)
 800570a:	429f      	cmp	r7, r3
 800570c:	d10a      	bne.n	8005724 <__ieee754_pow+0x174>
 800570e:	2d00      	cmp	r5, #0
 8005710:	db08      	blt.n	8005724 <__ieee754_pow+0x174>
 8005712:	4640      	mov	r0, r8
 8005714:	4649      	mov	r1, r9
 8005716:	b013      	add	sp, #76	; 0x4c
 8005718:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800571c:	f000 bc5e 	b.w	8005fdc <__ieee754_sqrt>
 8005720:	2300      	movs	r3, #0
 8005722:	9300      	str	r3, [sp, #0]
 8005724:	4640      	mov	r0, r8
 8005726:	4649      	mov	r1, r9
 8005728:	f000 fd34 	bl	8006194 <fabs>
 800572c:	4683      	mov	fp, r0
 800572e:	468c      	mov	ip, r1
 8005730:	f1ba 0f00 	cmp.w	sl, #0
 8005734:	d128      	bne.n	8005788 <__ieee754_pow+0x1d8>
 8005736:	b124      	cbz	r4, 8005742 <__ieee754_pow+0x192>
 8005738:	4b2c      	ldr	r3, [pc, #176]	; (80057ec <__ieee754_pow+0x23c>)
 800573a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800573e:	429a      	cmp	r2, r3
 8005740:	d122      	bne.n	8005788 <__ieee754_pow+0x1d8>
 8005742:	2f00      	cmp	r7, #0
 8005744:	da07      	bge.n	8005756 <__ieee754_pow+0x1a6>
 8005746:	465a      	mov	r2, fp
 8005748:	4663      	mov	r3, ip
 800574a:	2000      	movs	r0, #0
 800574c:	4927      	ldr	r1, [pc, #156]	; (80057ec <__ieee754_pow+0x23c>)
 800574e:	f7fa ffe5 	bl	800071c <__aeabi_ddiv>
 8005752:	4683      	mov	fp, r0
 8005754:	468c      	mov	ip, r1
 8005756:	2d00      	cmp	r5, #0
 8005758:	daba      	bge.n	80056d0 <__ieee754_pow+0x120>
 800575a:	9b00      	ldr	r3, [sp, #0]
 800575c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005760:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005764:	4323      	orrs	r3, r4
 8005766:	d108      	bne.n	800577a <__ieee754_pow+0x1ca>
 8005768:	465a      	mov	r2, fp
 800576a:	4663      	mov	r3, ip
 800576c:	4658      	mov	r0, fp
 800576e:	4661      	mov	r1, ip
 8005770:	f7fa fcf2 	bl	8000158 <__aeabi_dsub>
 8005774:	4602      	mov	r2, r0
 8005776:	460b      	mov	r3, r1
 8005778:	e790      	b.n	800569c <__ieee754_pow+0xec>
 800577a:	9b00      	ldr	r3, [sp, #0]
 800577c:	2b01      	cmp	r3, #1
 800577e:	d1a7      	bne.n	80056d0 <__ieee754_pow+0x120>
 8005780:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8005784:	469c      	mov	ip, r3
 8005786:	e7a3      	b.n	80056d0 <__ieee754_pow+0x120>
 8005788:	0feb      	lsrs	r3, r5, #31
 800578a:	3b01      	subs	r3, #1
 800578c:	930c      	str	r3, [sp, #48]	; 0x30
 800578e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005790:	9b00      	ldr	r3, [sp, #0]
 8005792:	4313      	orrs	r3, r2
 8005794:	d104      	bne.n	80057a0 <__ieee754_pow+0x1f0>
 8005796:	4642      	mov	r2, r8
 8005798:	464b      	mov	r3, r9
 800579a:	4640      	mov	r0, r8
 800579c:	4649      	mov	r1, r9
 800579e:	e7e7      	b.n	8005770 <__ieee754_pow+0x1c0>
 80057a0:	4b15      	ldr	r3, [pc, #84]	; (80057f8 <__ieee754_pow+0x248>)
 80057a2:	429e      	cmp	r6, r3
 80057a4:	f340 80f6 	ble.w	8005994 <__ieee754_pow+0x3e4>
 80057a8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80057ac:	429e      	cmp	r6, r3
 80057ae:	4b10      	ldr	r3, [pc, #64]	; (80057f0 <__ieee754_pow+0x240>)
 80057b0:	dd09      	ble.n	80057c6 <__ieee754_pow+0x216>
 80057b2:	429c      	cmp	r4, r3
 80057b4:	dc0c      	bgt.n	80057d0 <__ieee754_pow+0x220>
 80057b6:	2f00      	cmp	r7, #0
 80057b8:	da0c      	bge.n	80057d4 <__ieee754_pow+0x224>
 80057ba:	2000      	movs	r0, #0
 80057bc:	b013      	add	sp, #76	; 0x4c
 80057be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057c2:	f000 bce2 	b.w	800618a <__math_oflow>
 80057c6:	429c      	cmp	r4, r3
 80057c8:	dbf5      	blt.n	80057b6 <__ieee754_pow+0x206>
 80057ca:	4b08      	ldr	r3, [pc, #32]	; (80057ec <__ieee754_pow+0x23c>)
 80057cc:	429c      	cmp	r4, r3
 80057ce:	dd15      	ble.n	80057fc <__ieee754_pow+0x24c>
 80057d0:	2f00      	cmp	r7, #0
 80057d2:	dcf2      	bgt.n	80057ba <__ieee754_pow+0x20a>
 80057d4:	2000      	movs	r0, #0
 80057d6:	b013      	add	sp, #76	; 0x4c
 80057d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057dc:	f000 bcd0 	b.w	8006180 <__math_uflow>
 80057e0:	fff00000 	.word	0xfff00000
 80057e4:	7ff00000 	.word	0x7ff00000
 80057e8:	433fffff 	.word	0x433fffff
 80057ec:	3ff00000 	.word	0x3ff00000
 80057f0:	3fefffff 	.word	0x3fefffff
 80057f4:	3fe00000 	.word	0x3fe00000
 80057f8:	41e00000 	.word	0x41e00000
 80057fc:	4661      	mov	r1, ip
 80057fe:	2200      	movs	r2, #0
 8005800:	4658      	mov	r0, fp
 8005802:	4b5f      	ldr	r3, [pc, #380]	; (8005980 <__ieee754_pow+0x3d0>)
 8005804:	f7fa fca8 	bl	8000158 <__aeabi_dsub>
 8005808:	a355      	add	r3, pc, #340	; (adr r3, 8005960 <__ieee754_pow+0x3b0>)
 800580a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580e:	4604      	mov	r4, r0
 8005810:	460d      	mov	r5, r1
 8005812:	f7fa fe59 	bl	80004c8 <__aeabi_dmul>
 8005816:	a354      	add	r3, pc, #336	; (adr r3, 8005968 <__ieee754_pow+0x3b8>)
 8005818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581c:	4606      	mov	r6, r0
 800581e:	460f      	mov	r7, r1
 8005820:	4620      	mov	r0, r4
 8005822:	4629      	mov	r1, r5
 8005824:	f7fa fe50 	bl	80004c8 <__aeabi_dmul>
 8005828:	2200      	movs	r2, #0
 800582a:	4682      	mov	sl, r0
 800582c:	468b      	mov	fp, r1
 800582e:	4620      	mov	r0, r4
 8005830:	4629      	mov	r1, r5
 8005832:	4b54      	ldr	r3, [pc, #336]	; (8005984 <__ieee754_pow+0x3d4>)
 8005834:	f7fa fe48 	bl	80004c8 <__aeabi_dmul>
 8005838:	4602      	mov	r2, r0
 800583a:	460b      	mov	r3, r1
 800583c:	a14c      	add	r1, pc, #304	; (adr r1, 8005970 <__ieee754_pow+0x3c0>)
 800583e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005842:	f7fa fc89 	bl	8000158 <__aeabi_dsub>
 8005846:	4622      	mov	r2, r4
 8005848:	462b      	mov	r3, r5
 800584a:	f7fa fe3d 	bl	80004c8 <__aeabi_dmul>
 800584e:	4602      	mov	r2, r0
 8005850:	460b      	mov	r3, r1
 8005852:	2000      	movs	r0, #0
 8005854:	494c      	ldr	r1, [pc, #304]	; (8005988 <__ieee754_pow+0x3d8>)
 8005856:	f7fa fc7f 	bl	8000158 <__aeabi_dsub>
 800585a:	4622      	mov	r2, r4
 800585c:	462b      	mov	r3, r5
 800585e:	4680      	mov	r8, r0
 8005860:	4689      	mov	r9, r1
 8005862:	4620      	mov	r0, r4
 8005864:	4629      	mov	r1, r5
 8005866:	f7fa fe2f 	bl	80004c8 <__aeabi_dmul>
 800586a:	4602      	mov	r2, r0
 800586c:	460b      	mov	r3, r1
 800586e:	4640      	mov	r0, r8
 8005870:	4649      	mov	r1, r9
 8005872:	f7fa fe29 	bl	80004c8 <__aeabi_dmul>
 8005876:	a340      	add	r3, pc, #256	; (adr r3, 8005978 <__ieee754_pow+0x3c8>)
 8005878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587c:	f7fa fe24 	bl	80004c8 <__aeabi_dmul>
 8005880:	4602      	mov	r2, r0
 8005882:	460b      	mov	r3, r1
 8005884:	4650      	mov	r0, sl
 8005886:	4659      	mov	r1, fp
 8005888:	f7fa fc66 	bl	8000158 <__aeabi_dsub>
 800588c:	f04f 0a00 	mov.w	sl, #0
 8005890:	4602      	mov	r2, r0
 8005892:	460b      	mov	r3, r1
 8005894:	4604      	mov	r4, r0
 8005896:	460d      	mov	r5, r1
 8005898:	4630      	mov	r0, r6
 800589a:	4639      	mov	r1, r7
 800589c:	f7fa fc5e 	bl	800015c <__adddf3>
 80058a0:	4632      	mov	r2, r6
 80058a2:	463b      	mov	r3, r7
 80058a4:	4650      	mov	r0, sl
 80058a6:	468b      	mov	fp, r1
 80058a8:	f7fa fc56 	bl	8000158 <__aeabi_dsub>
 80058ac:	4602      	mov	r2, r0
 80058ae:	460b      	mov	r3, r1
 80058b0:	4620      	mov	r0, r4
 80058b2:	4629      	mov	r1, r5
 80058b4:	f7fa fc50 	bl	8000158 <__aeabi_dsub>
 80058b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80058bc:	9b00      	ldr	r3, [sp, #0]
 80058be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80058c0:	3b01      	subs	r3, #1
 80058c2:	4313      	orrs	r3, r2
 80058c4:	f04f 0600 	mov.w	r6, #0
 80058c8:	f04f 0200 	mov.w	r2, #0
 80058cc:	bf0c      	ite	eq
 80058ce:	4b2f      	ldreq	r3, [pc, #188]	; (800598c <__ieee754_pow+0x3dc>)
 80058d0:	4b2b      	ldrne	r3, [pc, #172]	; (8005980 <__ieee754_pow+0x3d0>)
 80058d2:	4604      	mov	r4, r0
 80058d4:	460d      	mov	r5, r1
 80058d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058da:	e9cd 2300 	strd	r2, r3, [sp]
 80058de:	4632      	mov	r2, r6
 80058e0:	463b      	mov	r3, r7
 80058e2:	f7fa fc39 	bl	8000158 <__aeabi_dsub>
 80058e6:	4652      	mov	r2, sl
 80058e8:	465b      	mov	r3, fp
 80058ea:	f7fa fded 	bl	80004c8 <__aeabi_dmul>
 80058ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80058f2:	4680      	mov	r8, r0
 80058f4:	4689      	mov	r9, r1
 80058f6:	4620      	mov	r0, r4
 80058f8:	4629      	mov	r1, r5
 80058fa:	f7fa fde5 	bl	80004c8 <__aeabi_dmul>
 80058fe:	4602      	mov	r2, r0
 8005900:	460b      	mov	r3, r1
 8005902:	4640      	mov	r0, r8
 8005904:	4649      	mov	r1, r9
 8005906:	f7fa fc29 	bl	800015c <__adddf3>
 800590a:	4632      	mov	r2, r6
 800590c:	463b      	mov	r3, r7
 800590e:	4680      	mov	r8, r0
 8005910:	4689      	mov	r9, r1
 8005912:	4650      	mov	r0, sl
 8005914:	4659      	mov	r1, fp
 8005916:	f7fa fdd7 	bl	80004c8 <__aeabi_dmul>
 800591a:	4604      	mov	r4, r0
 800591c:	460d      	mov	r5, r1
 800591e:	460b      	mov	r3, r1
 8005920:	4602      	mov	r2, r0
 8005922:	4649      	mov	r1, r9
 8005924:	4640      	mov	r0, r8
 8005926:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800592a:	f7fa fc17 	bl	800015c <__adddf3>
 800592e:	4b18      	ldr	r3, [pc, #96]	; (8005990 <__ieee754_pow+0x3e0>)
 8005930:	4682      	mov	sl, r0
 8005932:	4299      	cmp	r1, r3
 8005934:	460f      	mov	r7, r1
 8005936:	460e      	mov	r6, r1
 8005938:	f340 82e5 	ble.w	8005f06 <__ieee754_pow+0x956>
 800593c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005940:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005944:	4303      	orrs	r3, r0
 8005946:	f000 81df 	beq.w	8005d08 <__ieee754_pow+0x758>
 800594a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800594e:	2200      	movs	r2, #0
 8005950:	2300      	movs	r3, #0
 8005952:	f7fb f82b 	bl	80009ac <__aeabi_dcmplt>
 8005956:	3800      	subs	r0, #0
 8005958:	bf18      	it	ne
 800595a:	2001      	movne	r0, #1
 800595c:	e72e      	b.n	80057bc <__ieee754_pow+0x20c>
 800595e:	bf00      	nop
 8005960:	60000000 	.word	0x60000000
 8005964:	3ff71547 	.word	0x3ff71547
 8005968:	f85ddf44 	.word	0xf85ddf44
 800596c:	3e54ae0b 	.word	0x3e54ae0b
 8005970:	55555555 	.word	0x55555555
 8005974:	3fd55555 	.word	0x3fd55555
 8005978:	652b82fe 	.word	0x652b82fe
 800597c:	3ff71547 	.word	0x3ff71547
 8005980:	3ff00000 	.word	0x3ff00000
 8005984:	3fd00000 	.word	0x3fd00000
 8005988:	3fe00000 	.word	0x3fe00000
 800598c:	bff00000 	.word	0xbff00000
 8005990:	408fffff 	.word	0x408fffff
 8005994:	4bd2      	ldr	r3, [pc, #840]	; (8005ce0 <__ieee754_pow+0x730>)
 8005996:	2200      	movs	r2, #0
 8005998:	402b      	ands	r3, r5
 800599a:	b943      	cbnz	r3, 80059ae <__ieee754_pow+0x3fe>
 800599c:	4658      	mov	r0, fp
 800599e:	4661      	mov	r1, ip
 80059a0:	4bd0      	ldr	r3, [pc, #832]	; (8005ce4 <__ieee754_pow+0x734>)
 80059a2:	f7fa fd91 	bl	80004c8 <__aeabi_dmul>
 80059a6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80059aa:	4683      	mov	fp, r0
 80059ac:	460c      	mov	r4, r1
 80059ae:	1523      	asrs	r3, r4, #20
 80059b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80059b4:	4413      	add	r3, r2
 80059b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80059b8:	4bcb      	ldr	r3, [pc, #812]	; (8005ce8 <__ieee754_pow+0x738>)
 80059ba:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80059be:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80059c2:	429c      	cmp	r4, r3
 80059c4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80059c8:	dd08      	ble.n	80059dc <__ieee754_pow+0x42c>
 80059ca:	4bc8      	ldr	r3, [pc, #800]	; (8005cec <__ieee754_pow+0x73c>)
 80059cc:	429c      	cmp	r4, r3
 80059ce:	f340 8199 	ble.w	8005d04 <__ieee754_pow+0x754>
 80059d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059d4:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80059d8:	3301      	adds	r3, #1
 80059da:	930b      	str	r3, [sp, #44]	; 0x2c
 80059dc:	2600      	movs	r6, #0
 80059de:	00f3      	lsls	r3, r6, #3
 80059e0:	930d      	str	r3, [sp, #52]	; 0x34
 80059e2:	4bc3      	ldr	r3, [pc, #780]	; (8005cf0 <__ieee754_pow+0x740>)
 80059e4:	4658      	mov	r0, fp
 80059e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80059ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 80059ee:	4629      	mov	r1, r5
 80059f0:	461a      	mov	r2, r3
 80059f2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80059f6:	4623      	mov	r3, r4
 80059f8:	f7fa fbae 	bl	8000158 <__aeabi_dsub>
 80059fc:	46da      	mov	sl, fp
 80059fe:	462b      	mov	r3, r5
 8005a00:	4652      	mov	r2, sl
 8005a02:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8005a06:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005a0a:	f7fa fba7 	bl	800015c <__adddf3>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	460b      	mov	r3, r1
 8005a12:	2000      	movs	r0, #0
 8005a14:	49b7      	ldr	r1, [pc, #732]	; (8005cf4 <__ieee754_pow+0x744>)
 8005a16:	f7fa fe81 	bl	800071c <__aeabi_ddiv>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005a22:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005a26:	f7fa fd4f 	bl	80004c8 <__aeabi_dmul>
 8005a2a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005a2e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8005a32:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005a36:	2300      	movs	r3, #0
 8005a38:	2200      	movs	r2, #0
 8005a3a:	46ab      	mov	fp, r5
 8005a3c:	106d      	asrs	r5, r5, #1
 8005a3e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005a42:	9304      	str	r3, [sp, #16]
 8005a44:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005a48:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005a4c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8005a50:	4640      	mov	r0, r8
 8005a52:	4649      	mov	r1, r9
 8005a54:	4614      	mov	r4, r2
 8005a56:	461d      	mov	r5, r3
 8005a58:	f7fa fd36 	bl	80004c8 <__aeabi_dmul>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	460b      	mov	r3, r1
 8005a60:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005a64:	f7fa fb78 	bl	8000158 <__aeabi_dsub>
 8005a68:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005a6c:	4606      	mov	r6, r0
 8005a6e:	460f      	mov	r7, r1
 8005a70:	4620      	mov	r0, r4
 8005a72:	4629      	mov	r1, r5
 8005a74:	f7fa fb70 	bl	8000158 <__aeabi_dsub>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	4650      	mov	r0, sl
 8005a7e:	4659      	mov	r1, fp
 8005a80:	f7fa fb6a 	bl	8000158 <__aeabi_dsub>
 8005a84:	4642      	mov	r2, r8
 8005a86:	464b      	mov	r3, r9
 8005a88:	f7fa fd1e 	bl	80004c8 <__aeabi_dmul>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	460b      	mov	r3, r1
 8005a90:	4630      	mov	r0, r6
 8005a92:	4639      	mov	r1, r7
 8005a94:	f7fa fb60 	bl	8000158 <__aeabi_dsub>
 8005a98:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005a9c:	f7fa fd14 	bl	80004c8 <__aeabi_dmul>
 8005aa0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005aa4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005aa8:	4610      	mov	r0, r2
 8005aaa:	4619      	mov	r1, r3
 8005aac:	f7fa fd0c 	bl	80004c8 <__aeabi_dmul>
 8005ab0:	a379      	add	r3, pc, #484	; (adr r3, 8005c98 <__ieee754_pow+0x6e8>)
 8005ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab6:	4604      	mov	r4, r0
 8005ab8:	460d      	mov	r5, r1
 8005aba:	f7fa fd05 	bl	80004c8 <__aeabi_dmul>
 8005abe:	a378      	add	r3, pc, #480	; (adr r3, 8005ca0 <__ieee754_pow+0x6f0>)
 8005ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac4:	f7fa fb4a 	bl	800015c <__adddf3>
 8005ac8:	4622      	mov	r2, r4
 8005aca:	462b      	mov	r3, r5
 8005acc:	f7fa fcfc 	bl	80004c8 <__aeabi_dmul>
 8005ad0:	a375      	add	r3, pc, #468	; (adr r3, 8005ca8 <__ieee754_pow+0x6f8>)
 8005ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad6:	f7fa fb41 	bl	800015c <__adddf3>
 8005ada:	4622      	mov	r2, r4
 8005adc:	462b      	mov	r3, r5
 8005ade:	f7fa fcf3 	bl	80004c8 <__aeabi_dmul>
 8005ae2:	a373      	add	r3, pc, #460	; (adr r3, 8005cb0 <__ieee754_pow+0x700>)
 8005ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae8:	f7fa fb38 	bl	800015c <__adddf3>
 8005aec:	4622      	mov	r2, r4
 8005aee:	462b      	mov	r3, r5
 8005af0:	f7fa fcea 	bl	80004c8 <__aeabi_dmul>
 8005af4:	a370      	add	r3, pc, #448	; (adr r3, 8005cb8 <__ieee754_pow+0x708>)
 8005af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afa:	f7fa fb2f 	bl	800015c <__adddf3>
 8005afe:	4622      	mov	r2, r4
 8005b00:	462b      	mov	r3, r5
 8005b02:	f7fa fce1 	bl	80004c8 <__aeabi_dmul>
 8005b06:	a36e      	add	r3, pc, #440	; (adr r3, 8005cc0 <__ieee754_pow+0x710>)
 8005b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0c:	f7fa fb26 	bl	800015c <__adddf3>
 8005b10:	4622      	mov	r2, r4
 8005b12:	4606      	mov	r6, r0
 8005b14:	460f      	mov	r7, r1
 8005b16:	462b      	mov	r3, r5
 8005b18:	4620      	mov	r0, r4
 8005b1a:	4629      	mov	r1, r5
 8005b1c:	f7fa fcd4 	bl	80004c8 <__aeabi_dmul>
 8005b20:	4602      	mov	r2, r0
 8005b22:	460b      	mov	r3, r1
 8005b24:	4630      	mov	r0, r6
 8005b26:	4639      	mov	r1, r7
 8005b28:	f7fa fcce 	bl	80004c8 <__aeabi_dmul>
 8005b2c:	4604      	mov	r4, r0
 8005b2e:	460d      	mov	r5, r1
 8005b30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b34:	4642      	mov	r2, r8
 8005b36:	464b      	mov	r3, r9
 8005b38:	f7fa fb10 	bl	800015c <__adddf3>
 8005b3c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005b40:	f7fa fcc2 	bl	80004c8 <__aeabi_dmul>
 8005b44:	4622      	mov	r2, r4
 8005b46:	462b      	mov	r3, r5
 8005b48:	f7fa fb08 	bl	800015c <__adddf3>
 8005b4c:	4642      	mov	r2, r8
 8005b4e:	4606      	mov	r6, r0
 8005b50:	460f      	mov	r7, r1
 8005b52:	464b      	mov	r3, r9
 8005b54:	4640      	mov	r0, r8
 8005b56:	4649      	mov	r1, r9
 8005b58:	f7fa fcb6 	bl	80004c8 <__aeabi_dmul>
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	4b66      	ldr	r3, [pc, #408]	; (8005cf8 <__ieee754_pow+0x748>)
 8005b60:	4682      	mov	sl, r0
 8005b62:	468b      	mov	fp, r1
 8005b64:	f7fa fafa 	bl	800015c <__adddf3>
 8005b68:	4632      	mov	r2, r6
 8005b6a:	463b      	mov	r3, r7
 8005b6c:	f7fa faf6 	bl	800015c <__adddf3>
 8005b70:	2400      	movs	r4, #0
 8005b72:	460d      	mov	r5, r1
 8005b74:	4622      	mov	r2, r4
 8005b76:	460b      	mov	r3, r1
 8005b78:	4640      	mov	r0, r8
 8005b7a:	4649      	mov	r1, r9
 8005b7c:	f7fa fca4 	bl	80004c8 <__aeabi_dmul>
 8005b80:	2200      	movs	r2, #0
 8005b82:	4680      	mov	r8, r0
 8005b84:	4689      	mov	r9, r1
 8005b86:	4620      	mov	r0, r4
 8005b88:	4629      	mov	r1, r5
 8005b8a:	4b5b      	ldr	r3, [pc, #364]	; (8005cf8 <__ieee754_pow+0x748>)
 8005b8c:	f7fa fae4 	bl	8000158 <__aeabi_dsub>
 8005b90:	4652      	mov	r2, sl
 8005b92:	465b      	mov	r3, fp
 8005b94:	f7fa fae0 	bl	8000158 <__aeabi_dsub>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	4630      	mov	r0, r6
 8005b9e:	4639      	mov	r1, r7
 8005ba0:	f7fa fada 	bl	8000158 <__aeabi_dsub>
 8005ba4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ba8:	f7fa fc8e 	bl	80004c8 <__aeabi_dmul>
 8005bac:	4622      	mov	r2, r4
 8005bae:	4606      	mov	r6, r0
 8005bb0:	460f      	mov	r7, r1
 8005bb2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005bb6:	462b      	mov	r3, r5
 8005bb8:	f7fa fc86 	bl	80004c8 <__aeabi_dmul>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	4630      	mov	r0, r6
 8005bc2:	4639      	mov	r1, r7
 8005bc4:	f7fa faca 	bl	800015c <__adddf3>
 8005bc8:	2400      	movs	r4, #0
 8005bca:	4606      	mov	r6, r0
 8005bcc:	460f      	mov	r7, r1
 8005bce:	4602      	mov	r2, r0
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	4640      	mov	r0, r8
 8005bd4:	4649      	mov	r1, r9
 8005bd6:	f7fa fac1 	bl	800015c <__adddf3>
 8005bda:	a33b      	add	r3, pc, #236	; (adr r3, 8005cc8 <__ieee754_pow+0x718>)
 8005bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be0:	4620      	mov	r0, r4
 8005be2:	460d      	mov	r5, r1
 8005be4:	f7fa fc70 	bl	80004c8 <__aeabi_dmul>
 8005be8:	4642      	mov	r2, r8
 8005bea:	464b      	mov	r3, r9
 8005bec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005bf0:	4620      	mov	r0, r4
 8005bf2:	4629      	mov	r1, r5
 8005bf4:	f7fa fab0 	bl	8000158 <__aeabi_dsub>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	4630      	mov	r0, r6
 8005bfe:	4639      	mov	r1, r7
 8005c00:	f7fa faaa 	bl	8000158 <__aeabi_dsub>
 8005c04:	a332      	add	r3, pc, #200	; (adr r3, 8005cd0 <__ieee754_pow+0x720>)
 8005c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0a:	f7fa fc5d 	bl	80004c8 <__aeabi_dmul>
 8005c0e:	a332      	add	r3, pc, #200	; (adr r3, 8005cd8 <__ieee754_pow+0x728>)
 8005c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c14:	4606      	mov	r6, r0
 8005c16:	460f      	mov	r7, r1
 8005c18:	4620      	mov	r0, r4
 8005c1a:	4629      	mov	r1, r5
 8005c1c:	f7fa fc54 	bl	80004c8 <__aeabi_dmul>
 8005c20:	4602      	mov	r2, r0
 8005c22:	460b      	mov	r3, r1
 8005c24:	4630      	mov	r0, r6
 8005c26:	4639      	mov	r1, r7
 8005c28:	f7fa fa98 	bl	800015c <__adddf3>
 8005c2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c2e:	4b33      	ldr	r3, [pc, #204]	; (8005cfc <__ieee754_pow+0x74c>)
 8005c30:	f04f 0a00 	mov.w	sl, #0
 8005c34:	4413      	add	r3, r2
 8005c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3a:	f7fa fa8f 	bl	800015c <__adddf3>
 8005c3e:	4680      	mov	r8, r0
 8005c40:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005c42:	4689      	mov	r9, r1
 8005c44:	f7fa fbd6 	bl	80003f4 <__aeabi_i2d>
 8005c48:	4604      	mov	r4, r0
 8005c4a:	460d      	mov	r5, r1
 8005c4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c4e:	4b2c      	ldr	r3, [pc, #176]	; (8005d00 <__ieee754_pow+0x750>)
 8005c50:	4413      	add	r3, r2
 8005c52:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005c56:	4642      	mov	r2, r8
 8005c58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c5c:	464b      	mov	r3, r9
 8005c5e:	f7fa fa7d 	bl	800015c <__adddf3>
 8005c62:	4632      	mov	r2, r6
 8005c64:	463b      	mov	r3, r7
 8005c66:	f7fa fa79 	bl	800015c <__adddf3>
 8005c6a:	4622      	mov	r2, r4
 8005c6c:	462b      	mov	r3, r5
 8005c6e:	f7fa fa75 	bl	800015c <__adddf3>
 8005c72:	4622      	mov	r2, r4
 8005c74:	462b      	mov	r3, r5
 8005c76:	4650      	mov	r0, sl
 8005c78:	468b      	mov	fp, r1
 8005c7a:	f7fa fa6d 	bl	8000158 <__aeabi_dsub>
 8005c7e:	4632      	mov	r2, r6
 8005c80:	463b      	mov	r3, r7
 8005c82:	f7fa fa69 	bl	8000158 <__aeabi_dsub>
 8005c86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005c8a:	f7fa fa65 	bl	8000158 <__aeabi_dsub>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	460b      	mov	r3, r1
 8005c92:	4640      	mov	r0, r8
 8005c94:	4649      	mov	r1, r9
 8005c96:	e60d      	b.n	80058b4 <__ieee754_pow+0x304>
 8005c98:	4a454eef 	.word	0x4a454eef
 8005c9c:	3fca7e28 	.word	0x3fca7e28
 8005ca0:	93c9db65 	.word	0x93c9db65
 8005ca4:	3fcd864a 	.word	0x3fcd864a
 8005ca8:	a91d4101 	.word	0xa91d4101
 8005cac:	3fd17460 	.word	0x3fd17460
 8005cb0:	518f264d 	.word	0x518f264d
 8005cb4:	3fd55555 	.word	0x3fd55555
 8005cb8:	db6fabff 	.word	0xdb6fabff
 8005cbc:	3fdb6db6 	.word	0x3fdb6db6
 8005cc0:	33333303 	.word	0x33333303
 8005cc4:	3fe33333 	.word	0x3fe33333
 8005cc8:	e0000000 	.word	0xe0000000
 8005ccc:	3feec709 	.word	0x3feec709
 8005cd0:	dc3a03fd 	.word	0xdc3a03fd
 8005cd4:	3feec709 	.word	0x3feec709
 8005cd8:	145b01f5 	.word	0x145b01f5
 8005cdc:	be3e2fe0 	.word	0xbe3e2fe0
 8005ce0:	7ff00000 	.word	0x7ff00000
 8005ce4:	43400000 	.word	0x43400000
 8005ce8:	0003988e 	.word	0x0003988e
 8005cec:	000bb679 	.word	0x000bb679
 8005cf0:	08006350 	.word	0x08006350
 8005cf4:	3ff00000 	.word	0x3ff00000
 8005cf8:	40080000 	.word	0x40080000
 8005cfc:	08006370 	.word	0x08006370
 8005d00:	08006360 	.word	0x08006360
 8005d04:	2601      	movs	r6, #1
 8005d06:	e66a      	b.n	80059de <__ieee754_pow+0x42e>
 8005d08:	a39d      	add	r3, pc, #628	; (adr r3, 8005f80 <__ieee754_pow+0x9d0>)
 8005d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0e:	4640      	mov	r0, r8
 8005d10:	4649      	mov	r1, r9
 8005d12:	f7fa fa23 	bl	800015c <__adddf3>
 8005d16:	4622      	mov	r2, r4
 8005d18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d1c:	462b      	mov	r3, r5
 8005d1e:	4650      	mov	r0, sl
 8005d20:	4639      	mov	r1, r7
 8005d22:	f7fa fa19 	bl	8000158 <__aeabi_dsub>
 8005d26:	4602      	mov	r2, r0
 8005d28:	460b      	mov	r3, r1
 8005d2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d2e:	f7fa fe5b 	bl	80009e8 <__aeabi_dcmpgt>
 8005d32:	2800      	cmp	r0, #0
 8005d34:	f47f ae09 	bne.w	800594a <__ieee754_pow+0x39a>
 8005d38:	4aa3      	ldr	r2, [pc, #652]	; (8005fc8 <__ieee754_pow+0xa18>)
 8005d3a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	f340 8101 	ble.w	8005f46 <__ieee754_pow+0x996>
 8005d44:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005d48:	2000      	movs	r0, #0
 8005d4a:	151b      	asrs	r3, r3, #20
 8005d4c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005d50:	fa4a f303 	asr.w	r3, sl, r3
 8005d54:	4433      	add	r3, r6
 8005d56:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005d5a:	4f9c      	ldr	r7, [pc, #624]	; (8005fcc <__ieee754_pow+0xa1c>)
 8005d5c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005d60:	4117      	asrs	r7, r2
 8005d62:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005d66:	ea23 0107 	bic.w	r1, r3, r7
 8005d6a:	f1c2 0214 	rsb	r2, r2, #20
 8005d6e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005d72:	460b      	mov	r3, r1
 8005d74:	fa4a fa02 	asr.w	sl, sl, r2
 8005d78:	2e00      	cmp	r6, #0
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	4629      	mov	r1, r5
 8005d7e:	4620      	mov	r0, r4
 8005d80:	bfb8      	it	lt
 8005d82:	f1ca 0a00 	rsblt	sl, sl, #0
 8005d86:	f7fa f9e7 	bl	8000158 <__aeabi_dsub>
 8005d8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d92:	2400      	movs	r4, #0
 8005d94:	4642      	mov	r2, r8
 8005d96:	464b      	mov	r3, r9
 8005d98:	f7fa f9e0 	bl	800015c <__adddf3>
 8005d9c:	a37a      	add	r3, pc, #488	; (adr r3, 8005f88 <__ieee754_pow+0x9d8>)
 8005d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da2:	4620      	mov	r0, r4
 8005da4:	460d      	mov	r5, r1
 8005da6:	f7fa fb8f 	bl	80004c8 <__aeabi_dmul>
 8005daa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005dae:	4606      	mov	r6, r0
 8005db0:	460f      	mov	r7, r1
 8005db2:	4620      	mov	r0, r4
 8005db4:	4629      	mov	r1, r5
 8005db6:	f7fa f9cf 	bl	8000158 <__aeabi_dsub>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	4640      	mov	r0, r8
 8005dc0:	4649      	mov	r1, r9
 8005dc2:	f7fa f9c9 	bl	8000158 <__aeabi_dsub>
 8005dc6:	a372      	add	r3, pc, #456	; (adr r3, 8005f90 <__ieee754_pow+0x9e0>)
 8005dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dcc:	f7fa fb7c 	bl	80004c8 <__aeabi_dmul>
 8005dd0:	a371      	add	r3, pc, #452	; (adr r3, 8005f98 <__ieee754_pow+0x9e8>)
 8005dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd6:	4680      	mov	r8, r0
 8005dd8:	4689      	mov	r9, r1
 8005dda:	4620      	mov	r0, r4
 8005ddc:	4629      	mov	r1, r5
 8005dde:	f7fa fb73 	bl	80004c8 <__aeabi_dmul>
 8005de2:	4602      	mov	r2, r0
 8005de4:	460b      	mov	r3, r1
 8005de6:	4640      	mov	r0, r8
 8005de8:	4649      	mov	r1, r9
 8005dea:	f7fa f9b7 	bl	800015c <__adddf3>
 8005dee:	4604      	mov	r4, r0
 8005df0:	460d      	mov	r5, r1
 8005df2:	4602      	mov	r2, r0
 8005df4:	460b      	mov	r3, r1
 8005df6:	4630      	mov	r0, r6
 8005df8:	4639      	mov	r1, r7
 8005dfa:	f7fa f9af 	bl	800015c <__adddf3>
 8005dfe:	4632      	mov	r2, r6
 8005e00:	463b      	mov	r3, r7
 8005e02:	4680      	mov	r8, r0
 8005e04:	4689      	mov	r9, r1
 8005e06:	f7fa f9a7 	bl	8000158 <__aeabi_dsub>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	4620      	mov	r0, r4
 8005e10:	4629      	mov	r1, r5
 8005e12:	f7fa f9a1 	bl	8000158 <__aeabi_dsub>
 8005e16:	4642      	mov	r2, r8
 8005e18:	4606      	mov	r6, r0
 8005e1a:	460f      	mov	r7, r1
 8005e1c:	464b      	mov	r3, r9
 8005e1e:	4640      	mov	r0, r8
 8005e20:	4649      	mov	r1, r9
 8005e22:	f7fa fb51 	bl	80004c8 <__aeabi_dmul>
 8005e26:	a35e      	add	r3, pc, #376	; (adr r3, 8005fa0 <__ieee754_pow+0x9f0>)
 8005e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2c:	4604      	mov	r4, r0
 8005e2e:	460d      	mov	r5, r1
 8005e30:	f7fa fb4a 	bl	80004c8 <__aeabi_dmul>
 8005e34:	a35c      	add	r3, pc, #368	; (adr r3, 8005fa8 <__ieee754_pow+0x9f8>)
 8005e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3a:	f7fa f98d 	bl	8000158 <__aeabi_dsub>
 8005e3e:	4622      	mov	r2, r4
 8005e40:	462b      	mov	r3, r5
 8005e42:	f7fa fb41 	bl	80004c8 <__aeabi_dmul>
 8005e46:	a35a      	add	r3, pc, #360	; (adr r3, 8005fb0 <__ieee754_pow+0xa00>)
 8005e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4c:	f7fa f986 	bl	800015c <__adddf3>
 8005e50:	4622      	mov	r2, r4
 8005e52:	462b      	mov	r3, r5
 8005e54:	f7fa fb38 	bl	80004c8 <__aeabi_dmul>
 8005e58:	a357      	add	r3, pc, #348	; (adr r3, 8005fb8 <__ieee754_pow+0xa08>)
 8005e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5e:	f7fa f97b 	bl	8000158 <__aeabi_dsub>
 8005e62:	4622      	mov	r2, r4
 8005e64:	462b      	mov	r3, r5
 8005e66:	f7fa fb2f 	bl	80004c8 <__aeabi_dmul>
 8005e6a:	a355      	add	r3, pc, #340	; (adr r3, 8005fc0 <__ieee754_pow+0xa10>)
 8005e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e70:	f7fa f974 	bl	800015c <__adddf3>
 8005e74:	4622      	mov	r2, r4
 8005e76:	462b      	mov	r3, r5
 8005e78:	f7fa fb26 	bl	80004c8 <__aeabi_dmul>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	460b      	mov	r3, r1
 8005e80:	4640      	mov	r0, r8
 8005e82:	4649      	mov	r1, r9
 8005e84:	f7fa f968 	bl	8000158 <__aeabi_dsub>
 8005e88:	4604      	mov	r4, r0
 8005e8a:	460d      	mov	r5, r1
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	460b      	mov	r3, r1
 8005e90:	4640      	mov	r0, r8
 8005e92:	4649      	mov	r1, r9
 8005e94:	f7fa fb18 	bl	80004c8 <__aeabi_dmul>
 8005e98:	2200      	movs	r2, #0
 8005e9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	4629      	mov	r1, r5
 8005ea6:	f7fa f957 	bl	8000158 <__aeabi_dsub>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	460b      	mov	r3, r1
 8005eae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005eb2:	f7fa fc33 	bl	800071c <__aeabi_ddiv>
 8005eb6:	4632      	mov	r2, r6
 8005eb8:	4604      	mov	r4, r0
 8005eba:	460d      	mov	r5, r1
 8005ebc:	463b      	mov	r3, r7
 8005ebe:	4640      	mov	r0, r8
 8005ec0:	4649      	mov	r1, r9
 8005ec2:	f7fa fb01 	bl	80004c8 <__aeabi_dmul>
 8005ec6:	4632      	mov	r2, r6
 8005ec8:	463b      	mov	r3, r7
 8005eca:	f7fa f947 	bl	800015c <__adddf3>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	4629      	mov	r1, r5
 8005ed6:	f7fa f93f 	bl	8000158 <__aeabi_dsub>
 8005eda:	4642      	mov	r2, r8
 8005edc:	464b      	mov	r3, r9
 8005ede:	f7fa f93b 	bl	8000158 <__aeabi_dsub>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	2000      	movs	r0, #0
 8005ee8:	4939      	ldr	r1, [pc, #228]	; (8005fd0 <__ieee754_pow+0xa20>)
 8005eea:	f7fa f935 	bl	8000158 <__aeabi_dsub>
 8005eee:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8005ef2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005ef6:	da29      	bge.n	8005f4c <__ieee754_pow+0x99c>
 8005ef8:	4652      	mov	r2, sl
 8005efa:	f000 f955 	bl	80061a8 <scalbn>
 8005efe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f02:	f7ff bbfe 	b.w	8005702 <__ieee754_pow+0x152>
 8005f06:	4b33      	ldr	r3, [pc, #204]	; (8005fd4 <__ieee754_pow+0xa24>)
 8005f08:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8005f0c:	429f      	cmp	r7, r3
 8005f0e:	f77f af13 	ble.w	8005d38 <__ieee754_pow+0x788>
 8005f12:	4b31      	ldr	r3, [pc, #196]	; (8005fd8 <__ieee754_pow+0xa28>)
 8005f14:	440b      	add	r3, r1
 8005f16:	4303      	orrs	r3, r0
 8005f18:	d009      	beq.n	8005f2e <__ieee754_pow+0x97e>
 8005f1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	2300      	movs	r3, #0
 8005f22:	f7fa fd43 	bl	80009ac <__aeabi_dcmplt>
 8005f26:	3800      	subs	r0, #0
 8005f28:	bf18      	it	ne
 8005f2a:	2001      	movne	r0, #1
 8005f2c:	e453      	b.n	80057d6 <__ieee754_pow+0x226>
 8005f2e:	4622      	mov	r2, r4
 8005f30:	462b      	mov	r3, r5
 8005f32:	f7fa f911 	bl	8000158 <__aeabi_dsub>
 8005f36:	4642      	mov	r2, r8
 8005f38:	464b      	mov	r3, r9
 8005f3a:	f7fa fd4b 	bl	80009d4 <__aeabi_dcmpge>
 8005f3e:	2800      	cmp	r0, #0
 8005f40:	f43f aefa 	beq.w	8005d38 <__ieee754_pow+0x788>
 8005f44:	e7e9      	b.n	8005f1a <__ieee754_pow+0x96a>
 8005f46:	f04f 0a00 	mov.w	sl, #0
 8005f4a:	e720      	b.n	8005d8e <__ieee754_pow+0x7de>
 8005f4c:	4621      	mov	r1, r4
 8005f4e:	e7d6      	b.n	8005efe <__ieee754_pow+0x94e>
 8005f50:	f04f 0b00 	mov.w	fp, #0
 8005f54:	f8df c078 	ldr.w	ip, [pc, #120]	; 8005fd0 <__ieee754_pow+0xa20>
 8005f58:	f7ff bbba 	b.w	80056d0 <__ieee754_pow+0x120>
 8005f5c:	f04f 0b00 	mov.w	fp, #0
 8005f60:	f04f 0c00 	mov.w	ip, #0
 8005f64:	f7ff bbb4 	b.w	80056d0 <__ieee754_pow+0x120>
 8005f68:	4640      	mov	r0, r8
 8005f6a:	4649      	mov	r1, r9
 8005f6c:	f7ff bb3d 	b.w	80055ea <__ieee754_pow+0x3a>
 8005f70:	9200      	str	r2, [sp, #0]
 8005f72:	f7ff bb89 	b.w	8005688 <__ieee754_pow+0xd8>
 8005f76:	2300      	movs	r3, #0
 8005f78:	f7ff bb73 	b.w	8005662 <__ieee754_pow+0xb2>
 8005f7c:	f3af 8000 	nop.w
 8005f80:	652b82fe 	.word	0x652b82fe
 8005f84:	3c971547 	.word	0x3c971547
 8005f88:	00000000 	.word	0x00000000
 8005f8c:	3fe62e43 	.word	0x3fe62e43
 8005f90:	fefa39ef 	.word	0xfefa39ef
 8005f94:	3fe62e42 	.word	0x3fe62e42
 8005f98:	0ca86c39 	.word	0x0ca86c39
 8005f9c:	be205c61 	.word	0xbe205c61
 8005fa0:	72bea4d0 	.word	0x72bea4d0
 8005fa4:	3e663769 	.word	0x3e663769
 8005fa8:	c5d26bf1 	.word	0xc5d26bf1
 8005fac:	3ebbbd41 	.word	0x3ebbbd41
 8005fb0:	af25de2c 	.word	0xaf25de2c
 8005fb4:	3f11566a 	.word	0x3f11566a
 8005fb8:	16bebd93 	.word	0x16bebd93
 8005fbc:	3f66c16c 	.word	0x3f66c16c
 8005fc0:	5555553e 	.word	0x5555553e
 8005fc4:	3fc55555 	.word	0x3fc55555
 8005fc8:	3fe00000 	.word	0x3fe00000
 8005fcc:	000fffff 	.word	0x000fffff
 8005fd0:	3ff00000 	.word	0x3ff00000
 8005fd4:	4090cbff 	.word	0x4090cbff
 8005fd8:	3f6f3400 	.word	0x3f6f3400

08005fdc <__ieee754_sqrt>:
 8005fdc:	f8df c158 	ldr.w	ip, [pc, #344]	; 8006138 <__ieee754_sqrt+0x15c>
 8005fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fe4:	ea3c 0c01 	bics.w	ip, ip, r1
 8005fe8:	4606      	mov	r6, r0
 8005fea:	460d      	mov	r5, r1
 8005fec:	460c      	mov	r4, r1
 8005fee:	460a      	mov	r2, r1
 8005ff0:	4607      	mov	r7, r0
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	d10f      	bne.n	8006016 <__ieee754_sqrt+0x3a>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	f7fa fa65 	bl	80004c8 <__aeabi_dmul>
 8005ffe:	4602      	mov	r2, r0
 8006000:	460b      	mov	r3, r1
 8006002:	4630      	mov	r0, r6
 8006004:	4629      	mov	r1, r5
 8006006:	f7fa f8a9 	bl	800015c <__adddf3>
 800600a:	4606      	mov	r6, r0
 800600c:	460d      	mov	r5, r1
 800600e:	4630      	mov	r0, r6
 8006010:	4629      	mov	r1, r5
 8006012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006016:	2900      	cmp	r1, #0
 8006018:	dc0e      	bgt.n	8006038 <__ieee754_sqrt+0x5c>
 800601a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800601e:	ea5c 0707 	orrs.w	r7, ip, r7
 8006022:	d0f4      	beq.n	800600e <__ieee754_sqrt+0x32>
 8006024:	b141      	cbz	r1, 8006038 <__ieee754_sqrt+0x5c>
 8006026:	4602      	mov	r2, r0
 8006028:	460b      	mov	r3, r1
 800602a:	f7fa f895 	bl	8000158 <__aeabi_dsub>
 800602e:	4602      	mov	r2, r0
 8006030:	460b      	mov	r3, r1
 8006032:	f7fa fb73 	bl	800071c <__aeabi_ddiv>
 8006036:	e7e8      	b.n	800600a <__ieee754_sqrt+0x2e>
 8006038:	1521      	asrs	r1, r4, #20
 800603a:	d075      	beq.n	8006128 <__ieee754_sqrt+0x14c>
 800603c:	07cc      	lsls	r4, r1, #31
 800603e:	f04f 0400 	mov.w	r4, #0
 8006042:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006046:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800604a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800604e:	bf5e      	ittt	pl
 8006050:	0fd9      	lsrpl	r1, r3, #31
 8006052:	005b      	lslpl	r3, r3, #1
 8006054:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8006058:	0fd9      	lsrs	r1, r3, #31
 800605a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800605e:	2516      	movs	r5, #22
 8006060:	4620      	mov	r0, r4
 8006062:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006066:	107f      	asrs	r7, r7, #1
 8006068:	005b      	lsls	r3, r3, #1
 800606a:	1846      	adds	r6, r0, r1
 800606c:	4296      	cmp	r6, r2
 800606e:	bfde      	ittt	le
 8006070:	1b92      	suble	r2, r2, r6
 8006072:	1870      	addle	r0, r6, r1
 8006074:	1864      	addle	r4, r4, r1
 8006076:	0052      	lsls	r2, r2, #1
 8006078:	3d01      	subs	r5, #1
 800607a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800607e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006082:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006086:	d1f0      	bne.n	800606a <__ieee754_sqrt+0x8e>
 8006088:	4629      	mov	r1, r5
 800608a:	f04f 0e20 	mov.w	lr, #32
 800608e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006092:	4282      	cmp	r2, r0
 8006094:	eb06 0c05 	add.w	ip, r6, r5
 8006098:	dc02      	bgt.n	80060a0 <__ieee754_sqrt+0xc4>
 800609a:	d113      	bne.n	80060c4 <__ieee754_sqrt+0xe8>
 800609c:	459c      	cmp	ip, r3
 800609e:	d811      	bhi.n	80060c4 <__ieee754_sqrt+0xe8>
 80060a0:	f1bc 0f00 	cmp.w	ip, #0
 80060a4:	eb0c 0506 	add.w	r5, ip, r6
 80060a8:	da43      	bge.n	8006132 <__ieee754_sqrt+0x156>
 80060aa:	2d00      	cmp	r5, #0
 80060ac:	db41      	blt.n	8006132 <__ieee754_sqrt+0x156>
 80060ae:	f100 0801 	add.w	r8, r0, #1
 80060b2:	1a12      	subs	r2, r2, r0
 80060b4:	4640      	mov	r0, r8
 80060b6:	459c      	cmp	ip, r3
 80060b8:	bf88      	it	hi
 80060ba:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80060be:	eba3 030c 	sub.w	r3, r3, ip
 80060c2:	4431      	add	r1, r6
 80060c4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80060c8:	f1be 0e01 	subs.w	lr, lr, #1
 80060cc:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80060d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80060d4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80060d8:	d1db      	bne.n	8006092 <__ieee754_sqrt+0xb6>
 80060da:	4313      	orrs	r3, r2
 80060dc:	d006      	beq.n	80060ec <__ieee754_sqrt+0x110>
 80060de:	1c48      	adds	r0, r1, #1
 80060e0:	bf0b      	itete	eq
 80060e2:	4671      	moveq	r1, lr
 80060e4:	3101      	addne	r1, #1
 80060e6:	3401      	addeq	r4, #1
 80060e8:	f021 0101 	bicne.w	r1, r1, #1
 80060ec:	1063      	asrs	r3, r4, #1
 80060ee:	0849      	lsrs	r1, r1, #1
 80060f0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80060f4:	07e2      	lsls	r2, r4, #31
 80060f6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80060fa:	bf48      	it	mi
 80060fc:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8006100:	460e      	mov	r6, r1
 8006102:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8006106:	e782      	b.n	800600e <__ieee754_sqrt+0x32>
 8006108:	0ada      	lsrs	r2, r3, #11
 800610a:	3815      	subs	r0, #21
 800610c:	055b      	lsls	r3, r3, #21
 800610e:	2a00      	cmp	r2, #0
 8006110:	d0fa      	beq.n	8006108 <__ieee754_sqrt+0x12c>
 8006112:	02d5      	lsls	r5, r2, #11
 8006114:	d50a      	bpl.n	800612c <__ieee754_sqrt+0x150>
 8006116:	f1c1 0420 	rsb	r4, r1, #32
 800611a:	fa23 f404 	lsr.w	r4, r3, r4
 800611e:	1e4d      	subs	r5, r1, #1
 8006120:	408b      	lsls	r3, r1
 8006122:	4322      	orrs	r2, r4
 8006124:	1b41      	subs	r1, r0, r5
 8006126:	e789      	b.n	800603c <__ieee754_sqrt+0x60>
 8006128:	4608      	mov	r0, r1
 800612a:	e7f0      	b.n	800610e <__ieee754_sqrt+0x132>
 800612c:	0052      	lsls	r2, r2, #1
 800612e:	3101      	adds	r1, #1
 8006130:	e7ef      	b.n	8006112 <__ieee754_sqrt+0x136>
 8006132:	4680      	mov	r8, r0
 8006134:	e7bd      	b.n	80060b2 <__ieee754_sqrt+0xd6>
 8006136:	bf00      	nop
 8006138:	7ff00000 	.word	0x7ff00000

0800613c <with_errno>:
 800613c:	b570      	push	{r4, r5, r6, lr}
 800613e:	4604      	mov	r4, r0
 8006140:	460d      	mov	r5, r1
 8006142:	4616      	mov	r6, r2
 8006144:	f7fe fd10 	bl	8004b68 <__errno>
 8006148:	4629      	mov	r1, r5
 800614a:	6006      	str	r6, [r0, #0]
 800614c:	4620      	mov	r0, r4
 800614e:	bd70      	pop	{r4, r5, r6, pc}

08006150 <xflow>:
 8006150:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006152:	4615      	mov	r5, r2
 8006154:	461c      	mov	r4, r3
 8006156:	b180      	cbz	r0, 800617a <xflow+0x2a>
 8006158:	4610      	mov	r0, r2
 800615a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800615e:	e9cd 0100 	strd	r0, r1, [sp]
 8006162:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006166:	4628      	mov	r0, r5
 8006168:	4621      	mov	r1, r4
 800616a:	f7fa f9ad 	bl	80004c8 <__aeabi_dmul>
 800616e:	2222      	movs	r2, #34	; 0x22
 8006170:	b003      	add	sp, #12
 8006172:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006176:	f7ff bfe1 	b.w	800613c <with_errno>
 800617a:	4610      	mov	r0, r2
 800617c:	4619      	mov	r1, r3
 800617e:	e7ee      	b.n	800615e <xflow+0xe>

08006180 <__math_uflow>:
 8006180:	2200      	movs	r2, #0
 8006182:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006186:	f7ff bfe3 	b.w	8006150 <xflow>

0800618a <__math_oflow>:
 800618a:	2200      	movs	r2, #0
 800618c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006190:	f7ff bfde 	b.w	8006150 <xflow>

08006194 <fabs>:
 8006194:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006198:	4770      	bx	lr

0800619a <finite>:
 800619a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800619e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80061a2:	0fc0      	lsrs	r0, r0, #31
 80061a4:	4770      	bx	lr
	...

080061a8 <scalbn>:
 80061a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061aa:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80061ae:	4604      	mov	r4, r0
 80061b0:	460d      	mov	r5, r1
 80061b2:	4617      	mov	r7, r2
 80061b4:	460b      	mov	r3, r1
 80061b6:	b996      	cbnz	r6, 80061de <scalbn+0x36>
 80061b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80061bc:	4303      	orrs	r3, r0
 80061be:	d039      	beq.n	8006234 <scalbn+0x8c>
 80061c0:	4b33      	ldr	r3, [pc, #204]	; (8006290 <scalbn+0xe8>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	f7fa f980 	bl	80004c8 <__aeabi_dmul>
 80061c8:	4b32      	ldr	r3, [pc, #200]	; (8006294 <scalbn+0xec>)
 80061ca:	4604      	mov	r4, r0
 80061cc:	429f      	cmp	r7, r3
 80061ce:	460d      	mov	r5, r1
 80061d0:	da0f      	bge.n	80061f2 <scalbn+0x4a>
 80061d2:	a32b      	add	r3, pc, #172	; (adr r3, 8006280 <scalbn+0xd8>)
 80061d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d8:	f7fa f976 	bl	80004c8 <__aeabi_dmul>
 80061dc:	e006      	b.n	80061ec <scalbn+0x44>
 80061de:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80061e2:	4296      	cmp	r6, r2
 80061e4:	d10a      	bne.n	80061fc <scalbn+0x54>
 80061e6:	4602      	mov	r2, r0
 80061e8:	f7f9 ffb8 	bl	800015c <__adddf3>
 80061ec:	4604      	mov	r4, r0
 80061ee:	460d      	mov	r5, r1
 80061f0:	e020      	b.n	8006234 <scalbn+0x8c>
 80061f2:	460b      	mov	r3, r1
 80061f4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80061f8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80061fc:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8006200:	19b9      	adds	r1, r7, r6
 8006202:	4291      	cmp	r1, r2
 8006204:	dd0e      	ble.n	8006224 <scalbn+0x7c>
 8006206:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800620a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800620e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8006212:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8006216:	4820      	ldr	r0, [pc, #128]	; (8006298 <scalbn+0xf0>)
 8006218:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800621c:	a31a      	add	r3, pc, #104	; (adr r3, 8006288 <scalbn+0xe0>)
 800621e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006222:	e7d9      	b.n	80061d8 <scalbn+0x30>
 8006224:	2900      	cmp	r1, #0
 8006226:	dd08      	ble.n	800623a <scalbn+0x92>
 8006228:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800622c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006230:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8006234:	4620      	mov	r0, r4
 8006236:	4629      	mov	r1, r5
 8006238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800623a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800623e:	da12      	bge.n	8006266 <scalbn+0xbe>
 8006240:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006244:	429f      	cmp	r7, r3
 8006246:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800624a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800624e:	dcdc      	bgt.n	800620a <scalbn+0x62>
 8006250:	a30b      	add	r3, pc, #44	; (adr r3, 8006280 <scalbn+0xd8>)
 8006252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006256:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800625a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800625e:	480f      	ldr	r0, [pc, #60]	; (800629c <scalbn+0xf4>)
 8006260:	f041 011f 	orr.w	r1, r1, #31
 8006264:	e7b8      	b.n	80061d8 <scalbn+0x30>
 8006266:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800626a:	3136      	adds	r1, #54	; 0x36
 800626c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006270:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8006274:	4620      	mov	r0, r4
 8006276:	4629      	mov	r1, r5
 8006278:	2200      	movs	r2, #0
 800627a:	4b09      	ldr	r3, [pc, #36]	; (80062a0 <scalbn+0xf8>)
 800627c:	e7ac      	b.n	80061d8 <scalbn+0x30>
 800627e:	bf00      	nop
 8006280:	c2f8f359 	.word	0xc2f8f359
 8006284:	01a56e1f 	.word	0x01a56e1f
 8006288:	8800759c 	.word	0x8800759c
 800628c:	7e37e43c 	.word	0x7e37e43c
 8006290:	43500000 	.word	0x43500000
 8006294:	ffff3cb0 	.word	0xffff3cb0
 8006298:	8800759c 	.word	0x8800759c
 800629c:	c2f8f359 	.word	0xc2f8f359
 80062a0:	3c900000 	.word	0x3c900000

080062a4 <_init>:
 80062a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062a6:	bf00      	nop
 80062a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062aa:	bc08      	pop	{r3}
 80062ac:	469e      	mov	lr, r3
 80062ae:	4770      	bx	lr

080062b0 <_fini>:
 80062b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062b2:	bf00      	nop
 80062b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062b6:	bc08      	pop	{r3}
 80062b8:	469e      	mov	lr, r3
 80062ba:	4770      	bx	lr
